<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular DSO message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO message is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO</t>
</list></t>

<t>session.  Either a client or server can be a responder.</t>

<t><list style="hanging">
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operation:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">
<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
(defined below), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a compliant DSO implementation.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE.
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one, the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value.</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of response codes not defined here, then that document MUST specify the specific
interpretation of those RCODE values in the context of that new DSO TLV.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with the Primary
TLV DSO-TYPE the same as the Primary TLV from the corresponding DSO
request message or it may contain zero or more Additional TLVs only.
The MESSAGE ID field in the DNS message header is sufficient to
identify the DSO request message to which this response message
relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV - the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI.
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
cannot contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>A DSO message can’t contain a TSIG record, because a TSIG record
is included in the additional section of the message, which would
mean that ARCOUNT would be greater than zero.   DSO messages are
required to have an ARCOUNT of zero.  Therefore, if use of signatures
with DSO messages becomes necessary in the future, a new DSO TLV
would have to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with QR=0
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unidirectional message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Long-lived operations, if successful, will remain active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for the Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a DSO response to the first DSO request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="operational-considerations-for-middlebox" title="Operational Considerations for Middlebox">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
a configuration in which DSO traffic is mis-handled.   The simplest way to
avoid such problems is to avoid using middleboxes.   When this is not possible,
middleboxes should be evaluated to make sure that they behave correctly.</t>

<t>Correct behavior for middleboxes consists of one of:</t>

<t><list style="symbols">
  <t>The middlebox does not forward DSO messages, and responds to DSO messages
with a response code other than NOERROR or DSOTYPENI.</t>
  <t>The middlebox acts as a DSO server and follows this specification in
establishing connections.</t>
  <t>There is a 1:1 correspondence between incoming and outgoing connections,
such that when a connection is established to the middlebox, it is guaranteed
that exactly one corresponding connection will be established from the middlebox
to some DNS resolver, and all incoming messages will be forwarded without
modification or reordering.   An example of this would be a NAT forwarder or
TCP connection optimizer (e.g. for a high-latency connection such as a
geosynchronous satellite link).</t>
</list></t>

<t>Middleboxes that do not meet one of the above criteria are very likely to
fail in unexpected and difficult-to-diagnose ways.   For example, a DNS
load balancer might unbundle DNS messages from the incoming TCP stream and
forward each message from the stream to a different DNS server.   If such
a load balancer is in use, and the DNS servers it points implement DSO and
are configured to enable DSO, DSO session establishment will succeed, but
no coherent session will exist between the client and the server.   If such
a load balancer is pointed at a DNS server that does not implement DSO or
is configured not to allow DSO, no such problem will exist, but such a
configuration risks unexpected failure if new server software is installed
which does implement DSO.</t>

<t>It is of course possible to implement a middlebox that properly supports DSO.
It is even possible to implement one that implements DSO with long-lived operations.
This can be done either by maintaining a 1:1 correspondence between incoming
and outgoing connections, as mentioned above, or by terminating incoming
sessions at the middlebox, but maintaining state in the middlebox about any
long-lived that are requested.   Specifying this in detail is beyond the scope
of this document.</t>

</section>
<section anchor="tcp-delayed-acknowledgement-considerations" title="TCP Delayed Acknowledgement Considerations">

<t>Most modern implementations of the Transmission Control Protocol (TCP) include a
feature called “Delayed Acknowledgement” <xref target="RFC1122"/>.</t>

<t>Without this feature, TCP can be very wasteful on the network.
For illustration, consider a simple example like remote login,
using a very simple TCP implementation that lacks delayed acks.
When the user types a keystroke, a data packet is sent.
When the data packet arrives at the server,
the simple TCP implementation sends an immediate acknowledgement.
Mere milliseconds later, the server process reads the one byte of keystroke data,
and consequently the simple TCP implementation sends an immediate window update.
Mere milliseconds later, the server process generates the character echo,
and sends this data back in reply.
The simple TCP implementation then sends this data packet immediately too.
In this case, this simple TCP implementation sends a burst of three packets
almost instantaneously (ack, window update, data).</t>

<t>Clearly it would be more efficient if the TCP implementation were to
combine the three separate packets into one,
and this is what the delayed ack feature is for.</t>

<t>With delayed ack, the TCP implementation waits after receiving a data packet,
typically for 200 ms, and then send its ack if
(a) one more data packet arrives (or sometimes more than one)
(b) the receiving process generates some reply data, or
(c) 200 ms elapses without either of the above occurring.</t>

<t>With delayed ack, remote login becomes much more efficient,
generating just one packet instead of three for each character echo.</t>

<t>The logic of delayed ack is that the 200 ms delay cannot do any significant harm.
If something at the other end were waiting for something, then the receiving
process should generate the reply that the thing at the end is waiting for,
and TCP will then immediately send that reply (and the ack and window update).
And if the receiving process does not in fact generate any reply for this
particular message, then by definition the thing at the other end cannot be
waiting for anything, so the 200 ms delay is harmless.</t>

<t>This assumption may be true, unless the sender is using Nagle’s algorithm,
a similar efficiency feature created to protect the network from poorly
written client software that performs many rapid small writes in sucession.
Nagle’s algorithm allows these small writes to be combined into larger,
less wasteful packets.</t>

<t>Unfortunately, Nagle’s algorithm and delayed ack,
two valuable efficiency features,
can interact badly with each other when used together <xref target="NagleDA"/>.</t>

<t>Some DSO messages elicit responses; others do not.</t>

<t>For DSO messages that do elicit responses, Nagle’s algorithm and delayed ack work as intended.</t>

<t>For DSO messages that do not elicit responses, the delayed ack mechanism
causes the ack to be delayed by 200 ms.
The 200 ms delay on the ack can in turn cause Nagle’s algorithm to prevent the
sender from sending any more data for 200 ms until the awaited ack arrives.
On an enterprise GigE backbone with sub-millisecond round-trip times,
a 200 ms delay is enormous in comparison.</t>

<t>Two solutions have been proposed:</t>

<t><list style="numbers">
  <t>Disable delayed ack.
For DSO messages that elicit no response, removing delayed ack
avoids the needless 200 ms delay,
and sends back an immediate ack, which tells Nagle’s algorithm that it should
immediately grant the sender permission to send its next packet.
Unfortunately, for DSO messages that <spanx style="strong">do</spanx> elicit a response, removing delayed ack
removes the efficiency gains of combining acks with data, and the responder will
now send two or three packets instead of one.</t>
  <t>Disable Nagle’s algorithm.
When acks are delayed by the delayed ack algorithm, removing Nagle’s algorithm
prevents the sender from being blocked from sending its next small packet immediately.
Unfortunately, on a network with a higher round-trip time, removing Nagle’s algorithm
removes the efficiency gains of combining multiple small packets into fewer larger ones,
with the goal of limiting the number of small packets in flight at any one time.</t>
</list></t>

<t>For DSO messages that elicit a response, delayed ack and Nagle’s algorithm do
the right thing.</t>

<t>The problem here is that with DSO messages that elicit no response,
the TCP implementation is stuck waiting, unsure if a response is about to be
generated, or whether the TCP implementation should go ahead and send
an ack and window update.</t>

<t>The solution is networking APIs that allow the receiver to inform the
TCP implementation that a received message has been read, processed,
and no response for this message will be generated.
TCP can then stop waiting for a response that will never come,
and immediately go ahead and send an ack and window update.</t>

<t>For implementations of DSO, disabling delayed ack is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>For implementations of DSO, disabling Nagle’s algorithm is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>At the time that this document is being prepared for publication, it is known
that at least one TCP implementation provides the ability for the recipient of a
TCP message to signal that it is not going to send a response, and hence
the delayed ack mechanism can stop waiting.
Implementations on operating systems where this
feature is available SHOULD make use of it.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC7413;
&RFC8446;
&RFC1122;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAAlIl1sAA+y9e3cbR5In+n9+ilr6D5MeABYlv33m7NAS1c0Z69EkZU/P
zt49RaBIVguowlQVRKFl3c9+452RVQWIst19eudc72hbAgpZmZGRkfH8xXQ6
DV3ZLYvvsifPL7KLLu+K680ye7Eumrwr66oNi3pe5St4YNHk1920LLrr6aJq
6/W0LdoWHpm25U2VL6fHX4QF/Py77OGD42+m30wfhnLdfJd1zabtHj548O2D
hyFvivy77KzqiqYqunB3Q6998TL7uW5el9VN9oem3qzD67v40PQJvjbM8+67
rO0WYbPGl7TfZccPHn05yb7++quvQpjXC/j1d9kG5vZNWJffhSybZl09p/9t
t6umuG7573XT0T9Cvulu64aehD9ZVlYw6Pks+6FYLsuWPuJ1n+db/2Hd3MTZ
ZRfbtitWbfYYSAVDl5vVBL6cz+jR/OqqKd7A0xeP6d8tvLqAdXz75YPs8W3e
wBhAcvyMvp6X3RZeVyzu6nqRPYZ/8cf1Ambx+CT79osHXz2SjzZV18DDry5O
6IP1bV3BQ/90nB1+9eWDo+yLh4+mx0B0+rJY5eXyu6zJt/9StvMZLCBd9MUM
ZlO0t2VTuGVfdBuYYfoNrf1kvV4WcZG6qBdVIV+9zJvX2c/51i3q8QYYqiur
ureiLx8A13xoRV88+OYo+/bbr6bHD46TFc1lbv+S43tn83qVLuxfZ9mTcg6M
1daVW9m/1rdV7wta2AXMb7Gp4uZeFvPbql7WN2XRJhsqT/r109+n2bP8Jl/k
y6LKHhewoEI+fvH2um4W2cW8LKo5U8hRh791pHnx719kX/zhpEeZquyKRfZv
wOkLWqnR4S/54l9antKQCBfjRLjIm/y/FRFaWNBuKlzOsh+LVUKBSxgnfkaL
f15eXd3m25yO82YJDHuT8PjL2QsQEPVbYNxv3NR/AFkJMvSqbjx//3SZPfjy
0YOH0wf2dJ/JZeorkC519S/Xm5vNCBfD1F9uWhB6TelnX6/Sj2kBr6r8+rpc
lvDxIpn5wYEXMbA35c2tm+vzx9nDr796sGOa7ix+e/ztUfbNV19Pjx89Ss7i
WubyL1d5dfMXWkUoK9jSFdwjbwpkjef5zbJ4csJc0uXNDU7stuvW333++d3d
3awliaOHGuXU5+sc5Eb7eYW/XBTLfFss8vnrz3kEvrcuH7/MXhYNvQnZat3U
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
GYxzCzYoZoLLVcVXMPVhVCZRNU9ZMe3O2ts4ulPY68BXchidm2uk0pv8wEM7
8G5jhf+Ys8/l0/S6AEqZ6VYyUiRTJWguni5MLfgx5LNh1nY5wGYLjNuoLZml
qd7IVo31Hdi3W8F2y/LMVpwif9UtC+ucx5vEEcPBm0JsmcSNVBCJ1vzc0+mU
cuwGmUlGyUBNETR9ipyn4njVgDLcC5Ql7Nw3+XD3Poa1UrZSH0fw/DXu6uCT
jpOUDAJEdRG/8RKhdXiuPVdTusNcPWzJ3iBKDOtwp1c2Muhu5PQxCSMfGsMl
bh1RXZIgUa+DJ/14U/lOGUaM7xnNSLELRJFNm0n6bTVYwN37GD7T5vYaPhl0
9hmBie+4A+0u7h+W/jFaCB0mw7arMG/Sijl2vJb7JsS1jna86BkpNINhw4fk
yI9qYB9BC7jTOZ3jHqToMaMmcQQLuV1zETlrKWnfHx/L4F4mrD5VAmfl1/0B
lOhfve9aaiThvIj0/tHrDjoUJbEk6+83DpKF85odDMTfc8HR2RvRsT/I9tFH
lFT+RUdzBNHEduZDSeV/Bo/eaJbrVTGSW9dTjI5+M51EMeY8N01MU/w2BsVs
xw6sw5wOd9RB8Ra7lWJYrXyTOPz4Hh+vSXSh6SBJqKlnoG64TnyY91923kel
SWv9l+cRbwfOL73N9XbCFH042NiNMrjW8GP7fU8s9MCpl0uDOSiwI1g3X0+j
3nMKltSD7IX0EPsEn3jQz3r6uEsoyYrCc9eWqxIDPxSq6tRv/cG5CCzdw2/e
v59lJ1JH8rkezbyU7HjJHWROMstfa7uGbwnJW/CWQiWrilV8+UjtiIlNB8jn
QCFjM1quGcGfWiVoAjId1Brt13R/kB7mEwrSpr6aZSMOTcvSczPlamYuc5G0
yroZC6K45pK1BhWSuJX01EHlqg0fnrTA6+/y7qkBZsgHH6LBiBsw7HMDBuL/
pJwfc1WpDp9Zu/9tZN6HR700Oezj5zxXh6mr5SjzvSW6eqooDs5u3edyykY6
2+3KXetP+v/PXsP/zk8vz/+cPTn98eTP+xLFfudcMfdWTBM6cXVyf58EIIYw
N6wnvh3JG1I75AhOBabT6EC4yDjFL/p1YIYlMAvnClcqHjZjQkduKV6CCxOv
vIrhLhiL5b1dQynPxtxTd6h8aJnkXczsd0HmMML/OhzOzJ/SstobSNGiHoVQ
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
/wD+qyND0rYBAA==

-->

</rfc>

