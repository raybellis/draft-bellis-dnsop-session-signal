<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version  -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-19" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="December" day="04"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular DSO message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO message is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO</t>
</list></t>

<t>session.  Either a client or server can be a responder.</t>

<t><list style="hanging">
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operation:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
</list></t>

<t>Early Data:
A TLS 1.3 handshake containing early data that begins a DSO session (<xref target="RFC8446"/> section 2.3).
TCP Fast Open is only permitted when using TLS.</t>

<t><list style="hanging">
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">

<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>Some DSO messages are permitted as early data (<xref target="zrtt"/>).  Others are not.
Unidirectional messages are never permitted as early data unless an implicit session
exists.</t>

<t>If a server receives a DSO message in early data whose primary TLV is not
permitted to appear in early data, the server MUST forcibly abort the connection.  If a
client receives a DSO message in early data, and there is no implicit DSO
session, the client MUST forcibly abort the connection.   This can only be enforced on
TLS connections; therefore, servers MUST NOT enable TFO when listening for a connection
that does not require TLS.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
(defined below), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a compliant DSO implementation.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE.
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one, the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value.</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of response codes not defined here, then that document MUST specify the specific
interpretation of those RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with the Primary
TLV DSO-TYPE the same as the Primary TLV from the corresponding DSO
request message or it may contain zero or more Additional TLVs only.
The MESSAGE ID field in the DNS message header is sufficient to
identify the DSO request message to which this response message
relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV–the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI.
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
cannot contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>A DSO message can’t contain a TSIG record, because a TSIG record
is included in the additional section of the message, which would
mean that ARCOUNT would be greater than zero.   DSO messages are
required to have an ARCOUNT of zero.  Therefore, if use of signatures
with DSO messages becomes necessary in the future, a new DSO TLV
would have to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with
the QR bit in the DNS header set to zero
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>Every DSO message with the QR bit in the DNS header set to zero and a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response,
with the QR bit in the DNS header set to one and the MESSAGE ID field set to the
value given in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>Every DSO message with both the QR bit in the DNS header and the MESSAGE ID field set to zero
is a DSO unidirectional message, and MUST NOT elicit a response.</t>

<t><vspace blankLines='999' /></t>

<section anchor="delayed-acknowledgement-management" title="Delayed Acknowledgement Management">

<t>Generally, most good TCP implementations employ a delayed acknowledgement timer
to provide more efficient use of the network and better performance.</t>

<t>With a bidirectional exchange over TCP, as for example with a DSO request
message, the operating system TCP implementation waits for the
application-layer client software to generate the corresponding DSO
response message.   It can then send a
single combined packet containing the TCP acknowledgement, the
TCP window update, and the application-generated DSO response message.
This is more efficient than sending three separate packets, as would occur if
the TCP packet containing the DSO request were acknowledged immediately.</t>

<t>With a DSO unidirectional message or DSO response message,
there is no corresponding application-generated DSO response message,
and consequently, no hint to the transport protocol about
when it should send its acknowledgement and window update.</t>

<t>Some networking APIs provide a mechanism that allows the
application-layer client software to signal to the
transport protocol that no response will be forthcoming
(in effect it can be thought of as a zero-length “empty” write).
Where available in the networking API being used,
the recipient of a DSO unidirectional message or DSO response message,
having parsed and interpreted the message,
SHOULD then use this mechanism provided by the networking
API to signal that no response for this message will be forthcoming,
so that the TCP implementation can go ahead and send its
acknowledgement and window update without further delay.
See <xref target="delack"/> for further discussion of why this is important.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="message-id-namespaces" title="MESSAGE ID Namespaces">

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

</section>
<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Long-lived operations, if successful, will remain active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client and server.
Moreover for a keep-alive value that is smaller than the time needed for the transport to
retransmit, a single packet loss would cause a server to overzealously abort the connect. For
example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result in a
continuous stream of ten messages per second or more (if allowed by the current congestion
control window), in both directions, to keep the DSO Session alive.  And, in this extreme
example, a single retransmission over a path with, e.g., 100ms RTT would introduce a momentary
pause in the stream of messages, long enough to cause the server to abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="misbehaving-clients" title="Misbehaving Clients">

<t>A server may determine that a client is not following the protocol correctly.  There may be no
way for the server to recover the session, in which case the server forcibly terminates the
connection.  Since the client doesn’t know why the connection dropped, it may reconnect
immediately.  If the server has determined that a client is not following the protocol
correctly, it may terminate the DSO session as soon as it is established, specifying a long
retry-delay to prevent the client from immediately reconnecting.</t>

</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   When the client notices that
the connection has been dropped, it can attempt to reconnect immediately.
However, if the connection is dropped again without the client being
able to successfully do whatever it is trying to do, it should mark the
server as not supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>DSO messages with the Keepalive TLV as the primary TLV may appear in
early data.</t>

<t>The DSO-DATA for the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relationship to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.   DSO messages
with a Relay Delay TLV as their primary TLV are not permitted in early data.</t>

<t>The DSO-DATA for the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for the Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="operational-considerations-for-middlebox" title="Operational Considerations for Middlebox">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
a configuration in which DSO traffic is mis-handled.   The simplest way to
avoid such problems is to avoid using middleboxes.   When this is not possible,
middleboxes should be evaluated to make sure that they behave correctly.</t>

<t>Correct behavior for middleboxes consists of one of:</t>

<t><list style="symbols">
  <t>The middlebox does not forward DSO messages, and responds to DSO messages
with a response code other than NOERROR or DSOTYPENI.</t>
  <t>The middlebox acts as a DSO server and follows this specification in
establishing connections.</t>
  <t>There is a 1:1 correspondence between incoming and outgoing connections,
such that when a connection is established to the middlebox, it is guaranteed
that exactly one corresponding connection will be established from the middlebox
to some DNS resolver, and all incoming messages will be forwarded without
modification or reordering.   An example of this would be a NAT forwarder or
TCP connection optimizer (e.g. for a high-latency connection such as a
geosynchronous satellite link).</t>
</list></t>

<t>Middleboxes that do not meet one of the above criteria are very likely to
fail in unexpected and difficult-to-diagnose ways.   For example, a DNS
load balancer might unbundle DNS messages from the incoming TCP stream and
forward each message from the stream to a different DNS server.   If such
a load balancer is in use, and the DNS servers it points implement DSO and
are configured to enable DSO, DSO session establishment will succeed, but
no coherent session will exist between the client and the server.   If such
a load balancer is pointed at a DNS server that does not implement DSO or
is configured not to allow DSO, no such problem will exist, but such a
configuration risks unexpected failure if new server software is installed
which does implement DSO.</t>

<t>It is of course possible to implement a middlebox that properly supports DSO.
It is even possible to implement one that implements DSO with long-lived operations.
This can be done either by maintaining a 1:1 correspondence between incoming
and outgoing connections, as mentioned above, or by terminating incoming
sessions at the middlebox, but maintaining state in the middlebox about any
long-lived that are requested.   Specifying this in detail is beyond the scope
of this document.</t>

</section>
<section anchor="delack" title="TCP Delayed Acknowledgement Considerations">

<t>Most modern implementations of the Transmission Control Protocol (TCP) include a
feature called “Delayed Acknowledgement” <xref target="RFC1122"/>.</t>

<t>Without this feature, TCP can be very wasteful on the network.
For illustration, consider a simple example like remote login,
using a very simple TCP implementation that lacks delayed acks.
When the user types a keystroke, a data packet is sent.
When the data packet arrives at the server,
the simple TCP implementation sends an immediate acknowledgement.
Mere milliseconds later, the server process reads the one byte of keystroke data,
and consequently the simple TCP implementation sends an immediate window update.
Mere milliseconds later, the server process generates the character echo,
and sends this data back in reply.
The simple TCP implementation then sends this data packet immediately too.
In this case, this simple TCP implementation sends a burst of three packets
almost instantaneously (ack, window update, data).</t>

<t>Clearly it would be more efficient if the TCP implementation were to
combine the three separate packets into one,
and this is what the delayed ack feature enables.</t>

<t>With delayed ack, the TCP implementation waits after receiving a data packet,
typically for 200 ms, and then send its ack if
(a) more data packet(s) arrive
(b) the receiving process generates some reply data, or
(c) 200 ms elapses without either of the above occurring.</t>

<t>With delayed ack, remote login becomes much more efficient,
generating just one packet instead of three for each character echo.</t>

<t>The logic of delayed ack is that the 200 ms delay cannot do any significant harm.
If something at the other end were waiting for something, then the receiving
process should generate the reply that the thing at the end is waiting for,
and TCP will then immediately send that reply (and the ack and window update).
And if the receiving process does not in fact generate any reply for this
particular message, then by definition the thing at the other end cannot be
waiting for anything, so the 200 ms delay is harmless.</t>

<t>This assumption may be true, unless the sender is using Nagle’s algorithm,
a similar efficiency feature, created to protect the network from poorly
written client software that performs many rapid small writes in succession.
Nagle’s algorithm allows these small writes to be combined into larger,
less wasteful packets.</t>

<t>Unfortunately, Nagle’s algorithm and delayed ack,
two valuable efficiency features,
can interact badly with each other when used together <xref target="NagleDA"/>.</t>

<t>DSO request messages elicit responses; DSO unidirectional messages and DSO response messages do not.</t>

<t>For DSO request messages, which do elicit responses, Nagle’s algorithm and delayed ack work as intended.</t>

<t>For DSO messages that do not elicit responses, the delayed ack mechanism
causes the ack to be delayed by 200 ms.
The 200 ms delay on the ack can in turn cause Nagle’s algorithm to prevent the
sender from sending any more data for 200 ms until the awaited ack arrives.
On an enterprise GigE backbone with sub-millisecond round-trip times,
a 200 ms delay is enormous in comparison.</t>

<t>When this issues is raised, there are two solutions that are often offered,
neither of them ideal:</t>

<t><list style="numbers">
  <t>Disable delayed ack.
For DSO messages that elicit no response, removing delayed ack
avoids the needless 200 ms delay,
and sends back an immediate ack, which tells Nagle’s algorithm that it should
immediately grant the sender permission to send its next packet.
Unfortunately, for DSO messages that <spanx style="strong">do</spanx> elicit a response, removing delayed ack
removes the efficiency gains of combining acks with data, and the responder will
now send two or three packets instead of one.</t>
  <t>Disable Nagle’s algorithm.
When acks are delayed by the delayed ack algorithm, removing Nagle’s algorithm
prevents the sender from being blocked from sending its next small packet immediately.
Unfortunately, on a network with a higher round-trip time, removing Nagle’s algorithm
removes the efficiency gains of combining multiple small packets into fewer larger ones,
with the goal of limiting the number of small packets in flight at any one time.</t>
</list></t>

<t>For DSO messages that elicit a response, delayed ack and Nagle’s algorithm do
the right thing.</t>

<t>The problem here is that with DSO messages that elicit no response,
the TCP implementation is stuck waiting, unsure if a response is about to be
generated, or whether the TCP implementation should go ahead and send
an ack and window update.</t>

<t>The solution is networking APIs that allow the receiver to inform the
TCP implementation that a received message has been read, processed,
and no response for this message will be generated.
TCP can then stop waiting for a response that will never come,
and immediately go ahead and send an ack and window update.</t>

<t>For implementations of DSO, disabling delayed ack is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>For implementations of DSO, disabling Nagle’s algorithm is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>At the time that this document is being prepared for publication, it is known
that at least one TCP implementation provides the ability for the recipient of a
TCP message to signal that it is not going to send a response, and hence
the delayed ack mechanism can stop waiting.
Implementations on operating systems where this
feature is available SHOULD make use of it.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Early Data</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>NO</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>OK</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>NO</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>NA</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for DSO session-management TLVs</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>The meanings of the fields are as follows:</t>

<t><list style="hanging">
  <t hangText='Type:'>
  the 16-bit DSO type code</t>
  <t hangText='Name:'>
  the human-readable name of the TLV</t>
  <t hangText='Early Data:'>
  If OK, this TLV may be sent as early data in a TLS 0-RTT (<xref target="RFC8446"/> Section 2.3) initial
handshake.  If NA, the TLV may appear as a secondary TLV in a DSO message that is send as
early data.</t>
  <t hangText='Status:'>
  IETF Document status (or “External” if not documented in an IETF document.</t>
  <t hangText='Reference:'>
  A stable reference to the document in which this TLV is defined.</t>
</list></t>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Any document defining a new TLV which lists a value of “OK” in the 0-RTT column
must include a threat analysis for the use of the TLV in the case of
TLS 0-RTT.  See <xref target="zrtt"/> for details.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="zrtt" title="TLS 0-RTT Considerations">

<t>DSO permits zero round-trip operation using TCP Fast Open <xref target="RFC7413"/> with TLS 1.3 <xref target="RFC8446"/>
0-RTT to reduce or eliminate round trips in session establishment.  TCP Fast Open is only
permitted in combination with TLS 0-RTT.  In the rest of this section we refer to TLS 1.3 early
data in a TLS 0-RTT initial handshake message, whether or not it is included in a TCP SYN
packet with early data using the TCP Fast Open option, as “early data.”</t>

<t>A DSO message may or may not be permitted to be sent as early data.  The definition for
each TLV that can be used as a primary TLV is required to state whether or not that TLV is
permitted as early data.  Only response-requiring messages are ever permitted as early
data, and only clients are permitted to send any DSO message as
early data, unless there is an implicit session (see <xref target="establishment"/>).</t>

<t>For DSO messages that are permitted as early data, a client MAY include one or more such
messages as early data without having to wait for a DSO response to the first
DSO request message to confirm successful establishment of a DSO session.</t>

<t>However, unless there is an implicit session, a client MUST NOT send DSO unidirectional messages
until after a DSO Session has been mutually established.</t>

<t>Similarly, unless there is an implicit session, a server MUST NOT send DSO request messages
until it has received a response-requiring DSO request message from a client and transmitted a
successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent as early data
are idempotent, or are otherwise immune to any problems that could be result from the
inadvertent replay that can occur with zero round-trip operation.</t>

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.</t>

<t>If a new TLV is specified that does have this property, that TLV must be specified as not
permitted in 0-RTT messages.  This prevents work from being done until a round-trip has occurred
from the server to the client to verify that the source address of the packet is reachable.</t>

<t>Documents that define new TLVs must state whether each new TLV may be sent as early data.
Such documents must include a threat analysis in the security
considerations section for each TLV defined in the document that may be sent as early data.
This threat analysis should be done based on the advice given in
<xref target="RFC8446"/> Section 2.3, 8 and Appendix E.5.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
Bernie Volz and
Bob Harold
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC1122;
&RFC7413;
&RFC8446;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAL/xCVwAA+y9bXcbR5Im+j1/RS39waQHgElJlm35zNmhJaqbM3prkrKn
d2fvniJQJKsFVGFQBVFoWfvbN94zsqoAUra7b9851zvaloBCVmZkZGS8PjEe
j0NbtvPiSfbs1Xl23uZtcbWeZ6+XxSpvy7pqwqyeVvkCHpit8qt2XBbt1XhW
NfVy3BRNA4+Mm/K6yufjo+/DDH7+JHtwePTd+OjB+PBRKJerJ1m7Wjftg8PD
7w8fhHxV5E+y06otVlXRhttrevHrN9nP9epdWV1nf1jV62V4dxsfGj/DF4dp
3j7JmnYW1kt8TfMkOzp8+M0o+/bbx49DmNYz+PWTbA2z+y4syychy8ZZW0/p
f5vNYlVcNfz3etXSP0K+bm/qFT0Jf7KsrGDQs0n2YzGflw19xCs/yzf+w3p1
HWeXnW+atlg02VMgFgxdrhcj+HI6oUfzy8tV8R6ePn9K/27g1QWs4/tvDrOn
N/kKxgCi42f09bRsN/C6YnZb17PsKfyLP65nMIunx9n3jw4fP5SP1lW7goff
nh/TB8ubuoKH/uko23/8zeFB9ujBQ9iDw0P6sljk5fxJtso3/1I20wksIF30
+QRmUzQ35apwyz5v1zDD9Bta+/FyOS/iInVRr6tCvnqTr95lP+cbt6ina2Cp
tqzqzoq+OTx6dOeKHh1+d5B9//3j8dHhUbKiqcztX3J872RaL9KF/eske1ZO
gbGaunIr+9f6pup8QQs7h/nN1lXc3ItielPV8/q6LJpkQ+VJv376+zh7mV/n
s3xeVNnTAhZUyMevP1zVq1l2Pi2LasoUctThbx1pXv/7o+zRH447lKnKtphl
/wacPqOVGh3+ks/+peEp9YlwPkyE83yV/5ciQgML2k6Fi0n2olgkFLiAceJn
tPhX5eXlTb7J6Tiv58Cw1wmPv5m8BgFRfwDG/c5N/UeQliBFL+uV5++fLrLD
bx4egiS0p7tMLlNfgHSpq3+5Wl+vB7gYpv5m3YDQW5V+9vUi/ZgW8LbKr67K
eQkfz5KZ7+15EQN7U17fuLm+epo9+Pbx4ZZpurP4/dH3B9l3j78dHz18mJzF
pczlXy7z6vovtIpQVrClC7hJ3hfIGq/y63nx7Ji5pM1X1zixm7ZdPvn669vb
20lDEkcPNcqpr5c5yI3m6wp/OSvm+aaY5dN3X/MIfHNdPH2TvSlW9CZkq+Wq
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
jtQwCcfQf1pxjXJxhMYaiUNLa7uHN6IXwWzJSEaGe2Yu9GFrjARbRU1Si5xl
WC98yqNUQLjHq2CfbLPlg0XMJDZtOo2x5XUhCpbiQ8EsbVZy7dqX1O707NRS
JfOYiTsL0yrMHLPTlLSyNlWYyAWJOPEizT68MRWK+GIyNwWNKCg1nCz3RSvK
QQ8MzxDJ+Be1Wo320s1kAhilDnaSHIiTMg0WohGni9FamRXqindkFekBTSWM
jEtrQuW1ZX/qigemDlGfYdQKYdg5VE1PB/L8MiDU4W3GkYVSHTW2i82ZZ/ST
ZW1irOmRww4F/v8y+EwdntiGJ2ewiBicmP3lZVhtLy3XajknMJlJuknbb24M
7dIXpFj2IX4smllGlhASr3plTf1KiIMj/2IPsTR4UIQaS3jWDj+vNUChwKHd
cK/thpnxgjYdQH+RUDL/uLulc2iZ6kPI57LQBG/1TyV5K3wmKSYEmVVdkXqT
SkfezN7PdhWNsEo6/QDyrrPqprYApOxr3JTqGsXzUUQkf6Bwwfz8r4vD2cHP
/y72NvINn3gnvNz3HZv++F0GCXXEidiv/vhdB76dSnplU7IdY6i52Bzu1ONX
9M3P/vcXf9Z/8YOD+OYh5nSVmw3pX/8JZ70vMKKr4V17o1hq955kKK55NR/t
9/hwQ6Yo+4mR3XMicf1h2kfiroZ17Ff7rYbVfjs8oTTfF0wQ85o/x774gflW
xlV+6MFLEJrvfoSe88K0tij2fqm+lNxdd8lE/MqIVCKM8rkRagmytO/kQXek
p5b8zzHih0fsg9xhfsgD4Jo6rQMp7sKdlJfl/+T/n/2ShnhK/+EpCN3OebRT
eTyj9Pjns5PXk4vDo0KvPih8NeFdcfr2wcufFb2yv+88/jl/aKQQslI9um32
4G0vJnTrCf3+Y1N2QikPGiX5KDPONWU0WZZNqYkXVLLpW93p0148nZz85SR/
Wn7NyaundM0hrjn+wn1RoNsWfyKjldaXlVN+/Wu+/gTXn/m30nq66suqbOBv
uNsgdtrcLOZ6wA8nFnjW54BFhUn3e6IIuiPenCGwFNkVYCadsHUBxYpqGEsm
MVNiEjW+4801rbLGzB2flfVDTU0aBB5/8e68eDo5u7jgFsW0Tq9evHj57Vtx
rtCAZ9Pn+7YTAuN2ul9IoaOUi1Z5bC+BURSlVUqNkyFHMzL7jLdR0jZgAsxa
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
kwnwR+G/6gGUBjHJAQA=

-->

</rfc>

