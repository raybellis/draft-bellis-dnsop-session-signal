<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular DSO message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO message is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO</t>
</list></t>

<t>session.  Either a client or server can be a responder.</t>

<t><list style="hanging">
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operation:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">
<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
(defined below), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a compliant DSO implementation.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE.
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one, the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value.</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of response codes not defined here, then that document MUST specify the specific
interpretation of those RCODE values in the context of that new DSO TLV.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with the Primary
TLV DSO-TYPE the same as the Primary TLV from the corresponding DSO
request message or it may contain zero or more Additional TLVs only.
The MESSAGE ID field in the DNS message header is sufficient to
identify the DSO request message to which this response message
relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV - the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI.
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
cannot contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>A DSO message can’t contain a TSIG record, because a TSIG record
is included in the additional section of the message, which would
mean that ARCOUNT would be greater than zero.   DSO messages are
required to have an ARCOUNT of zero.  Therefore, if use of signatures
with DSO messages becomes necessary in the future, a new DSO TLV
would have to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with QR=0
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unidirectional message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message(QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Long-lived operations, if successful, will remain active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t>[No it doesn’t. RFC7766 has no section 3.3.]</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for the Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a DSO response to the first DSO request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="operational-considerations-for-middlebox" title="Operational Considerations for Middlebox">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
a configuration in which DSO traffic is mis-handled.   The simplest way to
avoid such problems is to avoid using middleboxes.   When this is not possible,
middleboxes should be evaluated to make sure that they behave correctly.</t>

<t>Correct behavior for middleboxes consists of one of:</t>

<t><list style="symbols">
  <t>The middlebox does not forward DSO messages, and responds to DSO messages
with a response code other than NOERROR or DSOTYPENI.</t>
  <t>The middlebox acts as a DSO server and follows this specification in
establishing connections.</t>
  <t>There is a 1:1 correspondence between incoming and outgoing connections,
such that when a connection is established to the middlebox, it is guaranteed
that exactly one corresponding connection will be established from the middlebox
to some DNS resolver, and all incoming messages will be forwarded without
modification or reordering.   An example of this would be a NAT forwarder or
TCP connection optimizer (e.g. for a high-latency connection such as a
geosynchronous satellite link).</t>
</list></t>

<t>Middleboxes that do not meet one of the above criteria are very likely to
fail in unexpected and difficult-to-diagnose ways.   For example, a DNS
load balancer might unbundle DNS messages from the incoming TCP stream and
forward each message from the stream to a different DNS server.   If such
a load balancer is in use, and the DNS servers it points implement DSO and
are configured to enable DSO, DSO session establishment will succeed, but
no coherent session will exist between the client and the server.   If such
a load balancer is pointed at a DNS server that does not implement DSO or
is configured not to allow DSO, no such problem will exist, but such a
configuration risks unexpected failure if new server software is installed
which does implement DSO.</t>

<t>It is of course possible to implement a middlebox that properly supports DSO.
It is even possible to implement one that implements DSO with long-lived operations.
This can be done either by maintaining a 1:1 correspondence between incoming
and outgoing connections, as mentioned above, or by terminating incoming
sessions at the middlebox, but maintaining state in the middlebox about any
long-lived that are requested.   Specifying this in detail is beyond the scope
of this document.</t>

</section>
<section anchor="tcp-delayed-acknowledgement-considerations" title="TCP Delayed Acknowledgement Considerations">

<t>Because DSO Unidirectional messages do not elicit a response from the receiver, they will
trigger the TCP stack to use the TCP Delayed Acknowledgment algorithm <xref target="NagleDA"/>, which
will create inappropriate delays in message flow on the TCP connection.</t>

<t>At the time that this document is being prepared for publication, it is known that at least one
TCP implementation provides the ability for the recipient of a TCP message to signal that it is not
going to send a response, and hence Nagle’s algorithm need not be used.  Implementations on
operating systems where this feature is available SHOULD make use of it.</t>

<t>With most TCP implementations, for DSO requests that generate a
response, the TCP data acknowledgement (generated because data has
been received by TCP), the TCP window update (generated because TCP
has delivered that data to the receiving software), and the DSO
response (generated by the receiving application-layer software
itself) are all combined into a single IP packet.  Combining these
three elements into a single IP packet can give a significant
improvement in network efficiency, assuming that the DSO response is
sent before the TCP Delayed Acknowledgement timer goes off.</t>

<t>For DSO requests that do not generate a response, if the TCP
implementation receives no signal from the recipient indicating that no
response will be forthcoming, it can only wait fruitlessly for the
response that isn’t coming, until the Delayed
ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds).   Only then
does it send the TCP ACK and window update.</t>

<t>In conjunction with
Nagle’s Algorithm at the sender, this can delay the sender’s
transmission of its next (non-full-sized) TCP segment, while the
sender is waiting for its previous (non-full-sized) TCP segment to be
acknowledged, which won’t happen until the Delayed ACK timer fires.</t>

<t>Nagle’s Algorithm exists to combine multiple small application writes
into more-efficient large TCP segments, to guard against wasteful use
of the network by applications that would otherwise transmit a stream
of small TCP segments, but in this case Nagle’s Algorithm (created to
improve network efficiency) can interact badly with TCP’s Delayed ACK
feature (also created to improve network efficiency) <xref target="NagleDA"/> with
the result of delaying some messages by up to 200 milliseconds.</t>

<t>It is possible with many TCP implementations either to disable Nagle’s algorithm, or to disable
delayed acknowledgment, or both.  Unfortunately, this affects every message sent over the
connection, not just those connections for which this help is needed.  It may give the
implementor the impression that their software is going faster, but on a heavily-used network,
or a low-bandwidth or high-latency network, the result can be a significant degradation in
overall network performance.</t>

<t>For this reason, we do not recommend either of these strategies, and instead recommend that
implementations take advantage of the capability to signal that no response will be sent, where
that capability is present.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC7413;
&RFC8446;
&RFC1122;


    </references>



  </back>

<!-- ##markdown-source:
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
BRVu4AHY45bVPw4utEfaitVzYlqezA4N8VtgTcH1NkYbwv2iDVwARIn1xPMr
PqgF6UwS4SC7LxkDFc66VU9NHc1osR0tuHfdaweF1/vI3py+WZfN9pfbFiO7
9ktsC831cZAxBLNtxpfkVvVV0aGB0VGKPouGvXH+SUiy58dP5iAd45frlqpS
7oobNL1yQrRWeefbmB2mYZ38qtmgT2JiFCTOEeNRYfgTQgHP3gLRqT5Co5cj
2YabyvygifmB7uaqtYC2yH+4YDiJLkQEf4czOB45l9XknQmzX2fzvY8Hx22+
35gH0+KO+9hpu+uqUkttRDEfHuSomO+ixi7FXJyA+E29xJqGQUA7aEQ7S1Xx
3YIb9n4zLxLdXLVyOACkiKN0XMGltcKyLy4MqrXfiFPONRXbkhiK1D+3I9Mj
emcx12pZVDfdrfmfD4fQLsNb80hwDsi81/Tc/RkhwZUwxsZzvo9DLP9v3Y0i
OVKYb+xRoiL9041ss0Ufuzbt92ixX00sFO12XsOFS2EAZHMfJOe2KQJhC5/z
0MutTVbeY4V6QbtXaUqs7H1BTmp/tWb+ap2QE7ZcrdlzJ3wXxrKgdKMTi3FI
82Hx6AkoFnAjzgeLdGvj3nxYRETpCJiOTnkMFRb12BYBq3L2BRNGy8DoI0Xm
yf1ilUzrvLud0P7bUvnsja4UNt86GA2N5JG8EjRUYPoqPo3RFvmaDFZpWl9U
r8umrrgJpXlOGauCGhq+xjeevXz9GQapKUYrMGJfHX/57h2pIzF70VIkjaqs
GNtv0eldLkQXplH1FfrE1bKe/zQJgh2mvXVzdY2Vvd68u0lL4tOqO2kXJVwr
dB7NefvWZL9s6Pnpkxfff3/6/OnpU38dWX259JWWM0rGA9ZojMg7OHiPH6A4
23SF4smMPCZYYq0kZatDmUTOckt+aCkVv455mnrVJwrBrlu/i/ld0um8Dx09
1I7tdJJIStRiroyrrfjz7PQSLThkC47sfYtUfyLmxMsGheg8bmo4MPWUQUGt
FB7E6lQE7QFD6YEgdmo6IlwYQPnDDNYKO/CZUlgyiz9/9OVDwr5jGLjPvyA/
VjT6SGSzk2jvvYjfWmJmYb4jqT2LPDDLetU6h2lxPiZFVLCtsF745Gi3XoKw
Sg+AXzQvkO/iIEC+VOOGSBuxsVDnU1rXVNVAebMC10nQRpQFE1GNKJa1J8s1
O6F8dzF0sSFugQ1u4uKkRJeb96DRQfyBlbhJrsHrwqJ9eDaxazM18uyamnSA
HGZI1dlwpa8Zdk+8DbY6j5JI4z0k4kwCjVpU3GhVI3NpzBWf/yuQXCpfRkvT
w7dyl6jyitIH7rG0KlrxYxi1eYebVf12H+S02+exE6m6k1VidKGjWhlxtXhD
oYe2MbRNBDiflf5dbwqjb8r2Q4b4IOGH4IWc7D0bv9ZbJH4/u1RBO9lxk/Yd
RJxzalg2Q1/ie8f8Za6j8aFEqVkJ1Nvf25M0lpP79/IkXfCBiWW6tpRYAJ2k
18WSwCWnSSxAm6c809HK2MzXDYKRnxT7vjsKMX2GyqLr+Ty3gH9TRLgG6uIk
ieRWzZUgKaelji1nhyefJYMkFX696gUCpVSMT23ZSnwGL1sUjGM9cBVEVSE6
BsznbRkDOAeGits3EVm14vmi8MXbEl0FGJxIHhJ8dM5+FgDyJcH34EO59GTR
BHwttqQqeUF2dNvlZuXStAS4T0QM6kebFgMvr0G3xwuUVayWtiuSOllZrKpb
FejBKdsVq2cLAuJsaw6VVghrvfRRSSVnLzLqBdLH1nZaOtDM0nK3nySiN1bW
Xzm3fVInYcgAmGCFB9p+xe3eBHaAemHExe0MYEsAa5FiSc5iLITNwJzCj+la
eTtYD7TCIMlbRGvKl0KjdbAUZCJQybCcrF6Zwep/1pbdRjbdWmEnxy0es9Gg
9NchfEKOaPkJ9avVpEXt/AP7S5Gx5dbl2lJbv7YrVoHS6jecoUWBSQbF6HKq
tZ/d5w2uOj0i7Sy34VDdcIuNqA5XG7ltmCEwftjk7e2EiK46/Z7ZWoFVnmEJ
3vnF5VF/hqUEAhlcNnfn0kJrZBYUFW5WIPidhcCWIJK2zBUnQv1e48i2Xg/E
gynI1q3EJVJhfbfZMEW/+J37dcfxMjdeWpKOIE2Ye5Au4hrx2jC3Crdps2YP
OTllo2HEOBoh/SEqpxgnW9UL0ZJEd+kNHixb66eSbxmOVytfjNFFQWpZb8Bo
gb4tZ5WacDNZULtQqW1gP5C3KqitKB5yMKturD2U6SXe/RpG1QqGPPExQQ10
q5AUUYCalxYmkdsselwZGEEVt3EZMox4hrGI51hiQr+C891RnyBc1Z3DIEBE
SrVirFzi5CW3yTKvAMdF20xbkryOkEtSMR+vVb1qE1CpkfNEdoplVCIjWPch
MnaJm/FuFAfuQKHxECiKuf32I0ZASeChhjCYPR2E7s421UBynx5K9T9sly3q
TBvAb3G73o8nFrE0KPl2UUr2Mfvmf+KguoDN1Ym6sioRRJW6eKwEVQb/H247
IxFS7ZFyv3SFljMlM/BmwyRbi0gmvUpyN/olLJexOQFK19e1ztfGZGtkjdc3
9/pKPfeKWhERsth5wWsi38D7UZfYqqsS3y/BBQRJEiHjpQeLUysiH1cx9qx2
39wqqi+sUXDTDR3Az4i7s5kS4LvrmVdbtSXGM5B0IWq63juWCwVyYXyE/TQY
pK5F2xosIkXhiqb/ECu0V0d/8qesgZXUK2xoSOeE6+JJT3BaA5+OFXcid0/l
XLJPbhaQj/OfFHSG2ACxj9rIMlhkFrem7TUtjPxJ0GbzgtI2RMZPesKjNXRB
Gjne6WMgSOQC4jsWTon3DlEcm0qpzEmpDI170EPFpuNaUNGFuhF5BW3oz58V
MEQoIKluwKwJQNia0ZBH59xHCRuEZCmxv0JT21hc38/IBhysiUk88ab1uTvv
Tx29B1/6S1pOvGHbKUaEv7TiTZm+WJpfJwJP0EEDPb/oz3SYMcNLHExovyeF
vCdjC7NDdmUgInwl52bpnyVAg+Y1GifTiN/HzAl/rj+4v9sLV+YW4bHg8nNp
8++C1k2hPM4JNExhiyS7jpqH8jLH1yBGvJh8vsLQgD7R+72ka4qYWP1IdTR+
mBDpbSo9dzAClDcNWa2Jd4d3GpW0McqGBPlmNsAK6bX6YtUXjJt6xWVcWiSZ
tGpQ/S+w2EthayxuvIp4KHtPctCF0OraNJE+SbEjIlg4VVxpEkfXqSI6hEMn
0r4ohqtqdI1ITYqxazF3n1SM0DacpDZnNKylddL2YIaRDrPsYiP9wWn3YyV3
LCELigdI7n57AG8QBKlm3DBuocS1BW0vv8bn7fEVhCqgy17GzEezdzFCkIAz
D5OswwhmVWbmo6vVV+7xSESp24UxvMJOEK/W2eLU/eGIs2VTb44H8cL7keE8
U8AdjDrCiWtBc3JaErIe/2S3qtC/E/C+t25q/WaC/mpWvS0KmiB3HV/VMZ04
xQM8S4O6aDk6Muh1aYFeB/JJLEK+N/wONrfXp30Yke8Z3KPsku8iNftms2qz
uioazT6I1WKsgYTDYnYzm5gPjl0DpPeqfXqU9cS3ImHc5Sz06OLAwjHcVI1M
XC9rLt0DLR7UkLwq2LOG56L1gEmk28X0hf5+huh8piQ4vZNA/KEZukCkaG7D
LDvPPkE040jrIwOgLTaLOv6b3J5MKwq5oYFthKjm7DpXdYu0G1a/r7bkou3g
21s1BSmeZlhPqhq+VqVgkm0RI403ZI39DYSwqWFBNrgE7JRBY7zuyIq3SHie
+1+i7Sf/fBcRyHq+RXa2JWa2haTS87YXa5O8tTutP+drolAfevzdlX7k9TvZ
+067ishjk+DRftBrwNf4vFDvQ14xXmu7KalpysiD2MivZgwJ7iGM6ogCWpEy
k6jAik2CKvBwsL5OineDghFr2+0FsyrVmdqLJgr3tcMEQFD1J7LTLifeiyCz
WtjZC6/4xltHjHcpTJ39BRGNFIrLzBcN3ZTq+kiPER/7FE8+SMvDWKLSpwq/
mRy8cN4kVVsf4kIdAgfwzkFJfSXMe1kulwPzyQJhBfNfFq6UWS0MQT3xY90B
5dEZfJaABmmSBnlHGQ2IBKAjBHGRni9Q8EKf5NHAEV2MrKhV0er6NNnSgeIO
yGN1ynesgEb1MI5f0BHUW3mUyqVmEi6KKWZOcOScWt966dkN9lw4WuGuOEzr
gqMcWDu+d2DtzCozIyJqTfNsNvN0gTD1LRZSb12REh9EG1CyNom+9iEfNIKR
UHD3HgBO7BAqedK+6X3emeHBngnUeQYEJdYMw52T/tXKF3iPjPEEGeuUptFp
Q9sYYGuKq7pGPtX5U2cSMgApYQZvPMpguiuWy3GWE3lhNNFEU0UACR6a4H6k
MuRjPPhBKTYk2IBUwwi2IEF+RHDITnzqjfOM74QiOyFz7u1HeEkU/m7i3IN4
cyE67gDcP+mHlohfMXJXefPT+BWRSZMNh24M1yC3zIhC/ORPwZFcley4Hxsu
1Z6wS3irE2apYmpKGL12JKJD18xuUlXZK4zsLHOKaz2JBHkKZgEQboHWgadb
7Mdl5+/apYfg1IyO0ZWbGtTfYCmdIYF5uqo2h7mcCTC4Dy7eCdtJxhHpPtbL
jHM7aEbqlYVLAREtU9qLK1mtPo3WCiLRXU3+cUSYoSTuK7LOyjnFnnusQwdu
TbCdoLkhwdZ9/eYbgoeuExbCJFLhn2h0s++lxzSyfS+b+kqrT3+EdWmbpwt+
Gjerhc2qr7Be/gXx4MCqwhf2GXucVf1cPYyncie+eYhTry/kYniyL0hlhQlI
LfEC9uEk5g1K/jTcDBFdrqJUOXiOu1T3j2VIyvGawvGC6MEafxN3PIq7j3mN
3lJCHwGSawk2hhlI9fJ1jAQzYiVOxq5gGIc/Lao5Qn8VpJxYfOGKDHYwK+am
ifJlGGtya13gwAcRHDI0cVshQXSKY/FEbSevyzcC+Yk6D4J0sccggOa72RlZ
+Cj7Fk8c9SffA/PeT0pIusJ0twjJe3Wfcb4OllMz8To8eyiGzao5bybNw3GF
V1Jz1QMb1V5a2Jkqwl/DCdYeuHDLv7RcadBWYj6n3dC+LqGPxopX7Zzyq9E0
m3APNu5ug3FM/EmvPsa3+YoFFljfaMZ/2WmjPkocpSgStlRGDj6o6mm9Poge
LR4tuFozfCGbcVbLyLCflylLufBhYe3DrWayhwyaGtbEkQ6FO+KPmWtOrWEL
aUu43PE1X2ISBcGdenpyeTJSAsIZVxndwlRN9nUI2Z7/jkf+7+HI/z3KHtk4
D+iZR9ln2efZ4+yL7Mvsqw/5TMf5p+mv/D8d6OfBqs6enzy5PPvh7PJP2eXZ
96cvXl1mh48eUmfDoyENfv47zOgPp6cvT747++EU5nZ5ev7DyXd/pxmFIS2+
Dl/vQqu1QkdJ5UtcsrFNH+GAgbmBrRw3FSZKkrDvihsKDlemMhxelZi0uyjz
6giEeifg0vTMpioF0siZLBG4St00VI3ViZ+9b7mnJdw7ABZmYcdqRXLEev3a
J6193HJ4geRpCuxgxuAAqGUHoq1YI2mBOGUhaOHHPfMj+q6C94WHhnynuz+S
dPsPtvs2L9v+PNl8y3NJUlvCGCavb0LWkY9+Bwl84Gx3uvUoK/ism1UuntPx
rJuwnxs+dJdZv6P3ihJIYUx4/Y466rgc4qigP+Meyl0/0y6dQ0zbcuACdRNi
/eeH0ILmcwdjbB12AG5OWlnQgxEdTXhug9R4Wqgr4uUObsiol8IHgh66p1B3
d53u5W3SBSNa4EBHLQ3fMV9LQ4gVivVyh34yLFlWpbaHkUewGXyAg5CtQoO4
mnpvW1wF/h60fCxoau19g1FFLbooYlvcka3kVkbiV3KQjLF+SV77TRCYRf/M
7vmVrWqkhO9uXgKsEWFnSTJ8WfAx3TtLamnQifo5urcGz5VrC29DZqN8VvQ2
4chYySasNnhbuHNA0Zi3Qe2byk4q20YqVuPmCusiUwab2UhuTDT5eqwrC5ZN
DT1Nmt9E3Tq55xln4Qx/L9ckR6if1f1QhGRiu51UUM0uWzFMJAzRNBhECGjK
dreWuEXSlfqC7oLMFghL2I5iGYMaVoK9p14/Qkvu3mLt99hKWUWeOKnSYfvd
IAUNj3/LMJSj3RYldqadYmJrlp05GOPlHDJObxBSLN7TzPcXZmhcvpcEYrol
/PBxO5CeXKLZy0ry9aRWhmIlujFtXuF3fd1HYnCRC9eRcW8p1t71cPB50EVE
OjUNVEPYeLN5m3rFm8DlPUBlkKnmABnJGNkRg4pcv6oXBbb1ES0BR/n9k5fm
oPMSwmq/NKNFkyEC1kwybAKRnPPNaJya79LPj6Vk8uHxo4fYR30k1A8KAjbJ
WZHok3wBjgVgP0M6j3e3UqDpXsbwuhtKdKZ6WQo//ZhAzpNzhI80l6JQ5JVi
6rFz3949Iyd4nPCIdznpFKi/xretm+IaDgrQWHaRgmg4d9kFwWO5XhZvpGhj
YuKyvPbtQQXvowdVQWRAV1qaMuTIO6ea6XzNE0qa+VwVHeeI9YArKfdzZp7J
XlDYg2wfDnosHYVdwkXi7L1cMfV39WSkJ/WO4dg4CyYb9/TtHW+SRhK7FmSy
y95h8VlOg/LLQX3l6BTvWTbZl3g7hfl95LBfwq+SwzsaIPeSL3+deIZ3UI4T
nd+RAsvYIC6My2UNvMisxmVjmvaFRZg6Pt+lvg0uVa7opFD2LPOI5G0wM0hv
tn44s6a/n710uLG+SwQH8MdXZ+enTzVlasOFVkCKkHOapIzDHlFKro6aAAYy
pHXqe/iJiOOSKLDYKp2Mt0jzxYJL31jrjfIindPJwkD6YYSZD/mTNaeolALH
mUfhMr6Toe6sUVG/3/R91ueCf6xSa88eEKY+f76/WeNsjoEqqWzr1YtQRYRl
c6Wow5p7kBJX/caIxE7ZBQkz/niLZUTWe24EFz9owENHgTP8F3GX+9ZJUnOq
HmOOHgdJBdwJui+z3zMCcacUf1pvKEuaOP58Kjdqv9PIqD+MRhvxGEjSLFpg
sBcosnyyo8VsKquf9sg2fFlqEny0sDXa0EpD2ygPrK/u4LIa6ceuBlKm6Qk+
ccGlBA9RlJ5onna1ILdFfR0zTHccg57y4i4NfySQN9+jd/rUKzfK/W6uRMW5
zSVzPLxn8ruKO8kXONLfLIjWG6N46cnp3zXIJKQ/XSl+hmBMkWvTGp9lMea8
liqrXbdHXKRLGMbuptc8YP/q6KNljvpx8EO/5TwXoZzBOLdgg2ImuFxVfAVT
30ZlElXzlBXTbq69jaM7hb0OfCWH0bm5Riq9yQ88tAPvNlb4jzn7XD5Nrwug
lJluJSNFMlWC5uLpwtSCH0M+G2ZtlwNstsC4jdrCWZrqjWzVWN+BfbsVbLcs
z2zFKfJX3bKwznm8SRwxHLwpxJZJ3EgFkWjNzz2dTinHbpCZZJQM1BRB06fI
eSqOVw0ow71AWcLOfZMPd+9DWCtlK/VxBM9f464OPuk4SckgQFQX8RsvEVqH
59pzNaU7zNXDluwNosSwDnd6ZSOD7kZOH5Mw8qExXOLWEdUlCRL1OnjSjzeV
75RhxPiG0YwUu0AU2bSZpN9WgwXcvY/hk0wjAxI+GXT2GYGJ77hj7S7uH5b+
MVoIHSbDtqswb9KKOXa8lvsmxLWOdrzoGSk0g2HDh+TIj2pgH0ALuNM5neMe
pOgxoyZxBAu5XXMROWspad8fH8vgXiasPlUCZ+XX/R6U6F+871pqJOG8iPT+
wesOOhQlsSTr7zcOkoXzmh0MxN9zwdHZG9Gx38v20UeUVP5FR3ME0cT250NJ
5X8Gj95olutVMZJb11OMjn41nUQx5jw3TUxT/DYGxWzHDqzDnA531EHxFruV
YlitfJ04/PgeH69JdKHpIEmoqWegbrhOfJj3X3beR6VJa/2X5xFvB84vvc31
dsIUfTjY2I0yuFbyY/t9Tyz0wKmXS4M5KLAjWDdfT6PecwqW1IPshfQQ+wif
eNDPevqwSyjJisJz15arEgM/FKrq1G/93rkILN3DL9+9m2UnUkfyqR7NvJTs
eMkdZE4yy19ru4ZvCclb8JZCJauKVXz5SO2IiU0HyOdAIWMzWq4ZwZ9aJWgC
Mh3UGu3XdL+XHuYTCtLWvpplIw5Ny9JzM+VqZi5zkbTKuhkLorjmkrUGFZK4
lfTUQeWqDe+ftMDr7/LuqQFmyAfvo8GIGzDscwMG4v+knB9zVakOn1m7/21k
3odHvTQ57OPnPFeHqavlKPO9Jbp6qigOzm7d53LKRjrb7cpd60/6/89ew//O
Ty/P/5Q9Pf3u5E/7EsV+41wx91ZMEzpxdXJ/nwQghjA3rCe+HckbUjvkCE4F
ptPoQLjIOMUv+nVghiUwC+cKVyoeNmNCR24pXoILE6+8iuEuGIvlnV1DKc/G
3FN3qHxomeRdzOx3QeYwwv86HM7Mn9Ky2htI0aIehVDVAxx2FfZEvSFJCyDo
Uiv7czAHoi/3SlxiZxutnEsQgXx7KTT3Me0XSypi0Dd5ORLx7rYm2NERBWxo
jITd1kiyc2T+MqxJqdjifDvcgoqKeMwG+mIVNZgvDjZyuSYYc5fjkxRSEMrY
8xen5+cvzp2fIM8aUC6wEh7xw3rQYTP4ybMX59/Dj/pFT86/yO5OqtOosaXk
glrqKKRRbDppiRga6sThL07Pf3h2cvbdsKiqj13EsH2K7KVNEsGQus03bac8
kWIaMZzRJ3Bynr26OH265yWjpegu6IQOImIY8drfoYdBNHXJ+vEgiqpOOqe4
RqSi55xzdjA+7nyHXHhniURj/o0Z7eTlyavL33/oiv4xFxQUG6B0qYoEJhAj
+aYdUbl/RpA4Be17OLxOQY5RqRrp/yvB7AiU4Mji0NqkTa1aqPmcMvqqm/Fh
g+Uz4CQ8jGadmJ+YFsS9g/HMM2SBwkFqLMEur9iMoy0SkKNRfcQE64Xgfmuo
auQhAx8gcOFKZ2np/S5Sor1ME1BEqkvj/LIBgBG7ZP10CZLJI0rBro1NihIW
rAiSJSiy0Br7RePFwJswviBBrtr6N7M4jwEnSUM0C1fB2EZxZGJKziQFZElr
u3uiVj030q8JbRBLbJJT+5Jr6LZqBLvKSeZKwc/AilByV3oUQVxM2Hv6UHeO
fMvZbiRnTWiu62U532aHIg6P+PaiffvAoeNx5qF9dbh/kCKmA/SODtOS5CAf
iiQ7ogwpWm+METokLarZxiaUgnZhBY89FLBaWPCf9a473HPBHQ3Q1wXXlRN4
3cis1oxh9mgiKawQ8RwmzmGd/L51kIoxUI85yb5sVtJq8UhwL/PsrimVozBM
e8OwkbHbcLjdrNDNATrWtqUcA2wCoopHiuoRs6KJIX9nE9LDt6BiNAGWxJ+U
TazQH0CGJCfusqeh9vQXMA+Xaec8uHLI9Wl1+QFbbo6AFzB8tLM4vcLsS2Gl
U3wS1V3UFnvG6OuHr4yEwFaLkQkMEK5KrJSqUtnso4cfxoLj8Fij6jhb9rvV
a8ZpcBk/Kk5dqpJuDUyK8VWVlcd0WQcwb+hEwbU17j3jF9LzycRMrT0ZpZbC
ZHmDiW3Rjlnjk79NZul7jKgdXoVB2DAfS7hl3uQ61pZli2Zr9VlPyL4QOQiC
b0hpnJnYKbFRbQJBNEBA5STAEQt2rP43tWKz/CYv1VWyw6Da84LMvYDsnqCm
Fms9vA5Gt/Kms9h0u40x9j4NC03FCbXmf4kbasdj0Rv1iL1RCjZiLqnKbzje
NjsTmuiw0u/dbXXn42WXhlYDu4iV1HjxFTazoHfA5XcXuzxTfvK0STIFSQnL
A4Jl0pulp9Q1ogL5eC1WXUS3ieiBGbWNm353+vx3l79H5f9BBvQuqO0QLCjp
C/MZeU3ITSI0zg5J9GudzwqLp1HQ7XOT7fCdjfyJwzyQjx7Cn0fw5zP48zn8
eQx/voA/X8Kfr3Y9F11S0+mv+qMDffrBy0v/+3THQC9Pnj49e/67bDrNfjg5
Pzv59rvT7Pmr7789Pc9ePMu+/dPl6cX9BvrlM/r1NAonPmtBuRd9zYcPjoyL
LRLxPygS8ejBu3ckA5UEzGgiQOKt9uDNgwezLHvRuV5vkiyM53YSEgsRfTOk
Ytol00iKhrRZiergmpIZQ8xy0DqZzdVfBJsDu/82IotEd4knGJT+ZOZ4H1gh
p17NbN3EHCYzbTSrYIbbsE9qiYEigPIL59kevX0mDptQsu1mv3x/yl13XBlX
YPjC4wuwIqYizaglClH9vSxt9xDaFcQa56kokpLFiuWiIC/GlfYT+rhVC6kS
miIJg2kQ+QrXt5auUWJ7GjAX303dds2Y0DwVlJ0LUEp0cxFgpdBJU1+os+nT
WVl019MFth8rpjLxKVtr7M7NLjYr0oKwnyHhf/ZhG1p6oPwrJayuGL32Dm6W
2y1luvFvpFmF4ifnNHGDVUbSa+UG36V/PEefPgN3mkppCcvnst/fW5EDDCI/
gZk9MAXMqaNkLVXSytvG0e0eH+j4vgO9SlXiD5yXjIVcxABv1PghK5fLDaba
dSQwUJuBE38lXlWujlyCycU37i3naXATQ0OvLhYjISIUi3v+2/n1Pw1G0uCM
Ww5pku5r95XqmUlQ5n0vve+c4F1/PP/nB/SXESNFYeP16x4H/S3ndCx0OhNc
0mn2jEyFUzIV5Lkxbvxt50RNp0FivxL4fPj7uxGeU6/uJAI8KloRAbKQ7Ojl
JAfLSfZgSsyKvGa8FnSoonLQl6gNFm86rWrmkmPKd9BvaBQn5KlL5m4ztB2H
J3Z5PXUjdg1jBGuNgDd6r/L5T9HypQDGk+lL2DlnEk60ZDXhJ7vndsxCWoAO
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
dPgh9l7XNdO6pO+3aieDHa4BAA==

-->

</rfc>

