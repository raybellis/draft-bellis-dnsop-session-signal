<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signaled by providing a
non-zero message ID for messages that must be acknowledged (request messages) and a zero message
ID for messages that are not to be acknowledged (unidirectional messages), and is also specified in the definition
of a particular message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO data is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a request or a unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a request or unidirectional message during a DSO
session.  Either a client or server can be a responder.</t>
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operations:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">
<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="forcereconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="dropreconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are closed gracefully as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception.</t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unidirectional messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
Unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unidirectional message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
can’t contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/>, whether an outgoing message with QR=0
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unidirectional message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a request (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a request it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 3.3 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t>[No it doesn’t. RFC7766 has no section 3.3.]</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as an unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The unidirectional DSO Keepalive message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an unidirectional DSO Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unidirectional Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to request message or unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>[This whole section needs a rewrite.]</t>

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing DNS Stateful Operations messages through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session. If the middlebox does implement DSO
sessions, it MUST handle unrecognized TLVs in the same way as any other DSO implementation as described in <xref target="unrecognized"/>.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-layer
headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it applies especially
to middleboxes that do not know about DNS Stateful Operations.</t>

<t>These restrictions definitely apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more DNS-over-TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
<section anchor="tcp-delayed-acknowledgement-considerations" title="TCP Delayed Acknowledgement Considerations">

<t>[Need to put back the text explaining the problem here.]</t>

<t>Because unidirectional DSO messages do not generate an immediate response from the responder, if
there is no other traffic flowing from the responder to the initiator, this can result in a
200 ms delay before the TCP acknowledgment is sent to the initiator <xref target="NagleDA"/>.  If the
initiator has another message pending, but has not yet filled its output buffer, this can delay
the delivery of that message by more than 200 ms.  In many cases, this will make no difference.
However, implementors should be aware of this issue.  Some operating systems offer ways to
disable the 200 ms TCP acknowledgment delay; this may be useful for relatively low-traffic
sessions, or sessions with bursty traffic flows.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC7413;
&RFC8446;


    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

