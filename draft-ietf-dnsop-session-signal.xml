<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular DSO message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO message is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO</t>
</list></t>

<t>session.  Either a client or server can be a responder.</t>

<t><list style="hanging">
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operation:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">
<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
(defined below), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a compliant DSO implementation.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE.
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one, the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value.</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of response codes not defined here, then that document MUST specify the specific
interpretation of those RCODE values in the context of that new DSO TLV.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with the Primary
TLV DSO-TYPE the same as the Primary TLV from the corresponding DSO
request message or it may contain zero or more Additional TLVs only.
The MESSAGE ID field in the DNS message header is sufficient to
identify the DSO request message to which this response message
relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV - the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI.
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
cannot contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>A DSO message can’t contain a TSIG record, because a TSIG record
is included in the additional section of the message, which would
mean that ARCOUNT would be greater than zero.   DSO messages are
required to have an ARCOUNT of zero.  Therefore, if use of signatures
with DSO messages becomes necessary in the future, a new DSO TLV
would have to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with
the QR bit in the DNS header set to zero
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>Every DSO message with the QR bit in the DNS header set to zero and a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response,
with the QR bit in the DNS header set to one and the MESSAGE ID field set to the
value given in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>Every DSO message with both the QR bit in the DNS header and the MESSAGE ID field set to zero
is a DSO unidirectional message, and MUST NOT elicit a response.</t>

<section anchor="delayed-acknowledgement-management" title="Delayed Acknowledgement Management">

<t>Generally, most good TCP implementations employ a delayed acknowledgement timer
to provide more efficient use of the network and better performance.</t>

<t>With a DSO request message, the TCP implementation waits for the
application-layer client software to generate the corresponding DSO
response message, which enables the TCP implementation to send a
single combined IP packet containing the TCP acknowledgement, the
TCP window update, and the application-generated DSO response message.
This is more efficient than sending three separate IP packets.</t>

<t>With a DSO unidirectional message or DSO response message,
there is no corresponding application-generated DSO response message,
and consequently, no hint to the transport protocol about
when it should send its acknowledgement and window update.
Some networking APIs provide a mechanism that allows the
application-layer client software to signal to the
transport protocol that no response will be forthcoming
(in effect it can be thought of as a zero-length “empty” write).
Where available in the networking API being used,
the recipient of a DSO unidirectional message or DSO response message,
having parsed and interpreted the message,
SHOULD then use this mechanism provided by the networking
API to signal that no response for this message will be forthcoming,
so that the TCP implementation can go ahead and send its
acknowledgement and window update without further delay.
See <xref target="delack"/> for further discussion of why this is important.</t>

</section>
<section anchor="message-id-namespaces" title="MESSAGE ID Namespaces">

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

</section>
<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Long-lived operations, if successful, will remain active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for the Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a DSO response to the first DSO request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="operational-considerations-for-middlebox" title="Operational Considerations for Middlebox">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
a configuration in which DSO traffic is mis-handled.   The simplest way to
avoid such problems is to avoid using middleboxes.   When this is not possible,
middleboxes should be evaluated to make sure that they behave correctly.</t>

<t>Correct behavior for middleboxes consists of one of:</t>

<t><list style="symbols">
  <t>The middlebox does not forward DSO messages, and responds to DSO messages
with a response code other than NOERROR or DSOTYPENI.</t>
  <t>The middlebox acts as a DSO server and follows this specification in
establishing connections.</t>
  <t>There is a 1:1 correspondence between incoming and outgoing connections,
such that when a connection is established to the middlebox, it is guaranteed
that exactly one corresponding connection will be established from the middlebox
to some DNS resolver, and all incoming messages will be forwarded without
modification or reordering.   An example of this would be a NAT forwarder or
TCP connection optimizer (e.g. for a high-latency connection such as a
geosynchronous satellite link).</t>
</list></t>

<t>Middleboxes that do not meet one of the above criteria are very likely to
fail in unexpected and difficult-to-diagnose ways.   For example, a DNS
load balancer might unbundle DNS messages from the incoming TCP stream and
forward each message from the stream to a different DNS server.   If such
a load balancer is in use, and the DNS servers it points implement DSO and
are configured to enable DSO, DSO session establishment will succeed, but
no coherent session will exist between the client and the server.   If such
a load balancer is pointed at a DNS server that does not implement DSO or
is configured not to allow DSO, no such problem will exist, but such a
configuration risks unexpected failure if new server software is installed
which does implement DSO.</t>

<t>It is of course possible to implement a middlebox that properly supports DSO.
It is even possible to implement one that implements DSO with long-lived operations.
This can be done either by maintaining a 1:1 correspondence between incoming
and outgoing connections, as mentioned above, or by terminating incoming
sessions at the middlebox, but maintaining state in the middlebox about any
long-lived that are requested.   Specifying this in detail is beyond the scope
of this document.</t>

</section>
<section anchor="delack" title="TCP Delayed Acknowledgement Considerations">

<t>Most modern implementations of the Transmission Control Protocol (TCP) include a
feature called “Delayed Acknowledgement” <xref target="RFC1122"/>.</t>

<t>Without this feature, TCP can be very wasteful on the network.
For illustration, consider a simple example like remote login,
using a very simple TCP implementation that lacks delayed acks.
When the user types a keystroke, a data packet is sent.
When the data packet arrives at the server,
the simple TCP implementation sends an immediate acknowledgement.
Mere milliseconds later, the server process reads the one byte of keystroke data,
and consequently the simple TCP implementation sends an immediate window update.
Mere milliseconds later, the server process generates the character echo,
and sends this data back in reply.
The simple TCP implementation then sends this data packet immediately too.
In this case, this simple TCP implementation sends a burst of three packets
almost instantaneously (ack, window update, data).</t>

<t>Clearly it would be more efficient if the TCP implementation were to
combine the three separate packets into one,
and this is what the delayed ack feature enables.</t>

<t>With delayed ack, the TCP implementation waits after receiving a data packet,
typically for 200 ms, and then send its ack if
(a) more data packet(s) arrive
(b) the receiving process generates some reply data, or
(c) 200 ms elapses without either of the above occurring.</t>

<t>With delayed ack, remote login becomes much more efficient,
generating just one packet instead of three for each character echo.</t>

<t>The logic of delayed ack is that the 200 ms delay cannot do any significant harm.
If something at the other end were waiting for something, then the receiving
process should generate the reply that the thing at the end is waiting for,
and TCP will then immediately send that reply (and the ack and window update).
And if the receiving process does not in fact generate any reply for this
particular message, then by definition the thing at the other end cannot be
waiting for anything, so the 200 ms delay is harmless.</t>

<t>This assumption may be true, unless the sender is using Nagle’s algorithm,
a similar efficiency feature, created to protect the network from poorly
written client software that performs many rapid small writes in succession.
Nagle’s algorithm allows these small writes to be combined into larger,
less wasteful packets.</t>

<t>Unfortunately, Nagle’s algorithm and delayed ack,
two valuable efficiency features,
can interact badly with each other when used together <xref target="NagleDA"/>.</t>

<t>DSO request messages elicit responses; DSO unidirectional messages and DSO response messages do not.</t>

<t>For DSO request messages, which do elicit responses, Nagle’s algorithm and delayed ack work as intended.</t>

<t>For DSO messages that do not elicit responses, the delayed ack mechanism
causes the ack to be delayed by 200 ms.
The 200 ms delay on the ack can in turn cause Nagle’s algorithm to prevent the
sender from sending any more data for 200 ms until the awaited ack arrives.
On an enterprise GigE backbone with sub-millisecond round-trip times,
a 200 ms delay is enormous in comparison.</t>

<t>When this issues is raised, there are two solutions that are often offered,
neither of them ideal:</t>

<t><list style="numbers">
  <t>Disable delayed ack.
For DSO messages that elicit no response, removing delayed ack
avoids the needless 200 ms delay,
and sends back an immediate ack, which tells Nagle’s algorithm that it should
immediately grant the sender permission to send its next packet.
Unfortunately, for DSO messages that <spanx style="strong">do</spanx> elicit a response, removing delayed ack
removes the efficiency gains of combining acks with data, and the responder will
now send two or three packets instead of one.</t>
  <t>Disable Nagle’s algorithm.
When acks are delayed by the delayed ack algorithm, removing Nagle’s algorithm
prevents the sender from being blocked from sending its next small packet immediately.
Unfortunately, on a network with a higher round-trip time, removing Nagle’s algorithm
removes the efficiency gains of combining multiple small packets into fewer larger ones,
with the goal of limiting the number of small packets in flight at any one time.</t>
</list></t>

<t>For DSO messages that elicit a response, delayed ack and Nagle’s algorithm do
the right thing.</t>

<t>The problem here is that with DSO messages that elicit no response,
the TCP implementation is stuck waiting, unsure if a response is about to be
generated, or whether the TCP implementation should go ahead and send
an ack and window update.</t>

<t>The solution is networking APIs that allow the receiver to inform the
TCP implementation that a received message has been read, processed,
and no response for this message will be generated.
TCP can then stop waiting for a response that will never come,
and immediately go ahead and send an ack and window update.</t>

<t>For implementations of DSO, disabling delayed ack is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>For implementations of DSO, disabling Nagle’s algorithm is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>At the time that this document is being prepared for publication, it is known
that at least one TCP implementation provides the ability for the recipient of a
TCP message to signal that it is not going to send a response, and hence
the delayed ack mechanism can stop waiting.
Implementations on operating systems where this
feature is available SHOULD make use of it.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC7413;
&RFC8446;
&RFC1122;


    </references>



  </back>

<!-- ##markdown-source:
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
casWUiU0RRIG0yDyFa5vLV2jxPY0YC6+m7rtmjGheSooOxeglOjmIsBKoZOm
vlBn0yezsuiupwtsP1ZMZeJTttbYnZtdbFakBWE/Q8L/7MM2tPRA+VdKWF0x
eu0d3Cy3W8p0499IswrFT85p4garjKTXyg2+S/90jj59Bu40ldISls9lv3+0
IgcYRH4CM3tgCphTR8laqqSVt42j2z0+0PF9B3qVqsQfOS8ZC7mIAd6o8UNW
LpcbTLXrSGCgNgMn/kq8qlwduQSTi2/cW87T4CaGhl5dLEZCRCgW9/y38+t/
GoykwRm3HNIk3dfuK9Uzk6DMh1563znBu/50/s8P6C8jRorCxuvXPQ76W87p
WOh0Jrik0+wpmQqnZCrIc2Pc+PvOiZpOg8R+JfD58Pf3IzynXt1JBHhUtCIC
ZCHZ0ctJDpaT7MGUmBV5zXgt6FBF5aAvURss3nZa1cwlx5TvoN/QKE7IU5fM
3WZoOw5P7PJ66kbsGsYI1hoBb/Re5fPX0fKlAMbj6UvYOWcSTrRkNeEnu+d2
zEJagA7KY4aoraX1VuyV8/drNGY0u1f7ZvdqR2XRvkl+/AyTsqPxWZ7ALFNr
ZWKGA1orWsAxfq3v3fjxxdBrz3HrxkpSJoni0p+ylHQJL0T3RDgcVHnIaw+A
Sw5iYOqee+3y412lzlGIngg1DWPbAnmeVbDOMhf7D/bCo2ym0+yYMCeeMP2N
+W9AG4vpEJE+mkQCOM54twOhxK48wefijmLq31qv67bsipje8V34aBE2jIff
S4QJuXVrDJPrs+zi14iwwSz+ViLs4jeIsB2T/BuIsIu/vQjrL4Ze+7uJMEVC
HhxTee3Bxf+nRNjF7ynC/iFp81tF2P+J/6X6+25Vcs836RC/kFpE2gdd7nTV
0rXyC0kbOtR0ZoiDabd+Ccnwv24Wv1Ae6gllDaL6/O+pXfLvNr/0327mv88s
yBXOnvDxRDV89Y5Z/PvvNgt1RmS9dLl/T961+5vfYxaezVxk0/cJAON+s6pa
c3yw3YE3aUxVQKe/1HTz1+bvzTOMCGB5swtB8glhzBhOBKklN1K94L4DN4fl
3NMwsThOG109lsYseOvi4XA9v1gLiEcY44TiCCeLh1wnTho9lrR8Bb6UNmcY
QzyrNMfh3ScSV9SwYgsW2s+FJThjUtUIbjHmJF3zjWGYpFrZQ4U4t3WrfUIx
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

-->

</rfc>

