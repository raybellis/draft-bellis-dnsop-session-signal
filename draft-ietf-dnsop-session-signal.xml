<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular DSO message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO message is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO</t>
</list></t>

<t>session.  Either a client or server can be a responder.</t>

<t><list style="hanging">
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operation:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">

<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
(defined below), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a compliant DSO implementation.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE.
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one, the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value.</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of response codes not defined here, then that document MUST specify the specific
interpretation of those RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with the Primary
TLV DSO-TYPE the same as the Primary TLV from the corresponding DSO
request message or it may contain zero or more Additional TLVs only.
The MESSAGE ID field in the DNS message header is sufficient to
identify the DSO request message to which this response message
relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV - the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI.
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
cannot contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>A DSO message can’t contain a TSIG record, because a TSIG record
is included in the additional section of the message, which would
mean that ARCOUNT would be greater than zero.   DSO messages are
required to have an ARCOUNT of zero.  Therefore, if use of signatures
with DSO messages becomes necessary in the future, a new DSO TLV
would have to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with
the QR bit in the DNS header set to zero
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>Every DSO message with the QR bit in the DNS header set to zero and a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response,
with the QR bit in the DNS header set to one and the MESSAGE ID field set to the
value given in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>Every DSO message with both the QR bit in the DNS header and the MESSAGE ID field set to zero
is a DSO unidirectional message, and MUST NOT elicit a response.</t>

<t><vspace blankLines='999' /></t>

<section anchor="delayed-acknowledgement-management" title="Delayed Acknowledgement Management">

<t>Generally, most good TCP implementations employ a delayed acknowledgement timer
to provide more efficient use of the network and better performance.</t>

<t>With a DSO request message, the TCP implementation waits for the
application-layer client software to generate the corresponding DSO
response message, which enables the TCP implementation to send a
single combined IP packet containing the TCP acknowledgement, the
TCP window update, and the application-generated DSO response message.
This is more efficient than sending three separate IP packets.</t>

<t>With a DSO unidirectional message or DSO response message,
there is no corresponding application-generated DSO response message,
and consequently, no hint to the transport protocol about
when it should send its acknowledgement and window update.
Some networking APIs provide a mechanism that allows the
application-layer client software to signal to the
transport protocol that no response will be forthcoming
(in effect it can be thought of as a zero-length “empty” write).
Where available in the networking API being used,
the recipient of a DSO unidirectional message or DSO response message,
having parsed and interpreted the message,
SHOULD then use this mechanism provided by the networking
API to signal that no response for this message will be forthcoming,
so that the TCP implementation can go ahead and send its
acknowledgement and window update without further delay.
See <xref target="delack"/> for further discussion of why this is important.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="message-id-namespaces" title="MESSAGE ID Namespaces">

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

</section>
<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Long-lived operations, if successful, will remain active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relationship to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for the Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a DSO response to the first DSO request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="operational-considerations-for-middlebox" title="Operational Considerations for Middlebox">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
a configuration in which DSO traffic is mis-handled.   The simplest way to
avoid such problems is to avoid using middleboxes.   When this is not possible,
middleboxes should be evaluated to make sure that they behave correctly.</t>

<t>Correct behavior for middleboxes consists of one of:</t>

<t><list style="symbols">
  <t>The middlebox does not forward DSO messages, and responds to DSO messages
with a response code other than NOERROR or DSOTYPENI.</t>
  <t>The middlebox acts as a DSO server and follows this specification in
establishing connections.</t>
  <t>There is a 1:1 correspondence between incoming and outgoing connections,
such that when a connection is established to the middlebox, it is guaranteed
that exactly one corresponding connection will be established from the middlebox
to some DNS resolver, and all incoming messages will be forwarded without
modification or reordering.   An example of this would be a NAT forwarder or
TCP connection optimizer (e.g. for a high-latency connection such as a
geosynchronous satellite link).</t>
</list></t>

<t>Middleboxes that do not meet one of the above criteria are very likely to
fail in unexpected and difficult-to-diagnose ways.   For example, a DNS
load balancer might unbundle DNS messages from the incoming TCP stream and
forward each message from the stream to a different DNS server.   If such
a load balancer is in use, and the DNS servers it points implement DSO and
are configured to enable DSO, DSO session establishment will succeed, but
no coherent session will exist between the client and the server.   If such
a load balancer is pointed at a DNS server that does not implement DSO or
is configured not to allow DSO, no such problem will exist, but such a
configuration risks unexpected failure if new server software is installed
which does implement DSO.</t>

<t>It is of course possible to implement a middlebox that properly supports DSO.
It is even possible to implement one that implements DSO with long-lived operations.
This can be done either by maintaining a 1:1 correspondence between incoming
and outgoing connections, as mentioned above, or by terminating incoming
sessions at the middlebox, but maintaining state in the middlebox about any
long-lived that are requested.   Specifying this in detail is beyond the scope
of this document.</t>

</section>
<section anchor="delack" title="TCP Delayed Acknowledgement Considerations">

<t>Most modern implementations of the Transmission Control Protocol (TCP) include a
feature called “Delayed Acknowledgement” <xref target="RFC1122"/>.</t>

<t>Without this feature, TCP can be very wasteful on the network.
For illustration, consider a simple example like remote login,
using a very simple TCP implementation that lacks delayed acks.
When the user types a keystroke, a data packet is sent.
When the data packet arrives at the server,
the simple TCP implementation sends an immediate acknowledgement.
Mere milliseconds later, the server process reads the one byte of keystroke data,
and consequently the simple TCP implementation sends an immediate window update.
Mere milliseconds later, the server process generates the character echo,
and sends this data back in reply.
The simple TCP implementation then sends this data packet immediately too.
In this case, this simple TCP implementation sends a burst of three packets
almost instantaneously (ack, window update, data).</t>

<t>Clearly it would be more efficient if the TCP implementation were to
combine the three separate packets into one,
and this is what the delayed ack feature enables.</t>

<t>With delayed ack, the TCP implementation waits after receiving a data packet,
typically for 200 ms, and then send its ack if
(a) more data packet(s) arrive
(b) the receiving process generates some reply data, or
(c) 200 ms elapses without either of the above occurring.</t>

<t>With delayed ack, remote login becomes much more efficient,
generating just one packet instead of three for each character echo.</t>

<t>The logic of delayed ack is that the 200 ms delay cannot do any significant harm.
If something at the other end were waiting for something, then the receiving
process should generate the reply that the thing at the end is waiting for,
and TCP will then immediately send that reply (and the ack and window update).
And if the receiving process does not in fact generate any reply for this
particular message, then by definition the thing at the other end cannot be
waiting for anything, so the 200 ms delay is harmless.</t>

<t>This assumption may be true, unless the sender is using Nagle’s algorithm,
a similar efficiency feature, created to protect the network from poorly
written client software that performs many rapid small writes in succession.
Nagle’s algorithm allows these small writes to be combined into larger,
less wasteful packets.</t>

<t>Unfortunately, Nagle’s algorithm and delayed ack,
two valuable efficiency features,
can interact badly with each other when used together <xref target="NagleDA"/>.</t>

<t>DSO request messages elicit responses; DSO unidirectional messages and DSO response messages do not.</t>

<t>For DSO request messages, which do elicit responses, Nagle’s algorithm and delayed ack work as intended.</t>

<t>For DSO messages that do not elicit responses, the delayed ack mechanism
causes the ack to be delayed by 200 ms.
The 200 ms delay on the ack can in turn cause Nagle’s algorithm to prevent the
sender from sending any more data for 200 ms until the awaited ack arrives.
On an enterprise GigE backbone with sub-millisecond round-trip times,
a 200 ms delay is enormous in comparison.</t>

<t>When this issues is raised, there are two solutions that are often offered,
neither of them ideal:</t>

<t><list style="numbers">
  <t>Disable delayed ack.
For DSO messages that elicit no response, removing delayed ack
avoids the needless 200 ms delay,
and sends back an immediate ack, which tells Nagle’s algorithm that it should
immediately grant the sender permission to send its next packet.
Unfortunately, for DSO messages that <spanx style="strong">do</spanx> elicit a response, removing delayed ack
removes the efficiency gains of combining acks with data, and the responder will
now send two or three packets instead of one.</t>
  <t>Disable Nagle’s algorithm.
When acks are delayed by the delayed ack algorithm, removing Nagle’s algorithm
prevents the sender from being blocked from sending its next small packet immediately.
Unfortunately, on a network with a higher round-trip time, removing Nagle’s algorithm
removes the efficiency gains of combining multiple small packets into fewer larger ones,
with the goal of limiting the number of small packets in flight at any one time.</t>
</list></t>

<t>For DSO messages that elicit a response, delayed ack and Nagle’s algorithm do
the right thing.</t>

<t>The problem here is that with DSO messages that elicit no response,
the TCP implementation is stuck waiting, unsure if a response is about to be
generated, or whether the TCP implementation should go ahead and send
an ack and window update.</t>

<t>The solution is networking APIs that allow the receiver to inform the
TCP implementation that a received message has been read, processed,
and no response for this message will be generated.
TCP can then stop waiting for a response that will never come,
and immediately go ahead and send an ack and window update.</t>

<t>For implementations of DSO, disabling delayed ack is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>For implementations of DSO, disabling Nagle’s algorithm is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>At the time that this document is being prepared for publication, it is known
that at least one TCP implementation provides the ability for the recipient of a
TCP message to signal that it is not going to send a response, and hence
the delayed ack mechanism can stop waiting.
Implementations on operating systems where this
feature is available SHOULD make use of it.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC7413;
&RFC8446;
&RFC1122;


    </references>



  </back>

<!-- ##markdown-source:
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
ENoixLroqSiS2sWK5aLgMMaV9jP7uG8L6ROaKwmDaTT5Cte3lhZSYoAaTBdf
UN12zQjRPBWUnQvQTHRzEW6l0ElTk6iz6ZNZWXTX0wX2IiumMvEpm2zk0xVc
h4vNivQh7HBIkKB9EIeWHij/SumrKwa0vYPr5XZLeW/8G2lfoZDKOc3ekJaR
/lrHwTGdP52jd5+xPE25tPTlc9n0H63kAQaRn8DMHpgq5hRTspsq6fBt4+ie
jw90fN+BXqXK8UfOS8ZCVmLMN2oFkZXL5QYT7zqSGqjXwLG/Ev8q10ouwfji
a/eWsza4raEBWheLkWARysY9/+38+p8GI2mYxi2HdEr3tftKNc4kPPOhl953
TvCuP53/8wP6y4i5okjy+nWPg/6WczoWOp0JVOk0e0pGwykZDfLcGDf+vnOK
vahBdr8SWH34+/sRxlMn7yQCPyqKEWG0kBTppSkHS1P2IEvMj7xwvCB0qKJy
kJioFxZvOy105ipkSoHQb2gUJ+6peeZuq7Qdhy12qT51I2YOYwdr2YC3ga/y
+etoCFM84/H0JWyfsxAnWsWaMJXdeDtmIZ1BBxUzQzTX0lou9ir8+2UbM5rd
q32ze7Wj2GjfJD9+hkkl0vgsT2CWqd0yMRMC7Rat6Ri/4Pdu/Phi6LXnuHVj
VSqTRIXpT1mqvIQXorciHA4KP+S1B8AlBzFOdc+9dinzrnjnKETHhBqJsZ2B
PM/KWGfJjP0He9FSttppdkyYE0+Y/sb8N6CNhXiISB9NIgEiZxzcgVBiz57g
dnGjMXV3rdd1W3ZFzPb4Lny0CBuGx+8lwoTcujURqyu7+DUibDCLv5UIu/gN
ImzHJP8GIuziby/C+ouh1/5uIkwRkgfHVF57cPH/KRF28XuKsH9I2vxWEfZ/
4n+pEr9bn9zzTTrEL6QWkfZBlztdtXSt/ELShg41nRniYNqtX0Iy/K+bxS+U
lnpCSYSoQ/97apz8u80v/beb+e8zC/KMs2N8PG8NX71jFv/+u81C3RJZL3vu
35N37f7m95iFZzMX6PT9A8DC36yq1lwgbHfgTRozFzAGIGXe/LV5fvMMAwRY
8ewiknxCGEaG80JqSZVUf7hvzM1ROvc0TCyO00anj2U1Cw67uDlcLzDWAuIR
xrChuMTJ4olOFCeSHku6vgJiSg80jCueVZr38O4TiTVqqLEFM+3nwpKeMdFq
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
iGecTqeMw4X/AgnO3xj2vQEA

-->

</rfc>

