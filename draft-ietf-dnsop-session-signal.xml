<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC2782 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signaled by providing a
non-zero message ID for messages that must be acknowledged (request messages) and a zero message
ID for messages that are not to be acknowledged (unidirectional messages), and is also part of the definition
of a particular message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
The stream protocol carrying the DSO message frames it with 16-bit message length, so
the length of the DSO data is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
The term has no relationship to the “session layer” of the
OSI “seven-layer model”.</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server (see <xref target="sessiontermination"/>)</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error (see <xref target="sessiontermination"/>)</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a request or a unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a request or unidirectional message during a DSO
session.  Either a client or server can be a responder.</t>
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operations:'>
  a long-lived operation is an outstanding operation on a DSO session where either the client or server, acting as initiator, has requested that the responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any non-DSO DNS message (but not a DNS response).</t>
  <t hangText='DSO message:'>
  a DSO request message or a DSO unidirectional message.  Whether a DSO message is a
DSO Request or a DSO response is determined by the specification of its primary TLV.</t>
  <t hangText='DNS response:'>
  any non-DSO response.</t>
  <t hangText='DSO response:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive message was sent (on the client) or received (on the server).
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent message was sent (on the client) or received (on the server).
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateless Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">
<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support session signaling are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS (see <xref target="RFC7858"/> section 7).</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateless Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
<xref target="RFC7766"/> inactivity timeout handling is in effect (<xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.  <xref target="RFC7766"/> inactivity
timeout handling is no longer in effect (<xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection <xref target="sessiontermination"/>.</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.   In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="forcereconnect"/>).</t>

<t>In the second case, the client SHOULD set a reasonable timeout, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within that time, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="dropreconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because the Keepalive TLV can’t fail (that is, can’t return an RCODE
other than NOERROR), it is an ideal candidate for use in establishing
a DSO session.   Any other option that can only succeed MAY also be
used to establish a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are closed gracefully as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception.</t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unidirectional messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
Unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unidirectional message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
can’t contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/> whether an outgoing message with QR=0
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unidirectional message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
Valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a request (QR=0) where the MESSAGE ID is not zero, and
the responder tracks query MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a query it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver SHOULD already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver should forcibly abort the connection.
Whether the connection should be aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="flow-control-considerations" title="Flow Control Considerations">

<t>Because unidirectional DSO messages do not generate an immediate response from the responder, if
there is no other traffic flowing from the responder to the initiator, this can result in a
200ms delay before the TCP acknowledgment is sent to the initiator <xref target="NagleDA"/>.  If the
initiator has another message pending, but has not yet filled its output buffer, this can delay
the delivery of that message by more than 200ms.  In many cases, this will make no difference.
However, implementors should be aware of this issue.  Some operating systems offer ways to
disable the 200ms TCP acknowledgment delay; this may be useful for relatively low-traffic
sessions, or sessions with bursty traffic flows.</t>

</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.
This prevents TCP’s delayed acknowledgement algorithm from forcing the
client into a slow lock-step.
The server MUST act on messages in the order they are transmitted, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.
<xref target="RFC7766"/> section 3.3 specifies this in more detail.</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep a DSO Session open with no operations pending
(e.g., an outstanding DNS Push request)
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a pending request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a very long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message, including DNS requests, responses, updates, or DSO
messages, resets both timers for that DSO Session, with the exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a hypothetical keepalive interval value of 100ms would result
in a continuous stream of at least ten messages per second, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

</section>
<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions:
to reset the keepalive timer for the DSO Session,
and to establish the values for the Session Timeouts.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as an unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The unidirectional DSO Keepalive message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response message to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an unidirectional DSO Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward. When
a client receives a server-initiated message with the Keepalive TLV as its primary TLV, it resets the
keepalive timer.  Whenever it receives a Keepalive TLV from the server, either in a server-initiated
message or a reply to its own client-initiated Keepalive message, it updates the keepalive interval
for the DSO Session. The new keepalive
interval indicates the maximum time that may elapse before another message must be sent or
received on this DSO Session, if the DSO Session is to remain alive.
If the client receives a response to a DSO Keepalive message that specifies a keepalive interval
shorter than the current keepalive timer, the client MUST immediately send a DOS Keepalive message.
However, this should not normally happen in practice: it would require that Keepalive interval
the server be shorter than the round-trip time of the connection.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that the client requests are too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /                   VARIABLE NUMBER OF BYTES                    /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various components of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unidirectional Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to request message or unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X                 |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In the case where a server is specified using a hostname and the
port number is implicit, for example port 53 for DNS-over-TCP or
port 853 for DNS-over-TLS, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>In cases where a server is specified or configured using
a hostname and TCP port number,
such as in the content of a DNS SRV record <xref target="RFC2782"/>,
two different configurations (or DNS SRV records) are considered
to be referring to the same service instance if they
contain the same hostname (subject to the usual case insensitive
DNS name matching rules <xref target="RFC1034"/> <xref target="RFC1035"/>) and TCP port number.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing session signaling through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session. If the middlebox does implement DSO
sessions, it MUST handle unrecognized TLVs in the same way as any other DSO implementation as described below in <xref target="unrecognized"/>.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-
layer headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it does not apply
to middleboxes that do not implement DNS Stateless Operations.</t>

<t>These restrictions do not apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value ([TBA1] tentatively) 6 for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value ([TBA2] tentatively) 11 for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Reserved for experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an increasing impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC2119;
&RFC8174;
&RFC7766;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC2782;
&RFC7413;
&RFC8446;


    </references>



  </back>

<!-- ##markdown-source:
H4sIABOxcFsAA+y963YbR5Ym+j+eIof+YdINwLpZtuXVq5uWqCp2W5ciKbur
Z/WZlQSSZJaBTExmQhRK1jzLPMs82dn32JGZgCjbVavOrOMeTUlAIjJix44d
+/rt6XQaurJbFk+yZy/Ps/Mu74qrzTJ7tS6avCvrqg2Lel7lK3hg0eRX3bQs
uqvpomrr9bQt2hYembbldZUvp/cfhQX8/En24N79b6bfTB+Ect08ybpm03YP
7t379t6DkDdF/iQ7rbqiqYou3F7Ta1+9zn6qm5/L6jr7Q1Nv1uHn2/jQ9Bm+
Nszz7knWdouwWeNL2ifZ/XsPv5pkX3/9+HEI83oBv36SbWBu34R1+SRk2TTr
6jn9b7tdNcVVy3+vm47+EfJNd1M39CT8ybKygkHPZtn3xXJZtvQRr/ss3/oP
6+Y6zi4737ZdsWqzp0AqGLrcrCbw5XxGj+aXl03xFp4+f0r/buHVBazj26/u
ZU9v8gbGAJLjZ/T1vOy28LpicVvXi+wp/Is/rhcwi6fH2beP7j1+KB9tqq6B
h9+cH9MH65u6gof+6X52+Pire0fZowcPp/eB6PRlscrL5ZOsybf/WrbzGSwg
XfT5DGZTtDdlU7hln3cbmGH6Da39eL1eFnGRuqhXVSFfvc6bn7Of8q1b1NMN
MFRXVnVvRV/dA6752Ioe3fvmKPv228fT+/fuJyuay9z+Ncf3zub1Kl3Yv82y
Z+UcGKutK7eyf6tvqt4XtLBzmN9iU8XNvSjmN1W9rK/Lok02VJ7066e/T7MX
+XW+yJdFlT0tYEGFfPzq3VXdLLLzeVlUc6aQow5/60jz6j8eZY/+cNyjTFV2
xSL7d+D0Ba3U6PCXfPGvLU9pSITzcSKc503+fxURWljQbipczLIfilVCgQsY
J35Gi39ZXl7e5NucjvNmCQx7nfD469krEBD1O2Dcb9zUvwdZCTL0sm48f/94
kd376uG9B9N79nSfyWXqK5AudfWvV5vrzQgXw9Rfb1oQek3pZ1+v0o9pAW+q
/OqqXJbw8SKZ+cGBFzGwN+X1jZvry6fZg68f39sxTXcWv73/7VH2zeOvp/cf
PkzO4lrm8q+XeXX9F1pFKCvY0hXcI28LZI2X+fWyeHbMXNLlzTVO7Kbr1k++
/PL29nbWksTRQ41y6st1DnKj/bLCXy6KZb4tFvn85y95BL63Lp6+zl4XDb0J
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
lW95wgO1eYUXNWwHvKlXJ6SOWWJADeq2waeV74LrkMJi28PDYTkRH6ejXja5
tBtQYY/NySh2waJLsH/8a7BNbBLH+pAgORaxdSVtCzei6g/SzrLXeUOKAOfO
SwcOVL9iQ5FkosRYqq16SKOd1DGFgOQAfKlRmQG5ejQRCM69PD0zgJ4erxt8
u7W7iyiw5L6vVMa0WkvvMmz2QPj0gC3NmgAp34d2aJHRnT6oIMSOVCNBx03l
uhFY8wyujp/0xI/2sjHrhNJprIpSrszY7ULzMvMsaYYj8bd0CL07+i1caQ/H
+4BFrcqZd5TUcFPXXABZiFh09y5dLfEpBizH2urec2wDrMhTB0SXEosUQ1RU
Ec7h5x6t7PKl5IRRPTqZLJ/DEAHwe0FRIa0zP0AZErPdTxUnSJun/WHiVaeB
i9GJoz4bgQYIAAA7fbsKtYT2ouiaYLceToMlZZ+wJAxZhJGNSkGcRrBIJoM+
CYZNgtUla0HzkN5kg5kMfQm9bizYdiffdDVGgNh5zYDVvXnOsuM4dkzaQX+c
0zOjejXwbdpNpPZniUYFJd7wLuGW9LZVNcqkwzLD/6M4ZeQOYnUaQgJo/dJD
fGzm2qsEkWM7miLRb4hLSLW6JWSNklFssKzNXHbkd8OLcGxfJ9T3wNC+rR+J
uv7MWvYOQKJviOC9sBD2B2uB2Bipaf3sZiCqYDXXVhpKBVfg4E7LSJ8cxiUZ
5U9r6+RZ+i6wOR6sPAi7WbduqQHtGwwsnUdnTR7o5yjEnsIgTb3E/6UmLVKm
Y405ejdNEmoSbGxXYRZ1uJFjY/cCdd3pXK2UNPDQKhPJsBv+cHB1TFR5q5xC
kIcH9+6tkD+WVKx6JX2hCYO9BwJXatvq3sAgGV7mIJOfHYNs0GZIPTjDvNJe
mRJu5b0d9qK/KhFgUM2L9QabQqHPzM2e5ho4uoD2V7O1+npD9dpybJow6mmF
3MZ0hdaLlKSyFmqnrqrNOzcvPJySKgm17ySDoIsKpkHGTrtBlfgc7/fYEL7d
tl2xQh/mFTVp3lJB5KJsGeAbVsDUHyE2LfI7Mcy5jhhYTPUIloWU8wMMoOXH
2lqTs+X0H+zUutw0LfavcXwjrH2mHDM9tcqgCO/zlDEftTXG3P2TwFwc/AJf
VcO+K9bY5hzLIXAJr5yxGHsydm2xvNIaGNyoMQu75R4hpRbLkJWJiZ2U18yn
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
6pA9AAzfmJqHHk1s9fi30nc2ygVrfws31m7GEhueu7tIdoDPG3AZuUOgoaea
Jl0tyGdRX8UEzx1HoKe1uIvDHwfky48onD7zyY1yt9sr0XFuckncDh+Z/K4C
SXIEjvT8CqLuxihaemr69w0yCClQlwoxITBM5Ne0ZmBZjPmupchp1w0SF+ny
dbF16BUP2L8++oCSo04c/NBvOc9FKGcAxy0YoJiILdcVJyqHsY3fBYgQ9ZqU
bHkruqfdGBPJByo61rF7U55l9HL2Aiev3rsfk8zDrfZnqY1kMoEmlotKa24H
3DvCg+j45VYoPUJbjf1IOI65DSv6R/CHfepNr/2flJVuJXnFkuB6DdDV1SBA
ZvFIjCZ4lwOoNYFh5F4j6u9Kfb07zvwuvZpj6dYKcgy1Igz6WKnvfZR5vR7p
61EU7ePV+Zi+awKaC1tiehvXg9PBWiOaGBkQDG7zhABGpeiHLyFazr8Pl+Dk
wFgnvqbeVItp15TrTG2iQZRi5PCO9WjYd36DnV9L/FtxzcJltyysvyBxV5FX
boT4phBbSkmP79aFPabTKSU9DlLFjF8DNZDQfDbypYsfXkP80nHee/N61xOe
EeqOqjeSGpXKVWlf5p4gUJdXECfnHs8Xy36cpOR0IDiOhBGWiMvDc+15HtNz
xOXcln0Pl4sBRO500vMSUQzsRpkfu3PkQzvWiZdPFNkkZthrkEo/3lS+q4gR
4zuGgFJECDFv0pabflsNS3H3PoYvMhUecqIHHZBGIPU7bhC8i/uHtZiMwUIi
ywABK0xkteqaHa/lHhNxraPdQXoih2YwbI6RCNZRffwTaAHChhNs7kCKHjNq
Wk2wCOwVV/Wzzpr2R/KhLe77wsp0JRhgu0TtCKL2r953rf2S6G5Exf/kdQcd
itKKkvX3uyzJwnnNDlzj77ng6PuPkOIfZfvoLkxKMWPcISKPYrf5oaTyP4NH
rzXt+LIYyXbsqcpHv5lOcgtz5qGmCiroHSOJtmMH1gF1h1vqMHmDPV0xylq+
TXy/rC2NF4m6TIUgClTqL6obLtwfFmKUnXdbahph/+V5RDGC80tvc42wsGYC
DjZqBiH6j0b3+44A8pI3vDTciQI7p3Xz9TRqTidgV9/LXkmvtc/wiXv9PLRP
u4SSPDU8d225KjEOSJHLTsMYH52LYPk9+ObDh1l2LIU9X+rRzEspV5BsTuYk
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

-->

</rfc>

