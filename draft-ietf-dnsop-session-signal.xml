<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version  -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-19" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="December" day="04"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular DSO message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO message is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO</t>
</list></t>

<t>session.  Either a client or server can be a responder.</t>

<t><list style="hanging">
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operation:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='Early Data:'>
  Early Data:
A TLS 1.3 handshake containing early data that begins a DSO session (<xref target="RFC8446"/> section 2.3).
TCP Fast Open is only permitted when using TLS.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">

<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>Some DSO messages are permitted as early data (<xref target="zrtt"/>).  Others are not.
Unidirectional messages are never permitted as early data unless an implicit session
exists.</t>

<t>If a server receives a DSO message in early data whose primary TLV is not
permitted to appear in early data, the server MUST forcibly abort the connection.  If a
client receives a DSO message in early data, and there is no implicit DSO
session, the client MUST forcibly abort the connection.   This can only be enforced on
TLS connections; therefore, servers MUST NOT enable TFO when listening for a connection
that does not require TLS.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
(defined below), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a compliant DSO implementation.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE.
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one, the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value.</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of response codes not defined here, then that document MUST specify the specific
interpretation of those RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with the Primary
TLV DSO-TYPE the same as the Primary TLV from the corresponding DSO
request message or it may contain zero or more Additional TLVs only.
The MESSAGE ID field in the DNS message header is sufficient to
identify the DSO request message to which this response message
relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV–the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI.
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
cannot contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>A DSO message can’t contain a TSIG record, because a TSIG record
is included in the additional section of the message, which would
mean that ARCOUNT would be greater than zero.   DSO messages are
required to have an ARCOUNT of zero.  Therefore, if use of signatures
with DSO messages becomes necessary in the future, a new DSO TLV
would have to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with
the QR bit in the DNS header set to zero
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>Every DSO message with the QR bit in the DNS header set to zero and a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response,
with the QR bit in the DNS header set to one and the MESSAGE ID field set to the
value given in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>Every DSO message with both the QR bit in the DNS header and the MESSAGE ID field set to zero
is a DSO unidirectional message, and MUST NOT elicit a response.</t>

<t><vspace blankLines='999' /></t>

<section anchor="delayed-acknowledgement-management" title="Delayed Acknowledgement Management">

<t>Generally, most good TCP implementations employ a delayed acknowledgement timer
to provide more efficient use of the network and better performance.</t>

<t>With a bidirectional exchange over TCP, as for example with a DSO request
message, the operating system TCP implementation waits for the
application-layer client software to generate the corresponding DSO
response message.   It can then send a
single combined packet containing the TCP acknowledgement, the
TCP window update, and the application-generated DSO response message.
This is more efficient than sending three separate packets, as would occur if
the TCP packet containing the DSO request were acknowledged immediately.</t>

<t>With a DSO unidirectional message or DSO response message,
there is no corresponding application-generated DSO response message,
and consequently, no hint to the transport protocol about
when it should send its acknowledgement and window update.</t>

<t>Some networking APIs provide a mechanism that allows the
application-layer client software to signal to the
transport protocol that no response will be forthcoming
(in effect it can be thought of as a zero-length “empty” write).
Where available in the networking API being used,
the recipient of a DSO unidirectional message or DSO response message,
having parsed and interpreted the message,
SHOULD then use this mechanism provided by the networking
API to signal that no response for this message will be forthcoming,
so that the TCP implementation can go ahead and send its
acknowledgement and window update without further delay.
See <xref target="delack"/> for further discussion of why this is important.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="message-id-namespaces" title="MESSAGE ID Namespaces">

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

</section>
<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Long-lived operations, if successful, will remain active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client and server.
Moreover for a keep-alive value that is smaller than the time needed for the transport to
retransmit, a single packet loss would cause a server to overzealously abort the connect. For
example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result in a
continuous stream of ten messages per second or more (if allowed by the current congestion
control window), in both directions, to keep the DSO Session alive.  And, in this extreme
example, a single retransmission over a path with, e.g., 100ms RTT would introduce a momentary
pause in the stream of messages, long enough to cause the server to abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="misbehaving-clients" title="Misbehaving Clients">

<t>A server may determine that a client is not following the protocol correctly.  There may be no
way for the server to recover the session, in which case the server forcibly terminates the
connection.  Since the client doesn’t know why the connection dropped, it may reconnect
immediately.  If the server has determined that a client is not following the protocol
correctly, it may terminate the DSO session as soon as it is established, specifying a long
retry-delay to prevent the client from immediately reconnecting.</t>

</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   When the client notices that
the connection has been dropped, it can attempt to reconnect immediately.
However, if the connection is dropped again without the client being
able to successfully do whatever it is trying to do, it should mark the
server as not supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>DSO messages with the Keepalive TLV as the primary TLV may appear in
early data.</t>

<t>The DSO-DATA for the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relationship to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.   DSO messages
with a Relay Delay TLV as their primary TLV are not permitted in early data.</t>

<t>The DSO-DATA for the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for the Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="operational-considerations-for-middlebox" title="Operational Considerations for Middlebox">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
a configuration in which DSO traffic is mis-handled.   The simplest way to
avoid such problems is to avoid using middleboxes.   When this is not possible,
middleboxes should be evaluated to make sure that they behave correctly.</t>

<t>Correct behavior for middleboxes consists of one of:</t>

<t><list style="symbols">
  <t>The middlebox does not forward DSO messages, and responds to DSO messages
with a response code other than NOERROR or DSOTYPENI.</t>
  <t>The middlebox acts as a DSO server and follows this specification in
establishing connections.</t>
  <t>There is a 1:1 correspondence between incoming and outgoing connections,
such that when a connection is established to the middlebox, it is guaranteed
that exactly one corresponding connection will be established from the middlebox
to some DNS resolver, and all incoming messages will be forwarded without
modification or reordering.   An example of this would be a NAT forwarder or
TCP connection optimizer (e.g. for a high-latency connection such as a
geosynchronous satellite link).</t>
</list></t>

<t>Middleboxes that do not meet one of the above criteria are very likely to
fail in unexpected and difficult-to-diagnose ways.   For example, a DNS
load balancer might unbundle DNS messages from the incoming TCP stream and
forward each message from the stream to a different DNS server.   If such
a load balancer is in use, and the DNS servers it points implement DSO and
are configured to enable DSO, DSO session establishment will succeed, but
no coherent session will exist between the client and the server.   If such
a load balancer is pointed at a DNS server that does not implement DSO or
is configured not to allow DSO, no such problem will exist, but such a
configuration risks unexpected failure if new server software is installed
which does implement DSO.</t>

<t>It is of course possible to implement a middlebox that properly supports DSO.
It is even possible to implement one that implements DSO with long-lived operations.
This can be done either by maintaining a 1:1 correspondence between incoming
and outgoing connections, as mentioned above, or by terminating incoming
sessions at the middlebox, but maintaining state in the middlebox about any
long-lived that are requested.   Specifying this in detail is beyond the scope
of this document.</t>

</section>
<section anchor="delack" title="TCP Delayed Acknowledgement Considerations">

<t>Most modern implementations of the Transmission Control Protocol (TCP) include a
feature called “Delayed Acknowledgement” <xref target="RFC1122"/>.</t>

<t>Without this feature, TCP can be very wasteful on the network.
For illustration, consider a simple example like remote login,
using a very simple TCP implementation that lacks delayed acks.
When the user types a keystroke, a data packet is sent.
When the data packet arrives at the server,
the simple TCP implementation sends an immediate acknowledgement.
Mere milliseconds later, the server process reads the one byte of keystroke data,
and consequently the simple TCP implementation sends an immediate window update.
Mere milliseconds later, the server process generates the character echo,
and sends this data back in reply.
The simple TCP implementation then sends this data packet immediately too.
In this case, this simple TCP implementation sends a burst of three packets
almost instantaneously (ack, window update, data).</t>

<t>Clearly it would be more efficient if the TCP implementation were to
combine the three separate packets into one,
and this is what the delayed ack feature enables.</t>

<t>With delayed ack, the TCP implementation waits after receiving a data packet,
typically for 200 ms, and then send its ack if
(a) more data packet(s) arrive
(b) the receiving process generates some reply data, or
(c) 200 ms elapses without either of the above occurring.</t>

<t>With delayed ack, remote login becomes much more efficient,
generating just one packet instead of three for each character echo.</t>

<t>The logic of delayed ack is that the 200 ms delay cannot do any significant harm.
If something at the other end were waiting for something, then the receiving
process should generate the reply that the thing at the end is waiting for,
and TCP will then immediately send that reply (and the ack and window update).
And if the receiving process does not in fact generate any reply for this
particular message, then by definition the thing at the other end cannot be
waiting for anything, so the 200 ms delay is harmless.</t>

<t>This assumption may be true, unless the sender is using Nagle’s algorithm,
a similar efficiency feature, created to protect the network from poorly
written client software that performs many rapid small writes in succession.
Nagle’s algorithm allows these small writes to be combined into larger,
less wasteful packets.</t>

<t>Unfortunately, Nagle’s algorithm and delayed ack,
two valuable efficiency features,
can interact badly with each other when used together <xref target="NagleDA"/>.</t>

<t>DSO request messages elicit responses; DSO unidirectional messages and DSO response messages do not.</t>

<t>For DSO request messages, which do elicit responses, Nagle’s algorithm and delayed ack work as intended.</t>

<t>For DSO messages that do not elicit responses, the delayed ack mechanism
causes the ack to be delayed by 200 ms.
The 200 ms delay on the ack can in turn cause Nagle’s algorithm to prevent the
sender from sending any more data for 200 ms until the awaited ack arrives.
On an enterprise GigE backbone with sub-millisecond round-trip times,
a 200 ms delay is enormous in comparison.</t>

<t>When this issues is raised, there are two solutions that are often offered,
neither of them ideal:</t>

<t><list style="numbers">
  <t>Disable delayed ack.
For DSO messages that elicit no response, removing delayed ack
avoids the needless 200 ms delay,
and sends back an immediate ack, which tells Nagle’s algorithm that it should
immediately grant the sender permission to send its next packet.
Unfortunately, for DSO messages that <spanx style="strong">do</spanx> elicit a response, removing delayed ack
removes the efficiency gains of combining acks with data, and the responder will
now send two or three packets instead of one.</t>
  <t>Disable Nagle’s algorithm.
When acks are delayed by the delayed ack algorithm, removing Nagle’s algorithm
prevents the sender from being blocked from sending its next small packet immediately.
Unfortunately, on a network with a higher round-trip time, removing Nagle’s algorithm
removes the efficiency gains of combining multiple small packets into fewer larger ones,
with the goal of limiting the number of small packets in flight at any one time.</t>
</list></t>

<t>For DSO messages that elicit a response, delayed ack and Nagle’s algorithm do
the right thing.</t>

<t>The problem here is that with DSO messages that elicit no response,
the TCP implementation is stuck waiting, unsure if a response is about to be
generated, or whether the TCP implementation should go ahead and send
an ack and window update.</t>

<t>The solution is networking APIs that allow the receiver to inform the
TCP implementation that a received message has been read, processed,
and no response for this message will be generated.
TCP can then stop waiting for a response that will never come,
and immediately go ahead and send an ack and window update.</t>

<t>For implementations of DSO, disabling delayed ack is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>For implementations of DSO, disabling Nagle’s algorithm is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>At the time that this document is being prepared for publication, it is known
that at least one TCP implementation provides the ability for the recipient of a
TCP message to signal that it is not going to send a response, and hence
the delayed ack mechanism can stop waiting.
Implementations on operating systems where this
feature is available SHOULD make use of it.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Early Data</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>NO</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>OK</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>NO</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>NA</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for DSO session-management TLVs</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>The meanings of the fields are as follows:</t>

<t><list style="hanging">
  <t hangText='Type:'>
  the 16-bit DSO type code</t>
  <t hangText='Name:'>
  the human-readable name of the TLV</t>
  <t hangText='Early Data:'>
  If OK, this TLV may be sent as early data in a TLS 0-RTT (<xref target="RFC8446"/> Section 2.3) initial
handshake.  If NA, the TLV may appear as a secondary TLV in a DSO message that is send as
early data.</t>
  <t hangText='Status:'>
  IETF Document status (or “External” if not documented in an IETF document.</t>
  <t hangText='Reference:'>
  A stable reference to the document in which this TLV is defined.</t>
</list></t>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Any document defining a new TLV which lists a value of “OK” in the 0-RTT column
must include a threat analysis for the use of the TLV in the case of
TLS 0-RTT.  See <xref target="zrtt"/> for details.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="zrtt" title="TLS 0-RTT Considerations">

<t>DSO permits zero round-trip operation using TCP Fast Open <xref target="RFC7413"/> with TLS 1.3 <xref target="RFC8446"/>
0-RTT to reduce or eliminate round trips in session establishment.  TCP Fast Open is only
permitted in combination with TLS 0-RTT.  In the rest of this section we refer to TLS 1.3 early
data in a TLS 0-RTT initial handshake message, whether or not it is included in a TCP Fast Open
packet, as “early data.”</t>

<t>A DSO message may or may not be permitted to be sent as early data.  The definition for
each TLV that can be used as a primary TLV is required to state whether or not that TLV is
permitted as early data.  Only response-requiring messages are ever permitted as early
data, and only clients are permitted to send any DSO message as
early data, unless there is an implicit session (see <xref target="establishment"/>).</t>

<t>For DSO messages that are permitted as early data, a client MAY include one or more such
messages as early data without having to wait for a DSO response to the first
DSO request message to confirm successful establishment of a DSO session.</t>

<t>However, unless there is an implicit session, a client MUST NOT send DSO unidirectional messages
until after a DSO Session has been mutually established.</t>

<t>Similarly, unless there is an implicit session, a server MUST NOT send DSO request messages
until it has received a response-requiring DSO request message from a client and transmitted a
successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent as early data
are idempotent, or are otherwise immune to any problems that could be result from the
inadvertent replay that can occur with zero round-trip operation.</t>

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.</t>

<t>If a new TLV is specified that does have this property, that TLV must be specified as not
permitted in 0-RTT messages.  This prevents work from being done until a round-trip has occurred
from the server to the client to verify that the source address of the packet is reachable.</t>

<t>Documents that define new TLVs must state whether each new TLV may be sent as early data.
Such documents must include a threat analysis in the security
considerations section for each TLV defined in the document that may be sent as early data.
This threat analysis should be done based on the advice given in
<xref target="RFC8446"/> Section 2.3, 8 and Appendix E.5.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
Bernie Volz and
Bob Harold
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC1122;
&RFC7413;
&RFC8446;


    </references>



  </back>

<!-- ##markdown-source:
H4sIALOaCVwAA+y9bXcbR5Im+j1/RS39waQHgElJlm35zNmhJaqbM3prkrKn
d2fvniJQJKsFVGFQBVFoWfvbN94zsqoAUra7b9851zvaloBCVmZkZGS8PjEe
j0NbtvPiSfbs1Xl23uZtcbWeZ6+XxSpvy7pqwqyeVvkCHpit8qt2XBbt1XhW
NfVy3BRNA4+Mm/K6yufjo+/DDH7+JHtwePTd+OjB+PBRKJerJ1m7Wjftg8PD
7w8fhHxV5E+y06otVlXRhttrevHrN9nP9epdWV1nf1jV62V4dxsfGj/DF4dp
3j7JmnYW1kt8TfMkOzp8+M0o+/bbx49DmNYz+PWTbA2z+y4syychy8ZZW0/p
f5vNYlVcNfz3etXSP0K+bm/qFT0Jf7KsrGDQs0n2YzGflw19xCs/yzf+w3p1
HWeXnW+atlg02VMgFgxdrhcj+HI6oUfzy8tV8R6ePn9K/27g1QWs4/tvDrOn
N/kKxgCi42f09bRsN/C6YnZb17PsKfyLP65nMIunx9n3jw4fP5SP1lW7goff
nh/TB8ubuoKH/uko23/8zeFB9ujBQ9iDw0P6sljk5fxJtso3/1I20wksIF30
+QRmUzQ35apwyz5v1zDD9Bta+/FyOS/iInVRr6tCvnqTr95lP+cbt6ina2Cp
tqzqzoq+OTx6dOeKHh1+d5B9//3j8dHhUbKiqcztX3J872RaL9KF/eske1ZO
gbGaunIr+9f6pup8QQs7h/nN1lXc3ItielPV8/q6LJpkQ+VJv376+zh7mV/n
s3xeVNnTAhZUyMevP1zVq1l2Pi2LasoUctThbx1pXv/7o+zRH447lKnKtphl
/wacPqOVGh3+ks/+peEp9YlwPkyE83yV/5ciQgML2k6Fi0n2olgkFLiAceJn
tPhX5eXlTb7J6Tiv58Cw1wmPv5m8BgFRfwDG/c5N/UeQliBFL+uV5++fLrLD
bx4egiS0p7tMLlNfgHSpq3+5Wl+vB7gYpv5m3YDQW5V+9vUi/ZgW8LbKr67K
eQkfz5KZ7+15EQN7U17fuLm+epo9+Pbx4ZZpurP4/dH3B9l3j78dHz18mJzF
pczlXy7z6vovtIpQVrClC7hJ3hfIGq/y63nx7Ji5pM1X1zixm7ZdPvn669vb
20lDEkcPNcqpr5c5yI3m6wp/OSvm+aaY5dN3X/MIfHNdPH2TvSlW9CZkq+Wq
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
FskBAA==

-->

</rfc>

