<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signaled by providing a
non-zero message ID for messages that must be acknowledged (request messages) and a zero message
ID for messages that are not to be acknowledged (unidirectional messages), and is also specified in the definition
of a particular message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO data is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a request or a unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a request or unidirectional message during a DSO
session.  Either a client or server can be a responder.</t>
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operations:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">
<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="forcereconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="dropreconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are closed gracefully as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception.</t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unidirectional messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
Unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unidirectional message MUST contain at at least one TLV - the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
can’t contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/>, whether an outgoing message with QR=0
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unidirectional message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a request (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a request it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t>[No it doesn’t. RFC7766 has no section 3.3.]</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as an unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The unidirectional DSO Keepalive message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an unidirectional DSO Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unidirectional Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to request message or unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>[This whole section needs a rewrite.]</t>

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing DNS Stateful Operations messages through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session. If the middlebox does implement DSO
sessions, it MUST handle unrecognized TLVs in the same way as any other DSO implementation as described in <xref target="unrecognized"/>.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-layer
headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it applies especially
to middleboxes that do not know about DNS Stateful Operations.</t>

<t>These restrictions definitely apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more DNS-over-TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
<section anchor="tcp-delayed-acknowledgement-considerations" title="TCP Delayed Acknowledgement Considerations">

<t>[Need to put back the text explaining the problem here.]</t>

<t>Because unidirectional DSO messages do not generate an immediate response from the responder, if
there is no other traffic flowing from the responder to the initiator, this can result in a
200 ms delay before the TCP acknowledgment is sent to the initiator <xref target="NagleDA"/>.  If the
initiator has another message pending, but has not yet filled its output buffer, this can delay
the delivery of that message by more than 200 ms.  In many cases, this will make no difference.
However, implementors should be aware of this issue.  Some operating systems offer ways to
disable the 200 ms TCP acknowledgment delay; this may be useful for relatively low-traffic
sessions, or sessions with bursty traffic flows.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC7413;
&RFC8446;


    </references>



  </back>

<!-- ##markdown-source:
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
z3efXo8O1nZqTPTWi8WC4eXwH6ZSFJgppQEA

-->

</rfc>

