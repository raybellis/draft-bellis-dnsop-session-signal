<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-16" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="September" day="27"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular DSO message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO message is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO</t>
</list></t>

<t>session.  Either a client or server can be a responder.</t>

<t><list style="hanging">
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operation:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
</list></t>

<t>Fast Open message:
A TCP SYN packet that begins a DSO connection and contains early data (<xref target="RFC8446"/> section 2.3).   Fast
Open is only permitted when using TLS encapsulation: a TCP SYN message that does not use TLS encapsulation
but contains early data is not permitted.</t>

<t><list style="hanging">
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">

<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>Some DSO messages are permitted in Fast Open messages (<xref target="zrtt"/>).  Others are not.
Unidirectional messages are never permitted in Fast Open messages unless an implicit session
exists.</t>

<t>If a server receives a Fast Open message containing a DSO message whose primary TLV is not
permitted to appear in a Fast Open message, the server MUST forcible abort the connection.  If a
client receives a Fast Open message containing any DSO message, and there is no implicit DSO
session, the client MUST forcibly abort the connection.   If a server or client receives a Fast
Open message that is not a TLS 1.3 message, it MUST forcibly abort the connection.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
(defined below), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a compliant DSO implementation.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE.
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one, the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value.</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of response codes not defined here, then that document MUST specify the specific
interpretation of those RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with the Primary
TLV DSO-TYPE the same as the Primary TLV from the corresponding DSO
request message or it may contain zero or more Additional TLVs only.
The MESSAGE ID field in the DNS message header is sufficient to
identify the DSO request message to which this response message
relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV - the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI.
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
cannot contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>A DSO message can’t contain a TSIG record, because a TSIG record
is included in the additional section of the message, which would
mean that ARCOUNT would be greater than zero.   DSO messages are
required to have an ARCOUNT of zero.  Therefore, if use of signatures
with DSO messages becomes necessary in the future, a new DSO TLV
would have to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with
the QR bit in the DNS header set to zero
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>Every DSO message with the QR bit in the DNS header set to zero and a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response,
with the QR bit in the DNS header set to one and the MESSAGE ID field set to the
value given in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>Every DSO message with both the QR bit in the DNS header and the MESSAGE ID field set to zero
is a DSO unidirectional message, and MUST NOT elicit a response.</t>

<t><vspace blankLines='999' /></t>

<section anchor="delayed-acknowledgement-management" title="Delayed Acknowledgement Management">

<t>Generally, most good TCP implementations employ a delayed acknowledgement timer
to provide more efficient use of the network and better performance.</t>

<t>With a DSO request message, the TCP implementation waits for the
application-layer client software to generate the corresponding DSO
response message, which enables the TCP implementation to send a
single combined IP packet containing the TCP acknowledgement, the
TCP window update, and the application-generated DSO response message.
This is more efficient than sending three separate IP packets.</t>

<t>With a DSO unidirectional message or DSO response message,
there is no corresponding application-generated DSO response message,
and consequently, no hint to the transport protocol about
when it should send its acknowledgement and window update.
Some networking APIs provide a mechanism that allows the
application-layer client software to signal to the
transport protocol that no response will be forthcoming
(in effect it can be thought of as a zero-length “empty” write).
Where available in the networking API being used,
the recipient of a DSO unidirectional message or DSO response message,
having parsed and interpreted the message,
SHOULD then use this mechanism provided by the networking
API to signal that no response for this message will be forthcoming,
so that the TCP implementation can go ahead and send its
acknowledgement and window update without further delay.
See <xref target="delack"/> for further discussion of why this is important.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="message-id-namespaces" title="MESSAGE ID Namespaces">

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

</section>
<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Long-lived operations, if successful, will remain active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>DSO messages with the Keepalive TLV as the primary TLV may appear in
Fast Open messages.</t>

<t>The DSO-DATA for the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relationship to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.   DSO messages
with a Relay Delay TLV as their primary TLV are not permitted in Fast Open messages.</t>

<t>The DSO-DATA for the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for the Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="operational-considerations-for-middlebox" title="Operational Considerations for Middlebox">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
a configuration in which DSO traffic is mis-handled.   The simplest way to
avoid such problems is to avoid using middleboxes.   When this is not possible,
middleboxes should be evaluated to make sure that they behave correctly.</t>

<t>Correct behavior for middleboxes consists of one of:</t>

<t><list style="symbols">
  <t>The middlebox does not forward DSO messages, and responds to DSO messages
with a response code other than NOERROR or DSOTYPENI.</t>
  <t>The middlebox acts as a DSO server and follows this specification in
establishing connections.</t>
  <t>There is a 1:1 correspondence between incoming and outgoing connections,
such that when a connection is established to the middlebox, it is guaranteed
that exactly one corresponding connection will be established from the middlebox
to some DNS resolver, and all incoming messages will be forwarded without
modification or reordering.   An example of this would be a NAT forwarder or
TCP connection optimizer (e.g. for a high-latency connection such as a
geosynchronous satellite link).</t>
</list></t>

<t>Middleboxes that do not meet one of the above criteria are very likely to
fail in unexpected and difficult-to-diagnose ways.   For example, a DNS
load balancer might unbundle DNS messages from the incoming TCP stream and
forward each message from the stream to a different DNS server.   If such
a load balancer is in use, and the DNS servers it points implement DSO and
are configured to enable DSO, DSO session establishment will succeed, but
no coherent session will exist between the client and the server.   If such
a load balancer is pointed at a DNS server that does not implement DSO or
is configured not to allow DSO, no such problem will exist, but such a
configuration risks unexpected failure if new server software is installed
which does implement DSO.</t>

<t>It is of course possible to implement a middlebox that properly supports DSO.
It is even possible to implement one that implements DSO with long-lived operations.
This can be done either by maintaining a 1:1 correspondence between incoming
and outgoing connections, as mentioned above, or by terminating incoming
sessions at the middlebox, but maintaining state in the middlebox about any
long-lived that are requested.   Specifying this in detail is beyond the scope
of this document.</t>

</section>
<section anchor="delack" title="TCP Delayed Acknowledgement Considerations">

<t>Most modern implementations of the Transmission Control Protocol (TCP) include a
feature called “Delayed Acknowledgement” <xref target="RFC1122"/>.</t>

<t>Without this feature, TCP can be very wasteful on the network.
For illustration, consider a simple example like remote login,
using a very simple TCP implementation that lacks delayed acks.
When the user types a keystroke, a data packet is sent.
When the data packet arrives at the server,
the simple TCP implementation sends an immediate acknowledgement.
Mere milliseconds later, the server process reads the one byte of keystroke data,
and consequently the simple TCP implementation sends an immediate window update.
Mere milliseconds later, the server process generates the character echo,
and sends this data back in reply.
The simple TCP implementation then sends this data packet immediately too.
In this case, this simple TCP implementation sends a burst of three packets
almost instantaneously (ack, window update, data).</t>

<t>Clearly it would be more efficient if the TCP implementation were to
combine the three separate packets into one,
and this is what the delayed ack feature enables.</t>

<t>With delayed ack, the TCP implementation waits after receiving a data packet,
typically for 200 ms, and then send its ack if
(a) more data packet(s) arrive
(b) the receiving process generates some reply data, or
(c) 200 ms elapses without either of the above occurring.</t>

<t>With delayed ack, remote login becomes much more efficient,
generating just one packet instead of three for each character echo.</t>

<t>The logic of delayed ack is that the 200 ms delay cannot do any significant harm.
If something at the other end were waiting for something, then the receiving
process should generate the reply that the thing at the end is waiting for,
and TCP will then immediately send that reply (and the ack and window update).
And if the receiving process does not in fact generate any reply for this
particular message, then by definition the thing at the other end cannot be
waiting for anything, so the 200 ms delay is harmless.</t>

<t>This assumption may be true, unless the sender is using Nagle’s algorithm,
a similar efficiency feature, created to protect the network from poorly
written client software that performs many rapid small writes in succession.
Nagle’s algorithm allows these small writes to be combined into larger,
less wasteful packets.</t>

<t>Unfortunately, Nagle’s algorithm and delayed ack,
two valuable efficiency features,
can interact badly with each other when used together <xref target="NagleDA"/>.</t>

<t>DSO request messages elicit responses; DSO unidirectional messages and DSO response messages do not.</t>

<t>For DSO request messages, which do elicit responses, Nagle’s algorithm and delayed ack work as intended.</t>

<t>For DSO messages that do not elicit responses, the delayed ack mechanism
causes the ack to be delayed by 200 ms.
The 200 ms delay on the ack can in turn cause Nagle’s algorithm to prevent the
sender from sending any more data for 200 ms until the awaited ack arrives.
On an enterprise GigE backbone with sub-millisecond round-trip times,
a 200 ms delay is enormous in comparison.</t>

<t>When this issues is raised, there are two solutions that are often offered,
neither of them ideal:</t>

<t><list style="numbers">
  <t>Disable delayed ack.
For DSO messages that elicit no response, removing delayed ack
avoids the needless 200 ms delay,
and sends back an immediate ack, which tells Nagle’s algorithm that it should
immediately grant the sender permission to send its next packet.
Unfortunately, for DSO messages that <spanx style="strong">do</spanx> elicit a response, removing delayed ack
removes the efficiency gains of combining acks with data, and the responder will
now send two or three packets instead of one.</t>
  <t>Disable Nagle’s algorithm.
When acks are delayed by the delayed ack algorithm, removing Nagle’s algorithm
prevents the sender from being blocked from sending its next small packet immediately.
Unfortunately, on a network with a higher round-trip time, removing Nagle’s algorithm
removes the efficiency gains of combining multiple small packets into fewer larger ones,
with the goal of limiting the number of small packets in flight at any one time.</t>
</list></t>

<t>For DSO messages that elicit a response, delayed ack and Nagle’s algorithm do
the right thing.</t>

<t>The problem here is that with DSO messages that elicit no response,
the TCP implementation is stuck waiting, unsure if a response is about to be
generated, or whether the TCP implementation should go ahead and send
an ack and window update.</t>

<t>The solution is networking APIs that allow the receiver to inform the
TCP implementation that a received message has been read, processed,
and no response for this message will be generated.
TCP can then stop waiting for a response that will never come,
and immediately go ahead and send an ack and window update.</t>

<t>For implementations of DSO, disabling delayed ack is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>For implementations of DSO, disabling Nagle’s algorithm is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>At the time that this document is being prepared for publication, it is known
that at least one TCP implementation provides the ability for the recipient of a
TCP message to signal that it is not going to send a response, and hence
the delayed ack mechanism can stop waiting.
Implementations on operating systems where this
feature is available SHOULD make use of it.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Fast Open</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>NO</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>OK</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>NO</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>NA</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for DSO session-management TLVs</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>The meanings of the fields are as follows:</t>

<t><list style="hanging">
  <t hangText='Type:'>
  the 16-bit DSO type code</t>
  <t hangText='Name:'>
  the human-readable name of the TLV</t>
  <t hangText='Fast Open:'>
  If OK, this TLV may be sent in a Fast Open (TLS 0-RTT) (<xref target="RFC8446"/> Section 2.3) message.   If NA,
the TLV may appear as a secondary TLV in a DSO message that is included in a Fast Open message.</t>
  <t hangText='Status:'>
  IETF Document status (or “External” if not documented in an IETF document.</t>
  <t hangText='Reference:'>
  A stable reference to the document in which this TLV is defined.</t>
</list></t>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Any document defining a new TLV which lists a value of “OK” in the Fast Open or 0-RTT column
must include a threat analysis for the use of the TLV in the case of TCP Fast Open and in the
case of TLS 0-RTT.  See <xref target="zrtt"/> for details.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="zrtt" title="TCP Fast Open and TLS 0-RTT Considerations">

<t>DSO permits zero round-trip operation using TCP Fast Open <xref target="RFC7413"/> with TLS 1.3 <xref target="RFC8446"/>
0-RTT to reduce or eliminate round trips in session establishment.</t>

<t>A DSO message may or may not be permitted to be sent in a Fast Open message.  The definition for
each TLV that can be used as a primary TLV is required to state whether or not that TLV is
permitted in Fast Open messages.  Only response-requiring messages are ever permitted in
Fast Open messages, and only clients are permitted to send any DSO message in a Fast Open
message, unless there is an implicit session (see <xref target="establishment"/>).</t>

<t>For DSO messages that are permitted in Fast Open messages, a client MAY include one or more such
messages messages in a Fast Open message without having to wait for a DSO response to the first
DSO request message to confirm successful establishment of a DSO session.</t>

<t>However, unless there is an implicit session, a client MUST NOT send DSO unidirectional messages
until after a DSO Session has been mutually established.</t>

<t>Similarly, unless there is an implicit session, a server MUST NOT send DSO request messages
until it has received a response-requiring DSO request message from a client and transmitted a
successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first round-trip is completed
are idempotent, or are otherwise immune to any problems that could be result from the
inadvertent replay that can occur with zero round-trip operation.</t>

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.</t>

<t>If a new TLV is specified that does have this property, that TLV must be specified as not
permitted in 0-RTT messages.  This prevents work from being done until a round-trip has occurred
from the server to the client to verify that the source address of the packet is reachable.</t>

<t>Documents that define new TLVs must state whether each new TLV is permitted for use with TCP
Fast Open and 0-RTT.  Such documents must include a threat analysis in the security
considerations section for each TLV defined in the document that is permitted to be used for TCP
Fast Open and 0-RTT.  This threat analysis should be done based on the advice given in
<xref target="RFC8446"/> Section 2.3, 8 and Appendix E.5.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC1122;
&RFC7413;
&RFC8446;


    </references>



  </back>

<!-- ##markdown-source:
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
SDOL708LJsGPaL72NVLbs7QQRE6YfvADW7/28KqAmxsOrCttIc0xVgMUG+Uh
ConBVOolRcKyjHaj5w7b77sF0YTlT34YdGXtDzj3yElPv/mVhxB0LjSMitXn
H8dzJum5JAAo47m8yxlcfJKl7px7GpnXoiKpsKQLX8+rY7s8OytaUBOoFNh8
oECMFX4caUzVK2pp4A1fxbRP26mOmP0hOI8GpV6DOStuQj7+F53vjU0xPKSs
2km3UY8JzNFFNJloT/mrLtGcvHJEm5WN3DgjVVFj1rXbOswqZbdTOS1Goe9a
VVbzbAfzIWVSRvSUoC3ANO57kN7N3iWtuNe7nR9OziCfv/ygQ49IgGLWTzDR
2QotdbtUBWCCYRZHE9TAFldGVMn8AlFUflhiKIeWKG9WOhXzhrPDgHw4k5iy
y4MGjYDDPCTEJjPZtlFIYhdFkvdhBFnzbY4138atK+YvYOiHKRMzWzndhl0U
wp0x9ZOC56TskyW+rrRKXJLDV+l+xjelCUC9Ld7fnnVDK8hsf7OfYTsGmD59
QTHrvEH8EnS0Exrinr9ejdzehnsN5XZny6g9TtIsSc7U72y/z6zYkhRBlQLI
jFoFwgThGqpp4fmNveDbb/qPX6SXISWCs1XF+fGp32EoBS/3l6MepVS9Qb8t
GQAhKhBdXTrSXV3RqEW64IEZhXKRpEEIWipWL9cLrFR5X67qig2RstXaAQ46
UEnheyLv5YYwB1asLMH4XE99OXzjm7/j/LXU3VUs3cUppJvbZXl8u3o8O9pC
S8Ifb9NJ1A+nph4q8dGv4CiPV1vNWYZ9Ae0e/CGoYUkZpxKdQuN0IdU1g15Q
IOQf69uCdkKst3azBFLP2e2S964xJKynq5VOKDGEdA3TrqnxYXHdwm6TAife
tKE9quVqtA0yliOZl+6LTs6044T03RLNsDMDoQlrUEznaWAp1oMv1liKh4GB
SPOAuBNJYTjnsBNmQpzA16b9aRZqiE5xSXTgNY7SZNLLAsxeliqDW6uFU2HL
1mbhrVtS012ScsacnCmxgN4vcRTp3yPyLjOEHPaekB227icqJ4QILl9uKC9G
Y2b8dfR2d3NO9tM4LPuefX5cTBYiZ8kib6cUp3t5cn5+/IeT7PQZH3+qawhS
3vnq9cnZ2euzjIpmpIqBo6kSTvZzprC78QUqwCi1ehXl0UaC89DLBSNT5q+r
tmXt6TUeEnMRTmCbh21BegAP953Dy7nMq568COyyQInrtCeXddkbTRO84v7F
ZCjMb3bZHxJvCImF6GoY+oP7S5tZUm7ugm/ubi43aVUmm+49bcziSnIlO2Vm
RiWX25rcg35qm21TyzxJqTRnaJYhmaXGecg3TBl2R5OHSQbWPV6dhrL7DgEM
zHz8Aj/GWpxPQbO/TJJJnU+T2ZG4OH35Jtt/xFoveY7RYMArBGjJiQjivsQQ
sDtCkrR08ec3J69Ow746MUn4HRBNqx5hMXa0cPkbqtrCFREok0rhB2gXcwqw
TMyzRTdbmtIx6KIwKZTWWFSZglJsUw5VVAYO5w36JvrDTIzMSRWV0TxS25Fr
D/4+xn8g2Ep2qusuZnujjNAuHvzH/0rALnjso6MDURhcEVafmOl9i6s0y8NI
HETi8SwkhSw540L2wQy8Y32djaeZCXbfgNm4XlVu0VeW+rhV8se6QpxNfExk
TgSsaOv45kn40Tmxo+c7ar3sHWtS91iiMQStrbBKWPaU66q6NxQ/TppsVdzO
N5b/YRTt7Ev0e6EhtiI/gUR/2UiLZeB5pJlLlRMeM0GOxG3ck3Tg8u7ljVLa
RYUTFaHD/b/iOCWmVoiJvXX/3BiOkdyztrdYLYKBTVTBPQ2cUqZSx279sMHa
b82ESvMDyFmQJhld3GoMZlnDZ2SOYKCBrsgnnqyL8voGDsuqXvYMSanhSh7k
FPI68RPqAmOy6qkLrzjLQcguFYsLhO0kduhZmOK6dllUZt7g9qrvt5dZTplB
yKGwrWXNJWSYc7hvyi+my9Xr1UGICAJX5FfWI9OxjV8e/9kZs5qYhv4kmlFa
Iou6D1KyY+sKNRrKo8m2kQNt5+zhoTyGMTiaIbMKraLjy8PML75eZgrT4oRg
9NI4KVl92WoxiNZ++zd2Loaw82rumscxr9PKe9TtQrkua2JU9ExxdgAHP9Ff
IMkXTXTYTLbvwchvQiabEDqbMOxx2KZHnEtBL+sRcgo/CSZGIoF2FfAEKb0z
A6mS0u9FSf60HaebSZm3wQI47q0qy6Ig0VX42JubbVc3S7Zk6NXoQBw0Xtxo
953Fazq+w5apF8XBFXqiHExq5NgB7bZ0m3/CoSpQ9qsMOujsuGTmtHoZFptR
ZgF7uDjtMR2+be4pDYB8xnolbulcN1TozJkJjKCXlmdKbDNJRsAzG6RiEDeu
F/vQ8cU95jGzSA1vrOBzvgmIv+NfV1CdS4lOpc8qBv1RFBgzEFiom3dlSyic
1CZRmRB/hQxX2BRlUarqKRMjI1WPhng2DGpRaC3OCnIVwcWOtTaWelBWSd5r
Gg0Gra9ST48AV1iiEUPEcWCR59pIYDsaSiyAYVcpCRthgoKhFmbXiLp954Sy
zoSem/UlinC0IGhGXsf16aSsRGMiZrq7I1fx16MbDkbJz0MKIUUFmXO1OoyZ
UjxbHZ3k5H1RCayDm/2s9gsgQrM+GxfBkHeNGrKbQC/GS6GY46WMFGc4Dglc
Gc5conWF7vxZNStXBIGDFTs88YGc7WOdkwP3Iekh+KsD6jNNPVwT39oCVXwK
K8EQiruJhcwIA6iqtGaxYBrDKCTmjJSHs+YybVWDGtxDWPMi5xo8MGzL2d1L
tQxFlWYXUYbE9HEfBkH/2Z4bY48YR2OgcjRwtmQFzDedSmO0cqUa4lwTq9Eb
tMefuvDaXjdC5i9JeDhBtO3AN0UQpfRWk595t7aLQFJuawVCpV593q80BonK
ZLqqbvRmLxB9dhR7bgk76gsZQi8JjyG8bvazJF/27pAGTspIyOuoO9oTLGV0
aDt+Qr8NPfu/K8RI3WT75RV9yBkuMIUDqUtiH3FuRfdKNTwW7xGdveWSBrFL
ZMrNJGydqqtkS/VOzOXrsgeLfpftlQgjWluKIkDm3xw+mZlpx6obphnRF/Th
5Xo1K+iwwsJAg7o4fXky/vn49EL01jrVuhzuWuTPe+1Iyhpb90PQAPrUHSau
GB8/nj/LzqnGHnSbN6eZxmDy6U1ZvOetc2U54fz1/35x+uoPJ2d272ltDmta
yRmgcUXF/qMmX1jK3AnyZENmkPFpiropDks8IBJ/wYsMTFi8MSk7ruAxWNZZ
HfmqJJFKdxCBToHMRxWJqys4uY8Qhgw2WGp10NsnkLUoQ2Fo04BikC6Ct6Bh
WK/QS4ToDDgfn+StyLwo3+Cix3twxCG44N4s6azqxUL8iHl+q6/VNZn/doPU
CN2Z29JFc4zUcjhhaPdQUBvsEYFnFNNzgBYyEPvebwh3kSW2i6qDViQoEgQ0
V+birUw3Uf01G1wqj8RQP37NmO+IaCN+7VuYAq69YkOGKmk5Us+GWFy6UKyH
mDqi9NbeBaJlbbdh5p+jwU8B5YVxGO4rF2XSXRP2HMbHHqvWBu3NrFR1WRms
WsRULFasTLoB3OB7d3u+YVww7FF2wc3n7mWBQ8UqKUQp/PiFIJRqGEu1Gym+
J4uhvdkCLNoH00xByi3bVxsDoBNKfbtqCPJ3kxieXVfz8p17o/ei8fVLihgn
RIuvSaBZ9d/SLQctG9zSFeUuRPQABwfZ+XoAoJQ8CQnAl4dMze4FmUr7dVkE
D5uqVYCLUnWnU3XEOZROS73kagiG4ZS9drPA046zxpFH6tl8/vrsJdhC+nYx
lsjOzj73v6OhP3GYQ/noAfx5CH8ewZ9v4M9j+PMt/PkO/ny/7Tkd5p/G4/Fv
+qMD/bJ9HTHeuWOxv/z+M/rTGc9KTkJvlv+jMwP6/8/is38nGgkzZ/vKM8hQ
B38nGg3OSE7VP9CM5Hj/A81I5Mw/0Izu/5/N6OsdD6FQfIalezv++/o+A93n
v69/PxrZvfsF3WJ/5DvyOcvssuLwnzomP37Bdyjnq+0Ec0L57yQZ36u6+e6S
mcSRBtwvw0OEOESO74efIbID3VkU3h7FSF30hmrkzGp02DVBEUzzgUmWbYJd
xIFqFxt+LpbJcr1akuVKxb4wFzdbMx6TmKtF8RiOL04OXapU0VTGcGGPIDhV
gZZitZ8SHxXmzKfQoO1UJims/gVUmoK9e7aBOQlScSyvIG/vFCNXCOA/6bap
GBxEi9JAR+x1IEkKoLeWGmN8DluqNaTybrIzSvIlHIkrNF7vGGSB1WMIjrgh
Jy5a4bzHXnv5dVBlJcKEGkIOuSUHYXI0azkBLjmuHFgiKe6xqi2iW1GXLQ2+
5sbfsUdCID7p5qIYIIbh3UsAJMkDYA9DurhJeFUz3Ebem+Al4yhSNgMb0mqt
u54NoPXhFO+Yl4AiD5J915zRSRmBvgQHSPzm4lwia3aRzxkhx0YlqdMSZkPZ
BnKxeaOFMq3va6hMwnZ5tTOnkY2JKGEFvMlfh6Con/3z4cEAvpPqzfSxY15O
PPJz2TmHdPIdCODd88OUSpzeEea8DU8Q/YjDE+wjWO2YB79lx/0huWFkrC/N
1pC0Jsb/7/3QYS91d41xlZSzkD8nv2V2mCUj+zmJ5tK2cfrmU2dkeIDOlHmz
eqzLPsFpubxnrluHmy/SbU/M4JsalYDUCmZCyw//B+5/t/R1Xa2l54UPanIg
Ez6kLO+hnGAu4nLEYjBqeceA6sAZa6mNSoPos1wKNAvkaEWYBjFitx1gPn+Z
S/viNK9ELHG8y0dJ1CsLQ3VuRuLSOypw/Os8Cre4gvgKidGISZIkzp3fMA0e
mxgREgWzEYESYfjO6mQMNX8UtioY2wiwxSHAe9qUc954IXfWIfeFjcZnlN6+
7UBIHBvFjVCWXe9IfPo5FhD/kj3FRoK/ZC8r7DZaTuGvz4qoCvwSfhnjf0/4
f+g/91f8F4xxCL/SSOwvMWzreg3EhAZYHf7kCB5Ul8Uv6qDio4hfP4APz0/O
fnp+fPoC/yqlN5x9gy53HnmQ9OKszbXbZqxDlyAJvuARTZnSO3+hUVwOEbwC
H/kGvjk7ef72/ORZsqpZMZ1bRfqynpcR+J9+ZwmKR0c8tqSg/eJ1ly8bDuBt
libdY+gP3x/eNrZxIHzey86T6EKX2XyjwQ3qVqhCAsN/HmigQL2n6B41ZDYJ
CLGyjh0hSc3W4KU4QsV1GRbYIEB+gQlD4r9KG3e5VpUam8TfNfpD41R+G07Q
N92yrFgK9crAJID46KVaYTCs+TxKj7pJDoh56hMg8xg/FfS7aLap5fnxi1lT
I3yMVOzf1yFKnIYpMnjGud/ZLPXdlU0SAdMbAd86Ct3mabHT0VANBS7u48d2
/p4fETyhz1enUlXAV34QeWJ4pINS+Dnv6Jd54Mr33IHYIwn46xAcfXKlVu4M
gXZus0VcKwYtwOKCqFh55TOMKFbI54pPTxeH8bMgQn3q50nsU/dGer8i0eGO
k7Z1Vu5BMSOs/VrlsdHtEIlT5Mhmz4Dq8PjNy0Up+ay3Yl1oGWQXVGySvYJD
0x+u3+6utTxj0arwVEbh03DVlTJz0Jh/KSktTdpIxFi6c8vhe5Vpq5o7A1KS
vm1ZvLBbbPjCj9J1uGJAAqZburHs6IiIx8RpwTdb0ca5wgJNwsVC3x6Zwlas
NtgnkClzaUkmdEubQ2Fk1lZFSciYpivQOXnS8EosUl9sopQLcidG0xWtUNwe
hBfpG9wqK90vHDqBSGSgdiyxQvQVKmyERz99YrgYpLOjJ+IN3mNDe7tkV7jQ
OkhOlyaTw+Tzhabp+HvWVbknYR2scBk4qMI9Og9W1WQinT0lXwWLx61GUv+G
QDXQQ/OFcobVAVfxKuj57mrN670hKZqSLXC71uZ+B2WQrsGlgFkhr5HtfrTs
59aVCskldSk1IWf/tC/NUDqiam8L0m2ztwVKdx9bR5ZXGrkb8S1WT8F40mB+
p9DEZiZZCeip3PZW1G/4/kAEpnKZG0g6mQm44KQxKqMsmMAJDkqma5uNhCwc
jm+HaWltHvU6oqGlAdhNeX0zVsg7QwAFim+7rPSwbr+FpBvsNvQVwdjhvnbG
vJLMIk1fkK5Wm4Jxfcwft0Xm2jWR8iHSBkrL+cbN462BeO6aDXcL5W5QG4vq
I9PF23vEHcwX9XtuVS4au2/E4DHvuJst7s6cUrN8fXrBxTiEfKJIBbg+apkF
2vm6nbgM8J7fMulbSkpda8VJoyCI9Irq4A/cfjkpJiNm6INMcPnW7XW9rfBG
fkDG50iTgkwFG/JVjobdPENOAszEFx8JNWuIbpq4z9WmL6LSDadLVpz4W51r
Fzeu3YzB7+SK0rX1/b7b8i6WHnFhPjo88RLsYPJxBpHmyd8Vpjd0WHHiqSup
S9OAzGIx+/tSsesHsfaekvxZ9aQ0FUdYa80ZbXBaNsV2tneyabbAD1RXA1dV
MsXw2b6wXefXv5fYfg9PDPVSwFq+vdABqWTLnXzVeu64XP8qpaMmkYceQSrv
TE2K6Kz09ZYxT2SwkPAx6fuSltRv6LZbdCokdCKTdYGht8B8DlJytqEFNgMc
r2tkIyACl8kDkkvmC9bT+BJVKuQ+kiWRn0uRjv0O992WmBZTksoT+D0KIcQG
ec8IL+7HlKvSWsJ7vuvYd6AEHcH81WL1eAY24B3lcsuA4H9frlpyY5M9vjts
Jribl5Z+RoBQbSwUra/6I8h08TFO2vd3Bes7CSmwSN7AGm0nuiG54Z1xnFlW
cN1gIQwql/vUTHGK9jrB5Rra8gNyh4qOoH2+9FWBXtXbvnhDq4AL3KGlkfR+
2cT1XTd03MeQ7mP2mfsYuvvYI9e8rN7duZUh3cruILv20VPbqFFb3Yqrtrg7
ampuJpRJ5+SzQRRf899wR3o2ZNWLoWqB2pjYlDHqqtTEsaMc71HEekif3htl
SnsyljD7kPt10/uRP9PereyJ4+6s6DHj9vYIhaMapU7TX0kK5ahT70jjUVR1
qo7aTfa7Rjwi0BB67kZ8y3bu6QRj0DkYm4FWtKKIIe1pCaxBispHq+hoYn7e
qR422KRkQPPqqA1dp9OKHVRdFU4bgA00Zjnt9/YeeG7U10JDf8kl96BuuC61
wlPg2niSa2PWtaGYrP5qRYOj5po5CbuLqdn/8SgwMLN0z1J/U/TSXCmaL3tl
PzuV579K1mJU7nb893fN7cIJvTh59YeLP/6jzOhe/90322z87PjieNdA/5DZ
ZsolDPJ69HiMtse6asprPnxtcS2hTW3Lun9ZXmMRbZlXB9zJVhrPXjNwUGJY
aOKxgl1ztATdj/T56fEr9jdRBIuCiGfFdQn3tqj/wjC/7+waMGgo8k0tduto
C+EOynvxr4SqBxMbY6QptuljN+SE6sXJ2EK8fxSmWNlSoUJAuS0cLTfG4Kuq
XuaYHLd3Oa8v9yK4a9L0w0JSoE2g76YfoCqoRodEYDr5np8gRBOv8XK0lB42
WtNmBQ1JfWdj+gmN4bQPbjVdcDiHm8r8LuGd4XhOGod3aXG1+LK1BdfvEbjq
xq6ycT9jLJxGO9UFxHtKyq+gQsAy0yFPay8aoD5AUaOCc+C7FjrcjDimSiQN
w3kjRcfjnXzmr9fkB6NtuTN+xhpECWl5IjnZNlm38Zw5Z4acv+oCCT79hue0
xQ2ebXWDw++0AmQSXvc89NYsfuWIMXIh/3zhhBqrdWHAOdCH8JkTrKLgC3Xe
2vOjayA9tCB1GmljOK0Xl1oO6yP5FMz15q3mNvrAk8SpEYkzxvktBrVFvy20
5T0HkDSWGm5FrdIwoSQQpvkj2xoK+sJjOUO9ZCzvFRMnazzszsuRKKWmuzo/
h2YI5KvVpu83rVfCozFdS5biQguuoMdSCpKUr7At5ctq8K8KTl7uH5i7oU5S
R1gUu2+dT4734uMX3k/HeGRD9PfETeDcEj9fIr+0CE9zXd1B3O9i++XJNnKh
XDE7EL9h31WplfNMRfvtVqjBYFCD0QXJDNwZwRyDw3mJ2xY7McLtSj74dfS7
k3ge3miQevdKNvx8B6s7gp+dh9HLkux4j73v2NHLC72EcJ3rbdTbrdANnVp0
oZPwNnKkwbjMLAJj6CVLkXdRrNBQJ6T0ajZno70cYBWUIRhk79b6eXdcuTW9
dAvzADHCIDGGKTC87HDvZWf9ZYdfu2zzQ2HHOUz8xJdfnJ/+ASmiuExaZZRG
gzh6kTg+gmTcxzPL6BE6uJSEyzW7vRiTvBtX60o4FlVcaZNDiVJqh9SG+ZG+
gFyNCp5yVafwaqOEd13yVxMoLMgXrPUorOX64egmuvvxcPgsho5bnVJ3ZDqa
t2ON/Aj+5ruHh58+sWuJAEqwEyEtUepeQtlpFd1zMI0Cgg5b06tMEoKyHcuO
AnxLXlECIeRyjGy/19x5NK0Whg3/0u83so7sZoytJB+HmC4zG+AErdZNWV6V
ZML/C2g2scRVzrzVTk3U3FBxFChbnM36JAgTTFNoawGiqWwoKbeYSO8ETA8g
kSB5i2i0UiJaw9dCMrZ2PfeMksUUqFHMiKQMGgc53+M6MYf40tCjoL3DbjhX
mWPGEqXGQb/6Sqfy1Vex5TLROtgRWfndaPQEf/WV+K7hl2jBMUQ2lXPxhIKq
Ybc3NfWe1AZEKdbhlcsbIRSGpIv5+esQzyE5alvpLxZTXFBppqzW7E9rNMOt
sPwR9VlzVeY4wFvqgC6fPzh6+BhjUTHVLEkU4BV0JZ1SAnl7LhlQ9rNE0ae5
dkRNR30fhQGcDgc8DQ/elJR5v7aU3s9qAIoB0a++yqsN7FNEjJQUjBRPbD81
3urLBjaOK40CM+U2Aat2V8QEMgWe62gwJGrhmcGXC9HIXXLH+u5dhdFTyX+r
Jm6gCAo+AizgU2s515rkoVRoforhmG76hfnsFTlB63hi/pcYvC6PIgzlpe7W
2e7oIW8GZOLCkPpGmAqiprnMWh+16SUplCJmbZ1xjZzlpDlxYloAZU8oltal
R3ZfekjbhQFTRWa0pbRwFCtUCoatznu5RRp6uPeEUFHYlsDhwCwCF2AgZlfM
HrkrKQ5I9RPpRoM1O3SmErz4bLsRx5SxZZvWGhsxxoZp4f39Xmpwob/6pTzt
7RzRzZTp78JdpE/Pz5aU6sgXaEz25ptk/GN0Fk0YK9JkOKjYBzuEPyhwzoiz
/wiLj9pJJWguYPzBv2u8Lmcyat4ZlTpVBS5foQaQnYy6eD+YVxyXclkQ+oyo
B9RWJ4SfeZsGzwUO0J+gZLSJrNAe5fjNGKdrUJgeI8dSkgYZPPSSK0XoFIS7
02ybiHWYD+K8Y08ZUOz0TcZRdm9r6SgdctI6A35xC0pHfZutSS+IxpRfoS5k
NmjlCfxP2XR3hHRKLdFtb1YFHhP00QJJbK5Nuh1bxLgI+X4+qk9DSkl8/wWw
kwWBVzmZA5kVhrspK4Pfie1nDESJMheDYmcKvBPtDNUidriXM44cpSfc9UFY
FSd8/Oa0MebGymXt+8mOJu4HfG/mI717rhJ3YP49D4zeUcDj7Q0wFV7v+7GZ
W9lqKivrfAyH3YifZ4wNsmEX9zCis9ljyLADhZyLuJVlkvcqy5aSFNScFVzO
qTC/jjEQEBnLXPJVI54O7wLwplIQXOhWEhjYhIjk7yp6ce6BAN4irbsUtZ7w
XTXAkZhMU/PhDpx3JPo13PMo5AV0lnks3MljFmnTdgMkWxH/EQ0A/Mf0ndQa
2BNlM12zRgqkv73ZmBeuRGi2Nk+9IO6qeZXDKuFMFxIXq+zfOJIEMePz7E1H
dw0GXjiZiV3wts0iWBiYj3Xyr74CEw00efOg4ty3NGxSQemkvOs338YIB2F+
Y/McayA+Mre9POKbv5SVM9lsso3MVvKq1ZQpO8ZtbK7V3jhENkkdsZ2Ho0J1
K2anl9VVkXPhCmVYkT3u1Z24cGreWlOlsPKAW1rGqMYkIUGkxHoVNLQFxMTt
0kRz+TH9Bc3juJq/8zyQp7S6nl7YY6l4E6rGKgUiMeIbk9f3u/CfB2lcjcoQ
gIcvy+s1oTinUbYYoElibBfcTGRQTB59S/M1y4SHYxToHLv4Ec+F/vdNdvjh
EP47GsP/Pof/HLrvuK3Hwu/DBROoww4PeSRDHtmQ0tQQhhTiDA3JO0Gx4jEK
PuJ1ePbocazCb1qqwHZ2PMv90FNN615WVlRBUGH0rwiC8mCddkx3tlPYcYNN
7mOfJjUNrsUIeeL8jFvBR9Q845vcwHU0bBe7dA7RLuxLU6WBcni9XVbFvHiP
9BxGcPG568p22IeexRlZDrQ1I714cgPjTE4KuiED5a5rzmASL3QE7XyDmqv6
LNiRlp4reKkCAXFWRhIiDbtC3z5W6uaq8VznLflbEZI1QZ73FkSi1LySweyB
wP7dSFglEToFbBQDi5aGuxyQ6uEROzx2I6LgE+wC6eBKziZENCkWm1IbLkWI
FGzsjlBfKW4iNbB33BwrtkZ/OxAQIkME19ndBkJRIraRIoI8xtIbg+1ZgebT
2IjunhkNWNGBaCUWWYdawzFn1wg8gmW5XexhWlG8PdyrU1dCs0zqaX0DEO+s
F7SkkGc3myUyQ0uNHPO2BQKI2kkoA9RvsSWN+iq2B3HjukZZ+FZF/whWSKK0
NQ4jIicanw5ym7OFRdXbq7J5x+1yGuoNST/Di9D/8i+YgusbM/FADWjocLnD
5sCbSu1/y8sXmGQCRbZsnyYpS9oGkSS4EraH+/0aVT5qB51qJLEC9YLAlqkU
02axJnVb/jWT8PFjksfwKUHPLWKLbdoWbo/ZHaSZZG/AzEGacfGVdERDlS22
PUommnKYqroeXG4rmUybIGEBX2rYvke3DnHEzLqjDd3Pzr/qmN46ePQ7/EY0
brLwKpVIjQKduPTMHUBqHbPL7BK4E7q4Ow2yvtMqFQze0WwgDWVduc401kCJ
wU9GHQGlPbjMzqFcTCuxl8s2tjzSpH7XjREHkEyNdAi9abpd6Gkzh/uVpt4x
bbWI+W83dc3V8YWITXdL00UUn+L+EYi90XmOLYkFhYyA6FK0lyI5ixLD1WDs
kKCpsAtsUBtPJsvMF2IXlE76jJDWGTGgRr0velPFCSYGc7wYNbA9OHHUiiPy
DCHCAC18IXRCe1GXTdRbQLS3pOwzloQejjCwUSmU3gBQ1KjXM8eAo2DVb5cC
tSQtVHsz6TvWOy25sDFivm5rzBDgKCo3DujMc5Idx7FjfieGHZyGGpWxXpDN
7ia1Yks0TShHU51s1oTGNkb0z+AH4iA4CliGVSJWpyEkwaJb4Y6PTVyvraBX
xXDbSvoNcQkpYrcEnFQyshj6HS0MRbEkwkIYPIDYhsa6LlhvKg1nmc3tg1pE
3xAh1GEhHJjU2uMhUtP6b+XyawhDgzkd1MngyuTcaRnomkZLGebPEP3IkaXv
g2nmm0aop0/bD2YCNdA1L1g6D846hkLPVFiPT60KL+JcPWWQUm3nMnX/JFgk
h2LCh7rfMMjaQQ30dBpFNBFgkGJ+paVmqL4PWS4NN7cptSaNtHfMlqZACa/X
egBuGUDBdnbXgzbbcVRREb8fjOrQIJ2KwBeDk8TMkyhHR3yQ5HIRUF1u6p1a
rdZGp5NrnzRD5z6WteDHiFE9aCYKlATFDoOcbPIyltz92eo2rVMmSirqy6Zt
hxDroVwBh3CnxiZwE8uIOurvPHrRLjhctS2TGcrJZp0A3bWhK4bQyJP+AJTM
jYzipuyehCN1VV6vRfCioUDLmLGOr54TjtPgvDBc2R1ZHOgwEVZs6KeCRqGV
9ahxqezSHp2wnytrEOSQPKxLiNnpzgKsfScPPp4gY+acKIH9z7nHF95CTpYL
IvH7QlKXIu3JKxbHl3ijtMCwgTMvCNy1G9IWVy4kqLH3ngmSxvhCapfiL7ZD
KhuaReweFfZ1j26AyrF3nQ9kzTS8rXCFlJd8ECsWzhxop4Vi+6vKXFGSQ5f0
pEHHnRR5935Nk9AIO7/SOgGyHd05H/ata5ZlKolt2ZeClYEzf18Wtz5PXncV
d4tYmCKdFkxIi038u3/tOsz0FGeWSarPW5z9bPviDE07jgkPd10ptzBmweeI
HFt2DybX5osSFPPNdM5ZIBcYsMdE/bl+/IkuTv8LuTr5kiztH9ZkxRQAbrLS
10KTBr10L0QdS4Uc5QXm1OJ5w/0V44HOKbIkWBAW9AnUeDmbUnLkLFVBFaom
OLQBQhIAqRtZQoJPdGtEJZd7z1qxibGEoCp5HadCyMUU08W3uMeGdHUV3ycG
PoeXWmlr5CxxkNnBzYMCgfY+D/ySdfIAuepno/LOR3KDvK1WGwQeXPRmojak
pFPrlDCFXGz7x5MHk6PJkcUCXp2PUUMYYzA01YgksY/6YSYdghjmnk4lKLeo
a0dFzfPRhXbvjB325JNP3MtZ/qkQmARR1DT1lPW725ioICM+CXzOuv1Box8x
5vCRqgMDT7LwI4Ys3Tt8fZK1qsLAIyWj4b/SlpGg5Nq43HUXGYRLEZMljLJt
85Oyw0X+oVysF6yemLMy5P4MJRAztCAOmohC1bWPg7b4IsdQvHf0aqb7U+wk
Yw6N1qoItX5uzPnUVmtgZX3q9lZmaeFBH8GkoFuUmfH4JE0KIjQMrbVrjdD7
ZGbtMM+4uDZbff0dUC0F4UxX7P/BHSdLClHKfHO7oVVK5m2CvsxOg/6rXHGN
3Pxgfq7a3a+g3HV9bmBQOQyizfV/L2kRTUgdEapnaEM0AUTczV+h53/hUFeN
oKWS5CCeNFJPNS2HrCTJWA+51qWRyqG7m/f4d+RRylyNg+lqwALX1wg2i8PN
wTqYC7Svo4LixziQNGVs63iryjpLPnSMq5MzT6jVB7TBWwzNsJCg5DxJ3PRJ
A05xjpuXB/s6xxki26hvRrR7g2ZRgGXZjQEEqDwzynKWRdKw3CPCoB3YA/Y5
VhbazmPKhX0mC8Jk2TCT3S29wqB3j9maW18zRbrbOPj7yNaRXWisdiuDaM6A
t58GzitFOxmtOnp9182aWi03hYuCDR//7ec9OMHJee9o+dyySep0HG9PjlBq
KYziyHnczIAcEAdc6gH/pKafCKGEXuNmvTJb2mVfwOkqZ7i6fEEI0HhChF9h
ijGfz+/Lq+ML7qIB5uAtuvIIroU13Zo8bauBNBXzvW2kkQ2JC993kiZqiSvU
e90VppivDe6Qqrach049gCr9xQex75GkGHqrskAtUPm0zoqrHOM1HLG15CZr
Og5rP/pGrkN1OCdPjPg+0btIVCplhBgNkhtGM2V1K4lY8t3TN28zbOWbug+5
gfvpwN3fBExDoNlo33XKq+Qu1Lw+2Tg6axzgtQ7NKJKo7WUBe+YLXPZdPQx8
rBrDKKqtI8l3g7+klWtFO50cIC8h8pTRadVEb0Oyg2Zso0eZ+xgYU+dbNlQG
t5bg7oDjq0bUbHDLuaQnpBOEVHRxD27gDZI/gqTkT2E1HJbHPV2uarqVRkM6
6cqyDqgng9ZNRknoJyalUIQIK1xGAkTcCR0bimqPgIOsJg02iIqdCClfdiYk
Ve0s8eCIF1JKr3M3Vw3po6qnaRgKB7S86ZEruspRyyvrGcfAruBo3qyrGY69
gCNdyoHJBIPW8mWkD/HQ/qy4YTaRChbR7e9B7wl+Xh3yipsxYXGOaQ4VWdiM
9Ba+14zS82PX7/bZdJewa0K0686HlHii3e7vi1v4H6K/1sF9+SwMHLPkZ6rt
IDKZUI+vR9d+7KKXYpVUdGEgDPMaRLB0e7o1UllT1dEOuRJIFcNwi5lYLBmu
8pWqS3aVD2j8KRoktT+qNEyt2fqc3Kv9oNGQsex8lpK/yrYN/4qpGrGSNY2a
kfPMoBU5aa740BbU8igeYXxRjHCkkUGKivUiNnuqj+1RSkpp0rLXSU89oNav
jjJkfGQH7bXTuGrxGZCDikcj8kh3CylCjgmmQ9qXCrWoEV/m81zLxVF04gBX
QeUdn0s0i7GCVrqFr5ddnaOxjbCHVRliJpLFex21mWTHabXSJUhK7TQdeXeZ
Tym1Bo8TJjvDVqJeMMgOgetvF1giwLe9s66c+j0cSU90bXQDoP4VdFUEKaxO
vqRJShKtE3eCa6ZdV4Z8j01YRHvpLL6Z5qspXuaLekWgtfV6NZXqV102dwvp
rZrSm4nJ3ZpBvCyWrcWvk71ClVqqkAtxgsBhcLd5SILGOnNXjMZRF/ZKDtCB
40ekuaPVailQT6WF/KDS5tj6k2WwxMSbL5stLL1CjVgqKUQ/kZ6Y14jQ67rW
l7O5T+VheyrvGKYuaS2YiZb+kDnGR+92zAtBsXRamIFC25FKI+oqvhG+y71C
gCFyuI1WhWEr2HSTHisaMOHqowiyYN3TN8Fj4AuPRjB1161syJnmQGTSdInr
FVyL3A5K8yTyNsmigjmP/AKz2Xql+4HueJ937d82RFS2RQSiM1ofGJoQc+Ug
g9t32UiJf80OhJX2tKOMUhO/Ko+r4fc7VnI5II4J4tp/7Spvy+lWSzlZ68PD
obUSROwVrkG+ZFzxu0cF5iQrnu7tZIAg5Mt+M/l8iEAVH89As2JeVpTUwKbe
tnRTH/EQdwOrUownm+hYMk2bWHrKtNMLaHj/SfAEw9nhNKZWLQ0/EaRhC79o
KLrJoiV2o9xhfnPWhELn7Xhwq30Xvcls6GX3MfR2uZl3udSJFqz3BdP71Fkw
W5tqw17PtbiCh9cWpHAHDRdVJRMP9lC2l4s2yK3yE3sYVLXpK0zBGhRvOxId
Z4V5JwIFcq5Wkn6TpAqCOTPDfCg2csZJ/G8S/siui+6A8h5VPCm9jz4Z9nFw
roy4QUQ3uFyvZkWV+JsYDfiqXg3uG7s25UCiH3JWTlttUCASoZXUyEjGPqnC
vlgCA4BzUgMUYcBlX7kEoLJ0UPeEMMGB6/ol1FozdFKlcokGoQ4PAlVwPOgr
EPwXgfhJHBZyQ4atrn4jZeeqJ0sdtH3O3Ufvd42CpecNUX/RrGO/1UkCn4bn
g2aweSNbS2d5ii63PutqMvRDFYlOjZzPuxLUdBcZWxUOygSwm2IoUCPHonfD
UFCukJQcweyZ9JN/ZSO2DdspCQqlU2wwQZFkkahKw0to07SfMLR60/nSdfsF
7WKmww/P5T/YOAHeatC+o45eG+oRFrYzGx21nRqks/ot9D9hnCC24mm6oGdU
rSHdaa+3IZ3TFTUEUUY418JdyJy89b5UXW1gnF4y0PDFxFKEm/LcduPaepST
YIhEKuf56hpF/ldfESELxC3qC5vYxVPRNEStTePPZRNsn06y/Qf/z8MH4weJ
r23EKD8fygWfpkffT77NZvmmOehY2nHgU71QP35h180OU3sgxMCJTQvCn+j5
m6+CQ031iRodgY4R1XIGnHNZfyjMv9VSeOEaHoCNblgH5DBDc6C9uz07poXI
7NoQDwYWD1xtYtwh3C/uwJU+EQdgwae1IMVJYh1k/CVjoNZZN+qzqaMtLQak
hfmuOq0D8Y4f2JuTD8tytfn1BsbArv0aA0NTeRyUGHVjMAtM8qe6+mjfymgp
F3+q2BrbI/6jkKTJDx/PXmLGr1cwVa/cFkFYdQoH0WTlnW9iBphBoVyu1uiY
GBkFiXPEgtSWLQmhgGdvgOhUCKFxzIGMwnVlHtHEBkHHc9VYaFsuAbhlOFEu
xG4vDol2OIYuq8lbk2i/zfC7iweHDb/fmQfTKo77GGvbC6hSc21AO+8f5Kid
b6PGNu1cPIH4TT3H4oVeaDtobDtL9fHtghv2fj0tEgVdVXM4AKSNo3RcwM21
wPourgCqtTeV09A13drSGYrUSbcl5yO6aDHrSsBM1BO934cQ61+dB4JoQDa+
puDuzg0JrlYxNin1PX9ioX/jbhTJlsKcYo8eGOmfbmSTzbro5mlvYIsCa96g
qLjTGi5cCgggm/twObfYEpBz+JyHnm9ssvIeq8gL2ulQ015l7wvyVPurNfNX
64g8sQg9Qu474bswlA+lG52YjX2a96tEj0GxgBtx2lukWxv3ccVqIUpMwJRz
ymiosHrHtghYlfMwmDBa70UfKfRL7herZFrm7c2I9t+WymdvcKUeWqpvKQ9k
mKC1AtNX8WmMNsuXZLViYS3sWVG9L1d1xQ2LzX3KqBTU/PY9Ize9f4ThaorW
Crzk90ffffpE6kjMY7RkSaMqa8f2W/R8lzNRiGlUfYU+cTmvp+9GQTAltRl7
rv6xstPMfTtpSXxaGSftogRuhc6D2W8/muyXDT07efr65cuTV89OnvnryArJ
+T16RsmCwDqMAXkHB+/xIYqzdVsocszAYwI91EjitXqVSeTMN+SMlprwq5ix
qVd9ohBsu/XbmOnFs+81F+hrx3Y6SSQlajGXwNVW5Xl6coFmHLIFx/h+RKo/
FZvizQqF6DRuatgz9ZQRo63mHcTqWATtHkOsgiB2ajpiWVgLiwcZrBV24JFS
WBKHv3n43QPCRGV40G++JWdWtPxIZLOnaOe9iN9aimZhDiQpMos8MMk6FTn7
aRU+pkdUsK2wXvjkYLteggBKh8AvmiHId3EQlHcqZkNMjdiErvXJrUuqXKAM
WoFxJhAjyoeJ+EUU0NqR75odUzq7WLvYPL3APmhxcVKLKxB0wF/EH1hym2Qd
vC8s5IdnE+ZPjpeqXdWkA+QwQyrDhit9yXCs4nKw1Xn0XBrvARFnFGjUouKm
3BqeSwOv+PxfgeRS3TJYgx5+lLtElVeUPnCPpeXPihTDaHxbfK3qvPssz90u
t51I1a2sEkMMLdXDiL/FGwodXI2+bSKtVVjp3/amMPimbDc4iI8Ufg4yyPHO
s/FbXUbi/LNLFbSTLTdp10vE2aeGWtN3KN455q/zHw0PJUoN4WP8v+BOGsrO
/bu4k8DeOecDE0txbSmx0jlJtItlf3POlZiBNk8Zp4PVr5mvDQQjPyno/XQQ
YiIN1T/X02luUf9VEXEZqNmfpJRbxVaCsJ+WMzacJ558lgySVPF16hgI/Fix
n7W9N/FZjViA3OSg5yqIqkJ0DJjj29IGcA4MCrdrIrJqxXlH4Yu3JboKMEKR
PCTNMzgPWjAb54TTgw/l0rpLU/G1oFJhOBFhx22Xm5VL2BKIPhExgnUI83oP
uj1eoKxiNbRdkdTJymLlnCFEsno2I8DnpuZ4aYVgs3MfmlRydsKjXiB92egt
IY3KJmk12zsJ6w3V71fOd59UTBgEAKZa4YG2X3FXUMEXoG5JcXFbo9gSxZql
wMeTGBBhMzCnGGS6Vt4O1gOtREgyGNGa8uXOaB3MBYIIVDJBS1W8FferpmzX
sudlZUhL7rTFUzYYmH4Swlfkh5afOHDViKcK20vRsfnGJd1S89emLRaB8uvX
nKVFwUkGv2hzKqef3OcNrgA9IurMN2FfvXCztWgOl2u5bJgfMIa4ypubEdFc
Vfods40AwoQ2enZ+cdCdYSnBQMYwz92xtPAaWQVFhXsVCGZnJvAk2GBB5ooT
odbgcWRbrwfcwVxka2flkqmwhNtMmKJb307CzI2XufHSqnMEY8L8g3QRVwjM
hvlVuE3rJTvIyScb7SLGywjpD1E3xVjZop6JkiSqS2fwYBlb70q+ZDhmrXwx
RJeRSLJrhc22t+WsURNAJstpFy61DewG8xYFdaDGMw5W1bUhSCfQ1OoLCYNa
BUOb+LigBrtVRookQMVLK5TIaxYdrox9oHrbsAjpRz3DUNRzKDmhW8r56aBL
EC7czmEQICKlWzGuO3HynPsomlOAY6NNpu2q3kdoJSmKj7eq3rQJeNTAeSIz
xbIqkRGsPR3ZusTNeDWK/7anz3ioE+3C8PELRjpJYKD6eJcdFYSuziZVQHKf
IkqFQGyWzWqEZJM2hpebe+CGRbgMysKdlZKGzK75dxxYF1C5OtFWFiWipVKH
p4Wgx+D/4bYz5CAVISn3I4ujC5PPlMzAWw2jbCkimdQqyd/o1rJcxJ41KF3f
1zpfG5ONkSXe3twMMnXcKzBFRMJi3wWviVwDd6MrsVFXJa5fQgSQVglsu3Tg
b2pF3uNyxo7R7rsfRu2FFQruxaQD+Blx+07TAXwPVnNqq7LEkAWSMhRyKr1O
juVMsVoYAmE3DXrpa9G0BoNI0bai5d8HBe1UyR//OVvBSuoFtr2lc8JV76Qn
OK2BTwdhAyRP5VyQT14WkI/Td4orQ2yAGEdNZBmsNotb03Ra20b+JAgzbEEA
B1Zk/KjXCkGhoWjkeKcPgR2RB4jvWDgl3jlEYWyqqTIfpTI07kEH/pqOa0HV
F+pF5BU0oTt/VsAQf4CkuiGwJkBgS0FuH5pzFw2sF5GlDP8KLW1jcX0/4xYY
rrqOYDetz9+5O330HnzpL2k58YZhpwgQ/tKKN2X6Yj5VqXkmKKCBnp91Z9rP
muEl9ia025FCzpOhhdkhuzScEL6SczP0TxNAQXMaDZNpwO1j1oQ/15/j9qHe
n69dvVtEwILLz6XOfwpaQIXyOCdwMEUmkgw7DHLIMofXIDa8WHy+1NAAPdH5
PadriphY3Uh1tH2YEOltKq3YMACUr1ZktCbOHd5pVNKGKBsScJtJDwmk0waS
VV8wbqi7gKuWTPq6qP4XWOylyDQWNl5EtJOdJznoQmh1TZpMn6TZEREsmiqe
NAmj61QRJsIBEGm7LMNPNbpGMCbF0rWQu08sRvQaTlSbMuAVDIo/uFQwEs2y
ttq37JyAaXX3Y0l3rCULivtH3n57AG8QRKNmaDDurMf1BU0nvcbn7vEVhCqg
y2DG7EezdzFAkKAw9xOtwwAsVWbmoyvaV+7xYEOp14VhusJWnK7G2eLU5uGA
M2ZTZ47H6cL7kWE7UzgdDDrCiWtAc3JaErIe/2S7qtC9E/C+tyab3Uaz/mpW
vS0KmiB3HV/VMaU4xf07TWO6aDk6Muh1aXFeB+ZJLEKuN/wONncU7gjIdwzu
QXbJt5GaXbNZtV5cFitNPogVY6yBhP1icj0ZmQuOXQOk96p9epB1xLdCYtzm
LPTo4sDiMdxUDUxczWuu4QMtHtSQvCrYsYbnovFwSKTbxeyF7n6G6HumHDi9
k0D8oRk6Q0ToBW2o7Dy7BNGMI62PDICmWM/q+G/yejKtKOKGBrYRopqy51zV
LdJuWP2+3JCHtoVvb9QUpHCaITmpavhelYJRtkEYNN6QJTYyEMKmhgXZ4BKv
UwaN4boDK+Ai4Xnmf4m2n/zzUwQZ67gW2deWmNkWkUrP205MTXLWbrX+nK8p
thmKMz3w+p222tH2IfLYKHjYH/Qa8DU+LdT7kFeMy9qsS+qOMvAg9netGUyC
m8yjOqJwVaTMJCqwgpSgCtwfrKuT4t2goMMiXYCyxKpUcGovGimY1xYTAMHT
n8pOu7x4L4LMamFfL7ziB28dMaSlMHX2l7JtDWjLzBeN3JTq+kiPER/7FDc+
SCfcWKbSpQq/mfy7cN4kXVsf4mIdQgnwzkHJfCVse1ku1wXzyQJhBfOfF66m
WS0MgT/xY3FzI2pJ40inORrkHWVYIBKAjhDERXq+QMELXZJHA0d0MbKiFkWj
69NcSwd+2yOPFSzfsgIa1cM4fkFHUG/lQSqXmkg4K8aYOMGBc2qL7qVn29tz
4WjFveIorYuNclzt6N5xtVOrzoygpzXNc7WepguEqW+wonrjCpX4INqAkrRJ
9LUP+aARnoSCuHeQcGLjaEmT1tPXKLOw4cGeCdR5egQl1gz9nRuxQaV8gffI
EE+QsU5ZGq02O4/xtVVxWdfIpzp/akFCBiDly+CNRwlMt8V8PsxyIi+MJppn
qlAgwWMU3I9UhnCMBz8oxfoE65GqH8BmsEcyxM68+NQb5znfCUV2TObcxy/w
kij83cSpB/HmQgDcHoh/0rszEb9i5C7y1bvhKyKTZhoOwBiuQW6NEYX48Z+D
I7kq2XE/1lyuPWKX8EYnzFLF1JQweO1IRIeume2kqrK3GNmZ5xTWehoJ8gzM
AiDcDK0DT7fYeMvO35XLDsGpGR2jKzc1qH/AcjqDBPN0VW0OUzkTAHAfW7wV
tpOEI9J9rGkZp3bQjNQrC5cC4lWmtBdXslp9GqwVaKLbmvzjCDVDOdyXZJ2V
Uwo9d1iHDtySQDlBc0OCLbv6zQ+EAF0nLIQ5pMI/0ehm30uHaWT73qzqS61A
/Vn6FJJqxU/jZjWwWfUl1sy/Jh7sWVX4wi5jD7Oqn6sH6VTuxDf38ej1hVwQ
T/YFqawwAaknnsE+HMe0QUmfhpshwsxVlCkHz52XIimTYxmSkrxV4XhB9GCN
v4k7HsXdl7xGbymhjwDJNQcbwwykev4+BoIZuhInY1cwjMOfFtUUMcAKUk4s
vnBJBjuYFVPTRPkyjHW5tS6w54MIDvyZuK2QGDrFsXiitpNX5QfB/kSdB9G6
2GMQQPNdb40sCD7uj3jsLl781OyCc+8mJiQtYLhz6uV9xnkSLK9m5BV5dlOc
gImzYRSdN5gGQ6HppMoHc3Fc8ZXUXXWgR7VzFvahijDXcIy1Pzpc9W8sXxpU
lpjTade0r03oYrPifTulHGvuG0wd17iVDQYz8SedGhnf1CsWWWCho3kAYvdS
Sh6lUBIca7JU96p6XC/3oluLRwuu3gxfyLacFTUyCOhFylcuhij44xjb0/yH
Dk5oal0TWzq07YhGZv45NYktri0xc8fcfJPBvnogtDhUupUi3Jex8Tmn9YBU
zbF+ODzHbNrXS5dMKkEW5IFnxxfHAwUmnM+V0SVPtWpPQsh2/Hc08P8eDPy/
h9lDG+eQnnmYPcq+yR5n32bfZd9/zmc6zj+Nf+P/04F+6a3q9NXx04vTn04v
/pxdnL48ef32Itt/+IA6JB70afDL32FG/3Zy8ub4xelPJzC3i5Ozn45f/J1m
FPq0eBKebEPFtTJKSRRMPL6x3R/hjYE1gy0h1xWmYRbc4feaYs+VaST7lyWm
BM/KvDqAO6MVZGp6Zl2VgprkLKIIkKVeIKr1asWN33UMpFXiWzAcWE4MA+3x
PbyJ2axRJnzZcPSCJHWKHWG2Zg8LZgtyrhg7aQ06JTloWck90y+6noi7ok99
vtPdH0jp/QfbfZuXbX+ebL6l0SSZM2EI+9f3MmspBLCFBD4utz2Ze5AVfFLP
IhfH7HBST9jNDZ+7y6w+0ntFx6QoKbx+S5V2XA53otefcS/mtpvIl84hZoU5
/IJ6FWJ16efQguZzC2NsHDwBbk5at9CBKx1Mp26CVJDGm9dweXs3ZFR74QNB
Kd1RBry9CvjiJumjEQ18oKMWnm+Zr2U5xPrHer5F8+kXRKvO3MHiI2QOPsBB
yFahvV2NvTMvrgJ/D0YElks19r7eqKJwnRexve7AVnIzJHFbOejHWB0lr/0h
CJyjf2b7/MpGdV3CkTcnBFagsC8mGb4s+JjunCX1Q2hFsR3cW0MAy7UVuIG/
UbYsOrNwZKyTE1brvS3cOkBqTAuhBlBlK3VzA/WwcXOFdZEpg81sIPUmWpQd
1pUFy6aGjo7Ob6Kmn9w6jZN8+r+Xa5ID4M/rbqRD8rzdTip4Z5stGI4Shlit
MEYR0FJubywvjKQrtRfdBs0tUJmwHcU8xkyswHsHGkCEsNy+xdo2spGijTzx
gaXDdptKCuAe/5bhLp8NNW2U0Jz2monNXbameAwXi8g4nUFIsbijKfCvTAC5
uJMEYhQm/PBl05OeXADaSXry1apW5GIFwDEpX2F+fVVJYsqRh9iRcWeh1871
cGy7161Eej31VEPYeLOmV/WCN4GLh4DKIFPNvzKQkLIlxBW5flHPCmwMJFoC
jvLHp2/M/+clhFWWacKM5loErMhkUAYiOaez0Tg136XfHElB5oOjhw+wH/tA
JgEoCNhhZ0GiT9IRONSAbRHpPN7eSPmnexnD+K4pj5qqcSm69XMCbU9uFz7S
XOhCgV0K2ccGgDv3jHzsccIDzuuk4aD+Gt+2XBVXcFCAxrKLFKPDucsuCNrL
1bz4ICUhIxOX5ZXvMipoIh0gDCIDeurSjCRH3ilVZOdLnlDSCeiyaDkFrYON
SamlE3N8dmLOHsx7v9eg6SBsEy4Sxu+koqk7rSMjPam3DMfGWTDZuKP973Cb
NZLYtYCfXXQOi0+i6hV39qo3B6d4z6LMrsTbKszvI4f9En6THN7SR7mT2/nb
xDO8g1Ko6PwOlG/GFnNhWC5rXEdmNSwb06wyLPHU8fku9d10qTBGJ4WyZ55H
xHADsUF6s/XDiTvd/exk2w31dyKwgT+9PT07eaYZWWsu4wJShJyzMGWcN859
F7l9VWgH1jv4iYjjcjSwlCudjLdI89mMC+tY643yIp3T8cyaAcAIE59RQNac
Al8K4mcehcvwToa6tYZI3bbV91mfiy2ySq29gUCY+vT87mYNsznGwaRurlOO
QgUXliyWAhtrakNKXPVII+I7JS8kzPjzDVYpWeO6Afz9oPEUHQXO8F/EEe9b
NElFq/qiOTgdJNNwK7i/zH7HCMSdUlpqPagsJ+Pom7HcqN2OJoP+MBptwGMg
OblogcFezDdpLqWFhCqrzva4OXxZao59tLA1jtFIS9woD6wzb++yGmjrrgZS
ptkPPi/CZRz3MZqeahp4NSO3RX0VE1i3HIOO8uIuDX8kkDfv0Dt9Zpcb5X43
V6Li3OSSmB7umPy20lHyBQ70UQui9cYgYXpyuncNMgnpT5eKziEIVuTatAZr
WQxpL6WIa9vtERfp8pGxP+oVD9i9OrqAnIN+HPzQbznPRShnSNEN2KCYaC5X
FV/B1PRRmUTVPGXFtB9sZ+PoTmGvA1/JYXBurmFLZ/I9D23Pu434AUPOPpeu
0+k2KFWsG0l4kUSYoKl+ujC14Idw1fpJ4WUP+S0wKqQ2gZbmfQNbNdTaYNdu
BdstS2NbcAb+ZTsvrEMfbxLHIntvCrE1EzdsQbBb83OPx2NK4eslPhklA/Vd
0Owscp6K41Xj1XAvUBKyc9/k/d37HNZK2Up9HMHz17Crg086TlISFBAzRvzG
cww18lw7rqZ0h7k42XLJQZQYkuJWr2xk0O3g7EMSRj40hkvcOqK6JEGiTqdQ
+vG68s04jBg/MFaSIiOIIps2rfTbaqCD2/cxfJVpZEDCJ70OQgNI9C23u93G
/f3KQsYiocNkyHkVpmVarciW13JrhrjWwaYaHSOFZtDvKZEc+UEN7DNoAXc6
Z4vcgxQdZtQckWAhtyuuUWctJe0v5GMZ3C6F1adKwLL8uu8Aov7V+66VTBLO
i2Dyn73uoENRjkyy/m6DIlk4r9mBTPw9FxydvRGA+062jz6ipLAwOpojRCc2
UO9LKv8zePRak2gvi4HUvY5idPCb6SSKMafRad6bosMx5GYzdGAdrHW4pU6N
N9gVFcNq5fvE4cf3+HDJowtNB8lxTT0D9YrL0PtlBWXrfVSaE9d9eR7RfOD8
0ttcDymsAICDjV0vg2tGP7Tf94RbD5zZyaA/zU25pKx67D7WTpfjqPucgDV1
mL2WfmVf4BOH3Zyqz7uIkpwrPHtNuSjnlKPTiqWBP7pzLgJ89+C7T58m2bGU
qnytxzMvJQFf0hOZm8z61/Kx/ltC8ha8qVDRqmKhYD5QnmKi00H+OdjJ2PiW
y1JcPlMHxjqoRdotG7+THuYXCuwXwvbuA05NSwR0M+WCaa6kkczNejUUSHGN
LGsNLCSxK2ndgwpWE+6etKD4b/PwqRFm4Ap30WDAFRh2uQIDnYEEMQDTYanU
n1m7+21k3gcHnSQ87BnovFf7qbvlIPMtLNp6rEARznbd5XbKBrroYWqyT43T
sjXuORgnzVc2HAifHIfBciqH0I7i+Ib758h1CfP/Z8nhf2cnF2d/zp6dvDj+
866EtN85J829FdORjl25398n0YiB2A2yim9h8rrUDgCDM5rpxDsoMTKC8Ytu
OZtBIkzCmYKuiifPmNCRW2qwgKvxaq0YtYMhZT7ZdZfybMyedQfXh7BJpsYC
BRfMDgP8r8PhzLwkKNW4GXbAam2SAsGqkAjb6pOifpKkHxAAq1UvOrQG0cs7
lTqxSY8WACbARr5TFroVMHEZK0NicDl5ORLx9qYm8NQBRa9v9ITtVk+yc2Rm
MzpLqQjpfAPdgCqMqNKGXWOFQZQFXGGnunmaS5TUgxBY2qvXJ2dnr8+cPyLP
VqDAYEE/wqB1ENAm8JPnr89ewo+6tVvOj8luVSo3qbE75oy6AykyU+yfaQkf
GlLF4c9Pzn56fnz6ol8b1oVgYvBBBSjTfo9gsN3k66ZVnkihmRiV6Ss4Oc/f
np882/GSwYp6F9xCRxQxjEQHbtGTIRaBZBd5KEhVW53zXSNf0UPPuUEYh3c+
Sq4ftISlIT/KhHby4vjtxR8/d0X/mAsKCnFQupRIwkSIGQOmgRFqQUbIPgXt
e9i/SqGaUXEb6GcsQfOI9+DI4kDnpO2uWsL5lDIHq+vhYYPlTeAkPBhonZi5
mH7EvZDxzDPygoJaaszCLq/YUqQpEqymQX3EBOu5oJdrSGzgIcNQIIjkSmdp
BQouIqNtWRNoRyqv4zy2Hg4Tu379dAlZygNjwa4NTYoSI6yWkyUostAS+1/j
xcCbMLwgAeDa+DezOI+BLUl3NEtaMeUG4XBi6s8oxZVJS9Q7olY9RNJ6Cu0c
S6CSU/uGSwE3amy7AlDmSoEBwcJWcot6MERcTNh5+lA/j3zLWXUkZ01oLut5
Od1k+yIOD/j2on37zKHjceahfZG7f5Aisz0QkhbTn+Qg74skO6BMLFpvjEU6
QDAqPcd+mgLaYXWbHTCzWljwn/Wu299xwR30MOQFnZYThd3IrNYMQQ9pwiqs
EGEpRs4xnvy+cciQMSEAc5999a+k7+KR4N7s2e2qVI7CcPA1o1/GxsnhZr1A
dwroWJuGchmwlYkqHik4Scy+Job8g01ID9+MauoEH1PMKAMa6CGfJCfuoqOh
dvQXMEHnaRNAuHLIxWrwAgG7hw5gMDAItrNqvcLsK3on3BkniR7PaotxY5T3
81dGQmCjNdWEaQhXJdZ6Vals9lHKz2PBYZSvQXWcvQfb1WuGm3CZRSpOXUqU
bg1MimFilZWHdFkHk28gS8F1aO484xfS8fvEjLAdmauWKmX5iYlt0QxZ46O/
TQbrHUbUFs9FLzyZDyX2Mm9yOW7DskWzwrqsJ2SfiRzECr8epXFmYqfEnrsJ
klIPyJWTDQcs2KEy5tSKzfLrvFTMxi0G1Y4XZO4FZPcENbVY6+F1MEiXN53F
pttujLnuhP16WfF2Lflf4u/a8lh0ez1kt5cCp5jvq/K7jlfO1uwpOrH0e3dl
3frg3IUh78BWYlU43n6FzSzoRXDx4nybe8pPnnZKpiD5Z3lA4E96s7THukKE
Ix8cxhKP6DsRZTCjDnjjFyev/nDxR7QADjMgekEdlGBBSYubR+Q6IV+J0Djb
J/mvRUULLARHabfLV7bFgTbwJw5zKB89gD8P4c8j+PMN/HkMf76FP9/Bn++3
PRf9UuPxb/qjA3392ctL//t6y0Bvjp89O331h2w8zn46Pjs9/vHFSfbq7csf
T86y18+zH/98cXJ+v4F+/Yx+O43CsU+RUO5Fp/b+4YFxsYU8/huFPB4efvpE
glBJwIwmUiRebYcfDg8nWfa6dW3rJDMZz+0oJGYiOmhIz7SbZiX5INIxJuqE
S8qcDDGlQoty1pd/EZwR7Ga8EoEkCkw8waD5JzPHS8GqRvV+ZhMnJkyZfaMp
DBPchl1SS6wUAcefORf64BU0cjiLkto3+fX7U2676Mq4AsNKHl6AVUwVafou
UYhgBGRp24fQBifWA1BFkdRHViwXBUUyrrSbPchdZ0if0HxMGEwj1pe4vqU0
wBID1EDG+IJqN0vGt+apoOycgWaim4tgMYVOmlpcnY6fTcqivRrPsJNaMZaJ
j9lkI5+uoFKcrxekD2F/RgI07UJQNPRA+VdKkV0wHO8tXC83G8qt499I8w0F
hM5p9oYTjfTXWhGOG/3pDL37jERqyqWlSJ/Jpr+0sgoYRH4CMzs0VcwppmQ3
VdKf3MbRPR8e6Oi+A71NlePPnJeMhazEiHXUyCIr5/M1Jve1JDVQr4Fjfyn+
Va7HnIPxxdfuDWeGcFNGg+MuZgPBIpSNO/7b+vU/9UbSMI1bDumU7mv3lWqc
SXjmrpfed07wrj+d/fMh/WXAXFEcfP26w0F/yzkdCZ1OBWh1nD0no+GEjAZ5
bogbf985xU7aILvfSlMA+PunAcZTJ+8owlYqBhMhzJAU6aRCB0uF9hBRzI+8
cLwgdKiicoCeqBcWH1qNhnKlM6VZ6Dc0ihP31Ppzu1XaDIMuu3SieiVmDiMf
a2mCt4Ev8+m7aAhTPOPp+A1sn7MQR1opmzCV3XhbZiF9TXtVOX0s2tIaRnZQ
BLqlIROa3dtds3u7paBp1yQ/f4ZJtdPwLI9hlqndMjITAu0WrRsZvuB3bvzw
Yui1Z7h1Q5Uwo0SF6U5ZKsmEF6K3Iuz3ikvktXvAJXsxTnXPvXZp+a5A6CBE
x4QaibEZgzzPylhrCZPdBzvRUrbaaXZMmGNPmO7G/BegjYV4iEifTSKBUWcU
355QYs+eoI5xmzR1dy2XdVO2RcwoeRI+W4T1w+P3EmFCbt2aiDSWnf8aEdab
xd9KhJ3/BhG2ZZJ/AxF2/rcXYd3F0Gt/NxGm+M69Yyqv3Tv//5QIO/89Rdg/
JG1+qwj7P/G/VInfrk/u+CYd4hdSi0j7oMudrlq6Vn4haUOHms4McTDt1i8h
Gf7XzeIXSn09pkRF1KH/PTVO/t3ml/7bzfz3mQV5xtkxPpy3hq/eMot//91m
oW6JrJM99+/Ju7Z/83vMwrOZC3T67gdg4a8XVWMuELY78CaNmQsYA5BScv7a
PL95hgECrKp2EUk+IQxVw3khtaRKqj/ctxXnKJ17GiYWx2mi08cypwVFXtwc
rpMZawHxCGPYUFziZPFEJ4oTSU+lJEDhPKWDG8YVTyvNe/j4hcQaNdTYgJn2
c2GJ1ZhoNQDJjHlKV3xtGNyqVhVREdBN3WgHVIwziKfM9wfMaoleEsTUVXb6
Bm8zgmhAzYPiBu16OcfcjZ9jb0mSnPpKqryOEOUSe8IwMdUSURfSiOuLrdBo
QB8LXAuwhMNWLlOwZwZk4n6PWpHDCP3aINEv3YKlVQ17u4/AIQ0Ysh8/5tVm
mjcIN8GqFWFrKl1iiLVqbjHVxUJ8+OG7YsPlWhZOhw0/72wKa4mEUSpeTq1F
XcKAWlaatLebZNnpVegtVduu0JUTt6VwGyONPJichGnEjaMwFE19ExBZ3LXS
ZViqKwZCarlzBf7WQL+144Hg7aOPEjvQF5GjohVPv8Sk6fPaTje6vJNdo3h2
E7QTxo28D2bJTQCJfwumG7x5mZMSNhB4T/JtEoyWLqmY6yvexhn12DBSWYsL
LPoup2WLKLLxQHuiYpxLUrlpmAZB/7k5MUJ1649z0/81IEsF82c/kRBazRpO
POEkKEkWwqf3dZIjeuuBEAZ0RLjD55tgHLQFjt1+T7EBEFSN+gjxJWN4rgC5
g8wWPn48e/706PDhI3LzsoSMsP2kE9/WRrQmcLdFaTReC9lBnsL+ezb8IYth
8U4bVOrw1YMSkkwWajfKZxiBv7nvBcr+gio3+WzQvmLOxqW2gqI6Ec74aes5
/9zSTRKe4/lbbm7otvOgcSwhkIHDuTO8xt4jkwvdg+fETk++JNxM0NWRlipA
qqA5j6TQSb1vpOZ+0VBJA2WGU3IXt2Mu1LcWcIuQIxA/znWVMuh0a7QNK90b
7Fyy5+LXxywFO5cTXEMqHhVOgIp16FEbLjlxJBNc/4SB64P7HEilth0U3tR5
LITm8FiaA7e82TSY9KRKujOAtT4mvnCURSnjEIzwpZRRSHuLijiQliysnzmd
lCqwMVV8L365l+mEuBQXcSkaSX/EQUVBcZeQUAcWrQLFJSaO3M2yRnZoNWvU
XSYji8S/+bdTAsniLFBLL7QaozQjvWHpKEnanDMet4xmTNxieKPNGiHsuJND
65o/FBsmGC6WCtsxNDl9h5AApbtRsTW0y/JCR7fwrUFMAitav3iDsd8IFKD2
X6eQW3MDIovcJAx9CqNx+n6VgsSXjW7mDBkjttBCGXyjOaUw4G0RtT++w4gr
UpJEMWpE0WbnCYaJtnaRKnJX1NHWy3peX2s78yCE4lQbdx5SYskZbcRbGU9X
6M5LcsvECqRGDBRR62QUjVQP1QG4leC6rZGnqIvV1v4PelviFKkyHxiQUgtL
ASyX/nlykUWFPm1c2XYqYmGbXDsNrHwDWrlepcnve63vrhykXLe7wzgpsouv
/LLh25nDtQqBXjahqy92OjqB1l7W81yC4prCJ80Dbwca+2ljM3LFUXsWbZGk
6g/bCBNhYuFL7YfEGgbfuwFurmURT4zEiqfWhps6neqnkaVjP3vxY6GWLYAB
NuX1MppEY2waIJEaTVmU2pA4PGnfrLqEpo/14y4O15vkHI4ubirYLvy3T5R/
4fszJqF+6k+D5ECGk+D+t48ff/oUQ5YXsG644a6t/XjZvMN5gVYUo+t6hrVo
Y0TTlhGSLO8WaTjNGUqVEoW0dVbsgIfZGAJIq5NIjizmpM/YI1RtyM0Dgn9t
szCBdXby9PXLlyevnp0804EMbgh/yWVUaVkthW1zkQx0Z1jSiY4Bxy+9Et2h
uKIsz2uSM6A0chc9fAa/+Cv8xSaCGWCg0EirT32EBKO1bNHqBFaxJIMY5ZyO
AsRC0qTVEKXinpDis6IyHT7rFy/ODyaZpvvrIFoO0qplLmCQWkz5NTvec65g
izplowOQ0CLUq8t1s6FlNqLx6cWCil1KNJi3MUhKv7+SDaT04SIL5Xurd2po
0TqCrR11Y+n6ErnIDYZlfYhNiXo9zZNzcZE68wSaSEexp0VENerL1PKQtwLA
EwwW8zHCYg5WjnTSPqqmmY2X8BD8IFhavntTt74EB6VZTzrIUqR1k15hGUwt
dlWzy5X6gOKuY5qmadIOl6xrbaaGDdvpPX8IGuzumnF1JrmQNJAykTQR5eNH
HbgJtNqLtAsNBJTc3ZHhqm5RxlfFVYnh6ecYmR6xncqQCGvkHnQluxJLeA01
c9dW60A4DcCcEzdzoxLs2Q3iMd/oTYinqcH4O3d/XBbAce2GdT0Q//hYBBpN
+u30LRpYj1XWqHRRO0UdGbz6euXth/yWg1q578sYRKATc0o/XDMYCShpzqbs
JLIzmjxws9BeSqbYTc0IEMbWCDCN2cWkJkgrMXHehOg/EdUHG1BN6xpLDcgO
wnPP6QTIuIgrT9461P92vYCnRO0MS+/MeXV8keE9g54SVppQHW03S9GapNOJ
JgTbnlJxZTQPuUiQIRHqKiKJydujdTIJP4rNaSVRqFkglldFPZj9O7o1SpnV
KAVbq+cH8jFtnVW2a1Z2s792Yq9jFuIhelnOwCC4rD+QZchOP8k4xofGnFu8
0Kcy6Z3Ky8I2gpuRgmvidUAiQkCDZEUfitWBoMRyVmR7M+Lb24xHuM9JOaKz
FLpuB6uYRgHgEPwXZTNme2amroaGDgeVlWJGeKAB2XSUHk+Mky+vkivNVoe5
y5k2wNaKvtgLcRTck+6wqVE/iwreeuXNL1IoJdSLMEGwPU+7uiZuhh+e9NOG
c+u44o5SVy4oN1p3wywJxTf1QAesFYhtTYsegkGweNYUPaoOdFOrUDjKiSGq
V6eT3gxyTP8zsF09S9Qol4GMB9Tg0iGA9GxeeoHm1B49OXIBcvQnIkTxLcMP
Sb9zEoFakuKGGrnqTCnjSy0PZ3ZYI01d10g0mut1TijSaCXgQIrzxCqbj9wn
Bhjjc/oXmLvYXhHUB8ed0FnR4j3LCftN1ucqFnlYPW4G+BaoOkmpS9ojGe7Y
RAb4+bhS3cZ8cLEdHAlMO8Dw49AxbTEcjvr1io++4F1iRugYbaxqmlyY6urI
w3VRN5tqerOqK8wUbbA6Zo5pFPOyeoca00vH7FpyRaHRomhdjSnDe1GdHKwo
5zw0avkqjoSamoAw6oL1kM2l0zSa6y0CiczK/LpCXeEWG5MCVZ73in8D3faX
+Rzvq5Uon+vqck0uEwfr0sTdtF2iSx8dUgtKAtbzSDdbHyqZH0wbTXoFI8PQ
AREz5Fk6LZak68ZhCMQfUvtf8vA2Dv8UTyZOirzI0cdHtaYUEyNXDp9flt0J
hDczHrlm0EC/BIarMKJzo65UaQiBT1HfejujTq9Li6ruWCCtgGMZyf2Zek/S
BWJBZOLClLofAkfkFVZ1chW4GTMEPTNvSG8ftFUbz1rS9xBNJAwUammwBs1o
fxpsZAcyg+8tmnEyW/PXk6W6XjVF2nDXns2dqOXuLitU9+abBLFJ46MF2qLD
A5E9lMDicik93QKuiNer0hdd91zsI67+Na6zvIeYDlvFNIqLBTsBFMyPKws2
SZN7G0j4rVH0cCezcRP9zNgNqpUR8c4ijxvYmr56mR3XK8u2YKXinC6ujYGt
ldiqsSV5g7rnpla2RrdPUPGqjhnOgUfRQGkF8Jbj2O2PtqXnqEdYpem7TyAe
UfHGfgyrKu6Z9gNlyXjhuxXBSO0K7P03avjvw3sPXBj8quCa3imxZra3ZUp7
ghl2dPTgAQWWfhYYSlqZDDJibwqzBknj27wR95KCC5JDlXu3WAY8eQfV80YG
Hl1Lej2hSEegScw4mNfXZTUKrKFJl295HN+dkoR3DynXcGds6gjzrnEIlSAx
V1RfQX0giw3Mp35Hop8qLNjRK70hWvc7/22+WnHNqUfM4GrL7VMT0ABXJZrl
Kckn4SXBBTisoGzea70GJx8tVPRdzBSDuhDgoau4IpowuwKQ0GxlCnjAZ02S
W68L6OnnTVGz7iQVAKxO0Jrg+2J6U/PUpEU9HRYkMGVuUarWUrsP7NrsouqN
oBvowBLbup4k+DyCpHYnGbDBayO+XcyT13BJPl/gqWSbFv6vYH/oPnw9Suk1
okmhmvN0XqA1S9531brIEVNYtEacbQPzkX5RgQtGJGeEpmQx9RihQIj+qtDk
+FLaGOXamdROhR5iuf0bOeP+kdHWCeUYUGFfvm+G5LYAzoNZ26gsPjg8zBaN
CypQyTcNg3t+FfbzA6aIG2S/OZDTFvYvD8QXqa/rsxnp0dz/gNgftYH96YG8
W9urG6Ku3GOJgmntqAfJ4YWSIfguUF9I93IUZFI4T+oxRfFO4U3gmyKfRb4y
b216RLQcDV42xYf93pXOPSero69RGKPGM2OHNuKWkUlA/q/VgornYx8sGYCt
PdwOYjTcXO2Bbc86bFTbgaA7IDZw0npP2lCYD9G/sODCYvciZlfkNNLG6F3+
DDca75Nx91WRRGJwoo87dnDgjvEVV1s4JuqOFehxU9dAEYnGb9DYTXDhPo+C
TzHlmHjWX2SkquzJZRE8aeFVQtmm7u8jxpdgw+bsxeGWQDEKJi64doWgdetK
MJ0p9Dhj3ZkvzFf59bzAANr8GjFUbhbY2EAT4ZRbwXSz+3wqsXSEewENgnK1
4jXOpsuyrkGSBUQWaS3oETVf7T7IXVvIl7/Kl+h/WaBBiz9jBCaJ8lKiVW+i
2gCJfWnJT7XpG8nCGUu8ObqogYuIEqaEiFAEAr7FQHy7roibRn26sKXojjpl
ZJBDB3XoPqmaUZhSYhzHeAS4rOPGZIcDBVva+pqrqD5+pJc/OyataiCfHOUU
ph/FIoAfdhYW4MyTilf7hi1pgTX5v61d227b2BV9P19B6MkOJDV2PGkwb/Kt
TZOxDdkZoOj0gbYoDzsSKZBSxg6cf5lvmS/rvp99SFk20OYliU0ekueyr2uv
ve1J2hAMLuw+8xVzxCCAXGpjZ9T0Rp8UO2Q5l77/jK5KWhaYiy/bZeDEux1x
XnO9FE4eHxY2EZKDI0cRb+IFymC5Kk7kb/km2ujoMHGvejlAAtrX3jCPTjFF
XQYrsi65YWqOB1u+QazDcbgkgE3BxZtgLmV/K+/PyMS5RW1Ae6Xd3I6cNYV0
etVstG6QYrhc4i7Le3KhqOBkYTCFer4oOkz7m4nKb7F+HTMgedlKPr1hYC5u
7LZebBzpWk4cP3iYBT44DFWiHJcIecwXP4ZwMM5Oy5YOhVu48TMLLytOKAOt
FkcdStLY3R8kfcKypmBgqf9uby7essxPDWnrbUdEQVvWWXADwhXkdQs1iPPi
Uyn4OVVvdgr4/msRKeOuQJlv/fw3b2b1mzc6C/lLk0A/lE3vJM49tYegEAGK
PNqS6OHQBmI7R7VhJHsh4CviSlhzwpqTPnNmrLdDYD/C/jmMa9ubQE0T4oNx
u7ij2D3EUdnEz+yNF+TUJXqLjh1nqG+xs6kGTH2fPloF1gd9W7+3LgRgU+2l
+FFqEdM9ajtf9vUrE5O87hXFLJ8XYF+JqsIpFypYGvW+RiqYOfi+y9JIdyKO
oTtaNqdCfAqNVRyH5uaBuw+i34LJksEe6Z+ZGROzNfQkslXEJNXIWYKiUzTY
yyIgPONVoE+23qBiYTMJTZtWYmxpxY2ApVApqKWNQq5ufLHyVs9OLFUwj5ES
NVOpgpw8W01JLRgUgUm5IN5OuEiTq48qQim+GM1Nxnky/o80y3PRirzXZcRz
byL+RaxWJRR1MxkBRrFHICcHbFLGQUM07HQhWiuxQl1ZFK8iDFAVzHW51DZf
Xlp2py7bMXUU9elHrSgMOyNR05GBOL8ItXV4m6Hxe4qjhnZxZphBsC0ka2Ox
plc+tr/h/y8Pn4jDY42OUm4Qw+BY9heXYbW51Vyr5pyII47TTdLgdK1ol+5G
soIa9mOpXajxr8D2KlfaNjGn7eBo1dBDzBUeZCBuDs+q8vNSg8gpMLQbnrXd
aGb8Rhv3QNWUUFL/uH0EPbSMlTfgc2loAo/61xy8FdRJggmhzKqsSLmORTkf
JxeTbeU4KJIur4gWbVrclxqA5HNNN8WKUfZ8BBGJH8gsO7/86+Z4cvDLv7O9
NX/DVzwJ7/d9T6w//+CHKJj29OJaf/TnH/Lgx3EmWFi0YxQ1Z+33Lj1+Rd58
+r+/+GH3xQ8O7M2D5XSF9Y7Sv/4Tpp0vUAqx/l17AytivIA9ZGtezAb7Habh
kAjKbmJk+5xwXL+f9uG4q2Idu3WUq34d5RZPKM73DVLvnODn6BfvmG/hssVB
D94TVfz2IUTPM4fdItv7tXjIsX/xElsdCNdUTmGU3ysm7QBL+4kHegI5tcS/
YruBJ5oecACwWFEKbLKn8MR1e+lf6b+TH8IT3sIfGoUitzN82CUPjyA9/P/0
/GR0c3yaydUHmS/TfMouP+28/DDr1FO+MPw7+FHkZtIaSLhtsvO2oxHceg4/
/1LlLXP1Ez8Vf5Ta5pIxGi3zKpe8C5UIyls9yWhHb0fnfz1PR0uvOf/wFq45
pmvOHrDxDIm2xV/AZoXlRdmUXn+C15/T9VP/VlKoWDys8orcDXcb7TrpHmep
HiLeYwM8aSCBOwW7GXR2IvFI4dkMATeRXkGUryM0LkiuUpmR5pKQgtJ2Gt7w
cQ6LLBFzxxOmdfy525d7N5+vs7ej6c3NPjaAhkX6cHT0/vv37FpgAYfjd/t2
5Dj3ezERc1CGFmBWzgVjChZNOgMkJJillXjOuq8TzzYfF/qas5vz7NQYs/kY
7cFSDM4ewE8HVTigjC6FUPkqGbjie11Oz84e95FoubDUSt7UMoiaP7Z8kLks
jXZHQkFRdDDTaht3sZAxElmwldZq5EWBkPWdFi56jUHbB5PUySNw4mjqB9OX
T8oga6hGwg6bce8Mdu5ovc+OQNDGss7iYUo7nl895G024T1j08eY8g8Hh+8p
cjYBt8d+x3FYI/vFueWpXpTclJ7VITxncPlpoIogbhV4c9q3Us/M9UyWMyW/
mTwtIUlWte/sQqdftFIQLa34CGmXizrXLtDjAmfhmmCx35r1Gs4L97fH/HJL
SykMI6ThcVkxaRpLkPsrqzbIIEqwuIAi34IA54XLnoBE4MyTnuPEDok2pE3/
WsIT0ulH4VTw7xv+vXhWVCntq468xjRxVLYpfV7OSD3BqUq/b6Vp9qAxMkCD
jW37f2POkCDYpBiJ0a1a1MhQKeq11BfbPFNytnsnheezf5ttcNUJQQSkUv16
BZF9aQmBfdWUX3GOvhhzfjK9dLb8MPOmKCQlMQPXbFGvaNcb23cQ4CAHnfXH
1o/LMOklOmUXtRHzlrH8QYOgMX5BsXYKv1AuIYJfjdE8Ypb2eHdTNHKNqJN9
BlgFA/GB10oAfnxN2mO0mXnnMFhMZ78Ne1yoRJeZvRdt2+W+luzaHdqfKeFI
R/OR2k43CCyiSD05HewfKVgmhs3aUjwnOdI8AwLV5qMetu6A2HO+qCLks6oJ
QgRCDtGbmFbUBUl2LlcKYRUMUWMjfQBciq/R9WU+ztXXV0er1GTIRve2K8P5
fB1zdi4rQHPluEdtWR1emdQvhpVoP8GQIxxyhPIqDoNcjq4/vBoEdAIx2Z25
1n94pwLEUsilxFc4tE60wjL7gz5H54CkrBGoRjJtKlhYUx1fVSw0Eg4HF9Of
SE+sEhLMPU46rGoqOJK2xo5cMwgZdjI+TMsd7QIr224c7pdwy4EifHd+ydhZ
dmB8jHHjOuHL+Q7x+sK2ihjcwinDBKwk62gu6vsmX4Fe09wcPwTb5ZR3WJQV
qIQYYVmP+DxFf1W01u66bi6JqaIiIfhP2pygUhsGJ4jhitok65FTIzAUV9Hk
SItOsU3P4z+kxAsBv2A9KpjwUT0fWTntek2RI4qjSvGj8COxhknwh9Ll14Bf
v+YCVVlRD+MqDZkGalHbrfbi3rkOYemoPLQpUJvIXh43xPKAXIjXY/WT1Zs7
DAzGQCiW2wnkwhdE6JpHBuecKOZCBe5aRZhEKg7yn40UECBJ0cXhGUW8mdE/
NPYZvreRbEJVh0pSHIFpqZ1ihkkfmEYWCutH6erKpqqLpkemdykVS8aXVpRH
B+/A0CGRhU87GL+T37DLEPjxpCSwNAc/rMD5pGoReliGD+NE8ja4KhVjeXcB
F7VukqIX6+bnCnefcSK4sMDl+7FkjDK9JDDIckk6HGKhcNp7QI87xdXWrvo/
oz7K0vmSLw4vdRrMssuKerlyYG7EgydAcRT0RWy/y2OF/lhaNugaeeCtyexI
oDftypBOVTB0RAQkSAivMkIOWyupA0uW7Pv3/WcTGOkbbZ2TYSxi+4k6iLD5
7qveCGlsA9s/tq+5iWIszeBwKLUY4bB5knLXrgNYULYtpy/cN/D7pStu78u3
3B91X/T1iin1n5+01dgBHgicwt7VpRUswvWGTKpUa7sCrVe+nK9+Sl6uC0uQ
txK+G0uP5Nt2+7bJJqM1TyDnDJFlupfgVkCrWzoZldw60yF0L+fUT69OyVt7
yY5lFrpo/jAFrhORBFHHAOa6YDw+yNgl2ySUxcq1IdbviBsol8tNZUXKVsEk
7pI1JEOlZMUF2Jd8hlZRUTFmyvwrLJo1a/R54c3YdMMqejg5WGNILKByT+Ra
0nMJ6VukrsVh0AKmSIYxc8R+nCfqYzgJh0nVKmMOg+t/XmjyHYtZsvmirmek
+gjLL5nRLcbhaX2thoYWy1nxwYUrMEHjMCgLMm1lqtYik5vh9ug0MGOEowaL
fmwsS+jfOIzCXbeR7zWK4j8V+az/nLi/4eEkaR7RWJxMIly+HGa/nHiAGNII
Gy0WntgiRZML/wc/5PZGimxmQ0IpXzSkbhjpBhUgmpnoMXdZCHAidaJa/upU
65H2dDMZvx8PIdpTbB6cXIXUPLGYyYawS/rcF4I2SnIi7lW4S02b1pWNm15P
SLFdKE9Dj10Lgr31utnx0rSO3XdzjD+E5s6j5QmzT5adNmoNzwRWh9kHes6E
OvyUD9nZ+AfyJzvAfuL7z6vf0HUM1+tiBf8psuO6WX9bFo+Iobspl9kJpiKG
YZovVuBTwr5ph+EqB4H593o+X+bwq3+AHPlUI04mh3vOZlTn9LkAgTUMEwQ0
YYtpeA6i96ebMsO762E4BV06y66RJCn/Vg4DXPKfDZJNVL+BlzPNBRh+DNZp
WWQ/14tvQeI6ZQOncrFCqY1EHE15qxCmOuuWW4xGI4IJhf8CorKyyQ/HAQA=

-->

</rfc>

