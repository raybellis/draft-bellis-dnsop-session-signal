<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations (DSO).
DSO messages communicate operations within persistent
stateful sessions, using type-length-value (TLV) syntax.
Three TLVs are defined that manage session timeouts,
termination, and encryption padding, and 
a framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode and result code which has different message semantics.  This document updates RFC 7766 by redefining a session, providing new guidance on connection re-use, and providing a new mechanism for handling session idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>The three TLVs defined here are all mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signaled by providing a
non-zero message ID for messages that must be acknowledged (request messages) and a zero message
ID for messages that are not to be acknowledged (unidirectional messages), and is also specified in the definition
of a particular message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO data is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a request or a unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a request or unidirectional message during a DSO
session.  Either a client or server can be a responder.</t>
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operations:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">
<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>If the RCODE is set to any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="forcereconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="dropreconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are closed gracefully as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a request for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO requests and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be silently ignored
on reception.</t>

<t>In a DNS request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DNS request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process request due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use request messages, which generate corresponding responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DNS request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
unidirectional messages, applies even in the case of errors.
When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>Unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
Unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or unidirectional message MUST contain at at least one TLV, the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous request message, and the
MESSAGE ID in the header is sufficient to identify the request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a request using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
can’t contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/>, whether an outgoing message with QR=0
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unidirectional message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding request.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding request
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous request using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a request (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a request it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that previously valid operation invalid.</t>

<t>For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 3.3 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t>[No it doesn’t. RFC7766 has no section 3.3.]</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance its trade off 
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive requests to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as an unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The unidirectional DSO Keepalive message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an unidirectional DSO Keepalive message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a request that returns a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a request is received with an Encryption Padding TLV,
then the response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +--------------------------+------------------------+
            |     MESSAGE ID zero      |   MESSAGE ID nonzero   |
   +--------+--------------------------+------------------------+
   |  QR=0  |  Unidirectional Message  |    Request Message     |
   +--------+--------------------------+------------------------+
   |  QR=1  |  Invalid - Fatal Error   |    Response Message    |
   +--------+--------------------------+------------------------+
]]></artwork></figure>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are requests or unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to request message or unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to request message or unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a response to the first request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>[This whole section needs a rewrite.]</t>

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing DNS Stateful Operations messages through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session. If the middlebox does implement DSO
sessions, it MUST handle unrecognized TLVs in the same way as any other DSO implementation as described in <xref target="unrecognized"/>.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-layer
headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it applies especially
to middleboxes that do not know about DNS Stateful Operations.</t>

<t>These restrictions definitely apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more DNS-over-TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
<section anchor="tcp-delayed-acknowledgement-considerations" title="TCP Delayed Acknowledgement Considerations">

<t>[Need to put back the text explaining the problem here.]</t>

<t>Because unidirectional DSO messages do not generate an immediate response from the responder, if
there is no other traffic flowing from the responder to the initiator, this can result in a
200 ms delay before the TCP acknowledgment is sent to the initiator <xref target="NagleDA"/>.  If the
initiator has another message pending, but has not yet filled its output buffer, this can delay
the delivery of that message by more than 200 ms.  In many cases, this will make no difference.
However, implementors should be aware of this issue.  Some operating systems offer ways to
disable the 200 ms TCP acknowledgment delay; this may be useful for relatively low-traffic
sessions, or sessions with bursty traffic flows.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC7413;
&RFC8446;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAKApcVsAA+y9/XYbR3Yv+n89RR/6D5MOAJOSLNvyyjqhJWqGib6GpOyZ
ZHLPagJNssdAN4JukMLIOs9ynuU82d3ftau7AVG2Z9bcrOtEiQQ0qqt27dq1
P397PB6HtmznxZPs2avz7LzN2+JqPc9eL4tV3pZ11YRZPa3yBTwwW+VX7bgs
2qvxrGrq5bgpmgYeGTfldZXPx0ePwgx+/iR7cHj0zfib8YNQLldPsna1btoH
h4ffHj4I+arIn2SnVVusqqINd9f02tdvsh/r1U9ldZ39blWvl+Gnu/jQ+Bm+
Nkzz9knWtLOwXuJLmifZ0eHDr0bZ118/fhzCtJ7Br59ka5jbN2FZPglZNs7a
ekr/v9ksVsVVw3+vVy39I+Tr9qZe0ZPwJ8vKCgY9m2TfF/N52dBHvO6zfOM/
rFfXcXbZ+aZpi0WTPQVSwdDlejGCL6cTejS/vFwVt/D0+VP6dwOvLmAd3351
mD29yVcwBpAcP6Ovp2W7gdcVs7u6nmVP4V/8cT2DWTw9zr59dPj4oXy0rtoV
PPz2/Jg+WN7UFTz0T0fZ/uOvDg+yRw8ejo+A6PRlscjL+ZNslW/+pWymE1hA
uujzCcymaG7KVeGWfd6uYYbpN7T24+VyXsRF6qJeV4V89SZf/ZT9mG/cop6u
gaHasqo7K/rqELjmYyt6dPjNQfbtt4/HR4dHyYqmMrd/yfG9k2m9SBf2r5Ps
WTkFxmrqyq3sX+ubqvMFLewc5jdbV3FzL4rpTVXP6+uyaJINlSf9+unv4+xl
fp3P8nlRZU8LWFAhH79+d1WvZtn5tCyqKVPIUYe/daR5/cdH2aPfHXcoU5Vt
Mcv+DTh9Ris1Ovwln/1Lw1PqE+F8mAjn+Sr/b0WEBha0nQoXk+xFsUgocAHj
xM9o8a/Ky8ubfJPTcV7PgWGvEx5/M3kNAqJ+B4z7jZv69yArQYZe1ivP3z9c
ZIdfPTx8MD60p7tMLlNfgHSpq3+5Wl+vB7gYpv5m3YDQW5V+9vUi/ZgW8LbK
r67KeQkfz5KZ7+15EQN7U17fuLm+epo9+Prx4ZZpurP47dG3B9k3j78eHz18
mJzFpczlXy7z6vovtIpQVrClC7hHbgtkjVf59bx4dsxc0uara5zYTdsun3z5
5d3d3aQhiaOHGuXUl8sc5EbzZYW/nBXzfFPM8ulPX/IIfG9dPH2TvSlW9CZk
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

-->

</rfc>

