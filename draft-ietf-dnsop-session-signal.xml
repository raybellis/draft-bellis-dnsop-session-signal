<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO data is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO</t>
</list></t>

<t>session.  Either a client or server can be a responder.</t>

<t><list style="hanging">
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operations:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">
<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
([TBA2] tentatively 11), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a correctly-implemented peer.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE ([TBA1] tentatively 6).
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value ([TBA1] tentatively 6).</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>3</c>
      <c>NXDOMAIN</c>
      <c>Name Error — Named entity does not exist (TLV-dependent)</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>9</c>
      <c>NOTAUTH</c>
      <c>Not Authoritative (TLV-dependent)</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of NXDOMAIN (Name Error)
or NOTAUTH (Not Authoritative) then that document MUST specify the specific
interpretation of these RCODE values in the context of that new DSO TLV.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV - the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI ([TBA2] tentatively 11).
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
can’t contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with QR=0
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unidirectional message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message(QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Generally speaking, a long-lived operation is initiated by the initiator,
and, if successful, remains active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t>[No it doesn’t. RFC7766 has no section 3.3.]</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a DSO response to the first DSO request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="middlebox-considerations" title="Middlebox Considerations">

<t>[This whole section needs a rewrite.]</t>

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
inappropriately passing DNS Stateful Operations messages through the middlebox.</t>

<t>In cases where a DSO session is terminated on one side of a middlebox,
and then some session is opened on the other side of the middlebox in
order to satisfy requests sent over the first DSO session, any such session
MUST be treated as a separate session. If the middlebox does implement DSO
sessions, it MUST handle unrecognized TLVs in the same way as any other DSO implementation as described in <xref target="unrecognized"/>.</t>

<t>This does not
preclude the use of DSO messages in the presence of an IP-layer
middlebox, such as a NAT that rewrites IP-layer and/or transport-layer
headers but otherwise preserves the effect of a single session
between the client and the server.  And of course it applies especially
to middleboxes that do not know about DNS Stateful Operations.</t>

<t>These restrictions definitely apply to such middleboxes:
since they have no way to understand a DSO message, a pass-through
middlebox like the one described in the previous paragraph will pass
DSO messages unchanged or drop them (or possibly drop the connection).
A middlebox that is not doing a strict pass-through will have no way
to know on which connection to forward a DSO message, and therefore
will not be able to behave incorrectly.</t>

<t>To illustrate the above, consider a network where a middlebox
terminates one or more DNS-over-TCP connections from clients and multiplexes the
queries therein over a single TCP connection to an upstream server.
The DSO messages and any associated state are specific to the individual
TCP connections.  A DSO-aware middlebox MAY in some circumstances be
able to retain associated state and pass it between the client and
server (or vice versa) but this would be highly TLV-specific.  For
example, the middlebox may be able to maintain a list of which clients
have made Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
make its own subscription(s) on their behalf, relaying any subsequent
notifications to the client (or clients) that have subscribed to that
particular notification.</t>

</section>
<section anchor="tcp-delayed-acknowledgement-considerations" title="TCP Delayed Acknowledgement Considerations">

<t>[Need to put back the text explaining the problem here.]</t>

<t>Because unidirectional DSO messages do not generate an immediate response from the responder, if
there is no other traffic flowing from the responder to the initiator, this can result in a
200 ms delay before the TCP acknowledgment is sent to the initiator <xref target="NagleDA"/>.  If the
initiator has another message pending, but has not yet filled its output buffer, this can delay
the delivery of that message by more than 200 ms.  In many cases, this will make no difference.
However, implementors should be aware of this issue.  Some operating systems offer ways to
disable the 200 ms TCP acknowledgment delay; this may be useful for relatively low-traffic
sessions, or sessions with bursty traffic flows.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC7413;
&RFC8446;


    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

