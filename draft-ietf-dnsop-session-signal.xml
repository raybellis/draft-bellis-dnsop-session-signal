<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-14" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="02"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular DSO message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO message is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO</t>
</list></t>

<t>session.  Either a client or server can be a responder.</t>

<t><list style="hanging">
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operation:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">
<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
(defined below), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a compliant DSO implementation.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE.
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one, the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value.</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of response codes not defined here, then that document MUST specify the specific
interpretation of those RCODE values in the context of that new DSO TLV.</t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPE the same as the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Primary TLVs”.
A DSO response message is not required to carry Response Primary TLVs.
The MESSAGE ID field in the DNS message header is sufficient to identify
the DSO request message to which this response message relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV - the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI.
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
cannot contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>Similarly, a DSO message MUST NOT contain a TSIG record.
A TSIG record in a conventional DNS message is added as the last record in
the additional records section, and carries a signature computed over the
preceding message content. Since DSO data appears <spanx style="strong">after</spanx> the additional
records section, it would not be included in the signature calculation. 
If use of signatures with DSO messages becomes necessary in the 
future, a new DSO TLV needs to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>The initiator MUST set the value of the QR bit in the DNS header to zero (0),
and the responder MUST set it to one (1).</t>

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with QR=0
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>A DSO unidirectional message has both the QR bit and the MESSAGE ID field set to zero,
and MUST NOT elicit a response.</t>

<t>Every DSO request message (QR=0) with a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response (QR=1),
which MUST have the same MESSAGE ID in the DNS message header as in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message(QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Long-lived operations, if successful, will remain active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t>[No it doesn’t. RFC7766 has no section 3.3.]</t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client
and server. For example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result
in a continuous stream of ten messages per second or more, in both directions,
to keep the DSO Session alive. And, in this extreme example, a single packet loss and
retransmission over a long path could introduce a momentary pause in the stream of messages of over 200 ms,
long enough to cause the server to overzealously abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.</t>

<t>Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   The client could determine
which of the two is occurring by noticing if a connection is repeatedly
dropped by the server; if so, the client can mark the server as not
supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>The DSO-DATA for the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relation to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.</t>

<t>The DSO-DATA for the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for the Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>In principle, anycast servers could maintain sufficient state that they can both handle packets
in the same TCP connection.  In order for this to work with DSO, they would need to also share
DSO state.  It is unlikely that this can be done successfully, however, so we recommend that
each anycast server instance maintain its own session state.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

</section>
<section anchor="zero-round-trip-operation" title="Zero Round-Trip Operation">

<t>DSO permits zero round-trip operation
using TCP Fast Open <xref target="RFC7413"/>
and TLS 1.3 <xref target="RFC8446"/>
to reduce or eliminate
round trips in session establishment.</t>

<t>A client MAY send multiple response-requiring DSO messages using TCP fast
open or TLS 1.3 early data,
without having to wait for a DSO response to the first DSO request message
to confirm successful establishment of a DSO session.</t>

<t>However, a client MUST NOT send DSO unidirectional
messages until after a DSO Session has been mutually established.</t>

<t>Similarly, a server MUST NOT send DSO request messages until it
has received a response-requiring DSO request message from a
client and transmitted a successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent before the first
round-trip is completed are idempotent, or are otherwise immune to any problems
that could be result from the inadvertent replay that can occur with zero round-trip operation.</t>

</section>
<section anchor="operational-considerations-for-middlebox" title="Operational Considerations for Middlebox">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
a configuration in which DSO traffic is mis-handled.   The simplest way to
avoid such problems is to avoid using middleboxes.   When this is not possible,
middleboxes should be evaluated to make sure that they behave correctly.</t>

<t>Correct behavior for middleboxes consists of one of:</t>

<t><list style="symbols">
  <t>The middlebox does not forward DSO messages, and responds to DSO messages
with a response code other than NOERROR or DSOTYPENI.</t>
  <t>The middlebox acts as a DSO server and follows this specification in
establishing connections.</t>
  <t>There is a 1:1 correspondence between incoming and outgoing connections,
such that when a connection is established to the middlebox, it is guaranteed
that exactly one corresponding connection will be established from the middlebox
to some DNS resolver, and all incoming messages will be forwarded without
modification or reordering.   An example of this would be a NAT forwarder or
TCP connection optimizer (e.g. for a high-latency connection such as a
geosynchronous satellite link).</t>
</list></t>

<t>Middleboxes that do not meet one of the above criteria are very likely to
fail in unexpected and difficult-to-diagnose ways.   For example, a DNS
load balancer might unbundle DNS messages from the incoming TCP stream and
forward each message from the stream to a different DNS server.   If such
a load balancer is in use, and the DNS servers it points implement DSO and
are configured to enable DSO, DSO session establishment will succeed, but
no coherent session will exist between the client and the server.   If such
a load balancer is pointed at a DNS server that does not implement DSO or
is configured not to allow DSO, no such problem will exist, but such a
configuration risks unexpected failure if new server software is installed
which does implement DSO.</t>

<t>It is of course possible to implement a middlebox that properly supports DSO.
It is even possible to implement one that implements DSO with long-lived operations.
This can be done either by maintaining a 1:1 correspondence between incoming
and outgoing connections, as mentioned above, or by terminating incoming
sessions at the middlebox, but maintaining state in the middlebox about any
long-lived that are requested.   Specifying this in detail is beyond the scope
of this document.</t>

</section>
<section anchor="tcp-delayed-acknowledgement-considerations" title="TCP Delayed Acknowledgement Considerations">

<t>Because DSO Unidirectional messages do not elicit a response from the receiver, they will
trigger the TCP stack to use the TCP Delayed Acknowledgment algorithm <xref target="NagleDA"/>, which
will create inappropriate delays in message flow on the TCP connection.</t>

<t>At the time that this document is being prepared for publication, it is known that at least one
TCP implementation provides the ability for the recipient of a TCP message to signal that it is not
going to send a response, and hence Nagle’s algorithm need not be used.  Implementations on
operating systems where this feature is available SHOULD make use of it.</t>

<t>With most TCP implementations, for DSO requests that generate a
response, the TCP data acknowledgement (generated because data has
been received by TCP), the TCP window update (generated because TCP
has delivered that data to the receiving software), and the DSO
response (generated by the receiving application-layer software
itself) are all combined into a single IP packet.  Combining these
three elements into a single IP packet can give a significant
improvement in network efficiency, assuming that the DSO response is
sent before the TCP Delayed Acknowledgement timer goes off.</t>

<t>For DSO requests that do not generate a response, if the TCP
implementation receives no signal from the recipient indicating that no
response will be forthcoming, it can only wait fruitlessly for the
response that isn’t coming, until the Delayed
ACK timer fires <xref target="RFC1122"/> (typically 200 milliseconds).   Only then
does it send the TCP ACK and window update.</t>

<t>In conjunction with
Nagle’s Algorithm at the sender, this can delay the sender’s
transmission of its next (non-full-sized) TCP segment, while the
sender is waiting for its previous (non-full-sized) TCP segment to be
acknowledged, which won’t happen until the Delayed ACK timer fires.</t>

<t>Nagle’s Algorithm exists to combine multiple small application writes
into more-efficient large TCP segments, to guard against wasteful use
of the network by applications that would otherwise transmit a stream
of small TCP segments, but in this case Nagle’s Algorithm (created to
improve network efficiency) can interact badly with TCP’s Delayed ACK
feature (also created to improve network efficiency) <xref target="NagleDA"/> with
the result of delaying some messages by up to 200 milliseconds.</t>

<t>It is possible with many TCP implementations either to disable Nagle’s algorithm, or to disable
delayed acknowledgment, or both.  Unfortunately, this affects every message sent over the
connection, not just those connections for which this help is needed.  It may give the
implementor the impression that their software is going faster, but on a heavily-used network,
or a low-bandwidth or high-latency network, the result can be a significant degradation in
overall network performance.</t>

<t>For this reason, we do not recommend either of these strategies, and instead recommend that
implementations take advantage of the capability to signal that no response will be sent, where
that capability is present.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for    DSO session-management TLVs</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="tcp-fast-open-considerations" title="TCP Fast Open Considerations">

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.   If a new TLV is specified that does have this
property, the specification should require that some kind of exchange be done with
the server before work is done.   That is, the TLV that requires work could not
be processed without a round-trip from the server to the client to verify that
the source address of the packet is reachable.</t>

<t>One way to accomplish this would be to have the client send a TLV indicating that
it wishes to have the server do work of this sort; this TLV would not actually result
in work being done, but would request a nonce from the server.   The client could
then use that nonce to request that work be done.</t>

<t>Alternatively, the server could simply disable TCP fast open.   This same problem
would exist for DNS-over-TLS with TLS early data; the same remedies would apply.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
and Bernie Volz
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC7413;
&RFC8446;
&RFC1122;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAEB3dFsAA+y963YbR5Ym+j+eIof+YdINwKQky7fVa5qWqCp26VYkZXd1
V59ZSSBJZgnIRCMTpFCy5lnmWebJzr7HjswERNmuWnV6HfdoSgISkRE7duzY
12+Px+PQlu28+C57+vI8O2/ztrhaz7NXy2KVt2VdNWFWT6t8AQ/MVvlVOy6L
9mo8q5p6OW6KpoFHxk15XeXz8dGjMIOff5c9ODz6ZvzN+EEol6vvsna1btoH
h4ffHj4I+arIv8tOq7ZYVUUb7q7pta9eZz/Vq7dldZ39blWvl+HtXXxo/BRf
G6Z5+13WtLOwXuJLmu+yo8OHX42yr79+/DiEaT2DX3+XrWFu34Rl+V3IsnHW
1lP632azWBVXDf+9XrX0j5Cv25t6RU/CnywrKxj0bJL9UMznZUMf8brP8o3/
sF5dx9ll55umLRZN9gRIBUOX68UIvpxO6NH88nJV3MLT50/o3w28uoB1fPvV
YfbkJl/BGEBy/Iy+npbtBl5XzO7qepY9gX/xx/UMZvHkOPv20eHjh/LRumpX
8PCb82P6YHlTV/DQPx1l+4+/OjzIHj14OD4CotOXxSIv599lq3zzL2UzncAC
0kWfT2A2RXNTrgq37PN2DTNMv6G1Hy+X8yIuUhf1qirkq9f56m32U75xi3qy
BoZqy6rurOirQ+Caj63o0eE3B9m33z4eHx0eJSuaytz+Jcf3Tqb1Il3Yv06y
p+UUGKupK7eyf61vqs4XtLBzmN9sXcXNvSimN1U9r6/Lokk2VJ7066e/j7MX
+XU+y+dFlT0pYEGFfPzq3VW9mmXn07KopkwhRx3+1pHm1b89yh797rhDmaps
i1n2B+D0Ga3U6PCXfPYvDU+pT4TzYSKc56v8vxURGljQdipcTLLnxSKhwAWM
Ez+jxb8sLy9v8k1Ox3k9B4a9Tnj89eQVCIj6HTDuN27qP4CsBBl6Wa88f/94
kR1+9fDwwfjQnu4yuUx9AdKlrv7lan29HuBimPrrdQNCb1X62deL9GNawJsq
v7oq5yV8PEtmvrfnRQzsTXl94+b68kn24OvHh1um6c7it0ffHmTfPP56fPTw
YXIWlzKXf7nMq+u/0CpCWcGWLuAeuS2QNV7m1/Pi6TFzSZuvrnFiN227/O7L
L+/u7iYNSRw91CinvlzmIDeaLyv85ayY55tilk/ffskj8L118eR19rpY0ZuQ
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
1Y19ZeN+slk4jdapi6X39JNfQIWAJalD/tVeNEE9f6JBBRcAcN1NfOv0hHpx
I0W945186m/W5AejbWk3fsYahAlpPSO51jZZtx2YuWSGXL7q+Ag+c4fn9DHn
dy8vCX6ndSOT8MriQzHrSXpVrxwxRi5bAJVcO0Ws0YUBl0Af7mdO4HeCRdR5
a897rjH40ILAaaS5HHdpTw4+JQFQMNgbtZoW6QNXEuJGvMSYImAxrC2qbaEd
tzkApbHYcCcalYYZJaKRpp5sa/Pmi5TlDPXyuLwvTFyr8bA730aij5ra6rwb
mlxAgZaet7ReCY/GTC9ZigsouDIgy0ZIssXCtmwxq9e/KjjvuX9gPg6Lkrq/
6KC+cU443ob3n3nHHMOWDZHe01WYT+Af/e8T0aUFe5oh687gfhd8LU92kIvq
itmBOAr7vkktsGcC2m+3YsEFw4KLPkfm3c4I5gkczmbcttiJEW5X3sIvo99H
iedRkAapd68UxU/3qLrT98kpHL3cyo672DuLHb28vEsI17nZRr3d6jQ8dImL
nTS5kSMNBmJmET9D71cK2rv+9gRlXc3mbKqXA6yC4gPj893iQO9/K7cmpW5h
HiBGGCTGMAWGlx3uveysv+zwS5eNwghbgGGmKL734vz0d0gMRW7SiqQ08sOR
isTTESRFPx5XxpfQwaVyXC7X7YWb5M64WlfCrKjTSvcSSq9Sw6M2VJD0BeRW
VHiVqzoFYBslbOuyxZpAIUC+Vq1pnEb3OZKJrn08Fz73oeNCp4QfmY5m+1hn
NQLI+ebh4YcP7EsiCBNsDUdLlEKZICkGEYSu1xI2ICCs9SLKJI0o27HsKLu3
ZCMlIEMuM8n2e81dIL2POnE3DQhrZCTZW9Tl3T8zEeYVhgSYB3wyBApI6p0i
zrZ5zt03+ZdhN/eMpPsrN+RCVfBaMs6wWn1tvXVQ58MsyoJooK8mryImRjH/
4wq5mRcl3zTZF1+Qa/6LLzo8HHqzKBXRUNxfXdeZm1c+5/gWpdKcXmlWpT3R
SAMaD3ilzZ09V9K4QaEfc8/eidbo2FusLb6Y9Mxp76gbzqLmQLSEvnG8L77Q
aQAdrM8uLS/YWVz5DW+UXb74Qhzi8Es0EBknmQrNeEJBtby7m5q6DmoXmhR2
8coloxAqRNK6+vxViAeeXMCt9JeKeTOok1O+bfbHNRr4Vu3+iPpsudJ3HOAN
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
NspnRW8TjoyVbMJqvbeFOwcUjXkb1L6pbKWybaBiNW6usC4yZbCZDeTGRJOv
w7qyYNnU0NGk+U3UrZN7nnEWTv/3ck1yhPpZ3Q1FSCa220kF1WyzBcNEwhCr
FQYRApqy7Y0lbpF0pb6g2yCzBcIStqOYx6CGlWDvqNeP0JLbt1j7PTZSVpEn
Tqp02G43SEHD498yDOVgt0WJnWmnmNiaZWsOxnA5h4zTGYQUi4808/2FGRoX
HyWBmG4JP3ze9KQnl2h2spJ8PamVoViJbkybV/hdX/eRGFzkwnVk3FmKtXM9
HHzudRGRTk091RA23mzeVb3gTeDyHqAyyFRzgAxkjGyJQUWuX9SzAtv6iJaA
o/z+yWtz0HkJYbVfmtGiyRABayYZNoFIzvlmNE7Nd+lXR1Iy+eDo4QPsoz4Q
6gcFAZvkLEj0Sb4AxwKwnyGdx7sbKdB0L2N43TUlOlO9LIWffkog58k5wkea
S1Eo8kox9di5b+eekRM8TnjAu5x0CtRf49uWq+IKDgrQWHaRgmg4d9kFwWO5
mhfvpGhjZOKyvPLtQQXvowNVQWRAV1qaMuTIO6Wa6XzJE0qa+VwWLeeIdYAr
KfdzYp7JTlDYg2zv93osHYRtwkXi7J1cMfV3dWSkJ/WW4dg4CyYbd/TtHW6S
RhK7FmSyi85h8VlOvfLLXn3l4BTvWTbZlXhbhfl95LBfwq+Sw1saIHeSL3+d
eIZ3UI4Tnd+BAsvYIC4My2UNvMishmVjmvaFRZg6Pt+lvg0uVa7opFD2zPOI
5G0wM0hvtn44s6a7n510uKG+SwQH8Mc3p2cnTzVlas2FVkCKkHOapIzDHlFK
ro6aAAYypHXqR/iJiOOSKLDYKp2Mt0jz2YxL31jrjfIindPxzED6YYSJD/mT
NaeolALHmUfhMryToW6tUVG33/R91ueCf6xSa88eEKY+f767WcNsjoEqqWzr
1ItQRYRlc6Wow5p7kBJX/caIxE7ZBQkz/nSDZUTWe24AFz9owENHgTP8F3GX
+9ZJUnOqHmOOHgdJBdwKui+z3zECcacUf1pvKEuaOPpqLDdqt9PIoD+MRhvw
GEjSLFpgsBcosnyyo8VsKquf9sg2fFlqEny0sDXa0EhD2ygPrK9u77Ia6Meu
BlKm6Qk+ccGlBPdRlJ5onnY1I7dFfRUzTLccg47y4i4NfySQNz+id/rUKzfK
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
9sl8vcsWnPBuvTRg2VeJMt4j3fVymir2ZGVVKasslVdi6SRekBZN39l6kiZr
NFmDpZKaQX6krAKqR8wrAgMSU+7huZxG1KbEQS3TAb1omqXPpD86THk1oroS
2QspLSWJgRtS5ft24bWs5cGFPYBsf75DygGoloPyJjor3JflqgqWVrJoX8Qy
4yqIQVGrDIwnmUBN+Vk+ZWoVZKQ3EAAwT+hcXgPVOxxnEWABRAZug4WDUhaD
mDT3Yq6RPhuJ7Eg8L0bwsF0HBugAK9nh+xyS6TnX2XX7SQA0B0NKrfnZ0/z2
tkAoIPUTeLmJnRWG3fZqMzVIMKq+iywj7phBCkRjZD56EXg93NYxYmVDSMCd
Ggm8s1VxwFDKjuw1iUTwKMieM9u4jz9SrJVbtc+q1upwGeyZBcp6ev11sfdq
uyHR8BozOxPLOLqIE9xImxS8sk3ZK3qB4whyuB5rhUXH6fFg/Qd6lJywlEAo
t8/HJlF6bjy4chWHkVcJsEXox6Hn/EtoUSLQHew6Gbk/B/rkkQREgafFqU/0
TGYygKfDGAe5D1ntdz4bbiSXaRA0plGNAn80FQ2Z/vMlebarj0B3hjnHT5TV
AmFe2CHOh6mvNmcmRlj4Swb9Y4cInmOKZxd5NFokm8eHnBwKJTd55HXSZhJi
HO8MfqfFYhXUFJsaVxZT6PodiKPSrVjH0THR6NuKsYTcZ+nWIHzVt8pOol95
7OPamydePvNlEUj7HGZJSyJgmbO89uvKFsl38J+8qWmmzZC1ZegxeW55Kr6g
vhYZ2TfmsP2rb41BBcYpaG6oY1UyR+QzE2n8VsO81IotvPSBkUReTzveZ32f
W5CYw6eouWbhpGgrKY+ysyhHUZ95KNbqYyUuCFGr/f09TiLMZyY2nh2UfXfO
mEcrMb50Yzu/Kw0xrl6bMuctv1KnNoSPC1FlenNbjItdh90gJ20X3ZDONmVZ
Su0Dhowz33gJQbuvVArzv6QjX3208iKxU39LagNY7POu9XmC53mnKQhKJIe5
G5v+DvMRppv2Xv5pq1MR/NOy3YHJd90tqzPY+uNw1SzuRZcR8Yly+7URRe73
4fZWjLRx+EP2yD8HoAiN3HMxJ+nlspW5HotgFghDrj7L93RoZttVuHsYh/Pm
oZtXU4S+Nk/dOMgl/20RTNTfyel61QwannAqgu3a6u9h8RTMnuhW9ItCm0SM
1ar7ts3o8CX2Xtc107qEHwbSZ3zQrgEA

-->

</rfc>

