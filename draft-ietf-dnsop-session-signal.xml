<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version  -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7766 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC7830 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC1918 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC8126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml">
<!ENTITY RFC7858 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml">
<!ENTITY I-D.ietf-dnssd-push SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-push.xml">
<!ENTITY RFC7828 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7828.xml">
<!ENTITY I-D.ietf-dnsop-no-response-issue SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-no-response-issue.xml">
<!ENTITY RFC6763 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY I-D.ietf-doh-dns-over-https SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-doh-dns-over-https.xml">
<!ENTITY I-D.ietf-dnssd-mdns-relay SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnssd-mdns-relay.xml">
<!ENTITY RFC6762 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6762.xml">
<!ENTITY RFC5382 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5382.xml">
<!ENTITY RFC7857 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7857.xml">
<!ENTITY RFC2132 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY I-D.ietf-dprive-padding-policy SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-padding-policy.xml">
<!ENTITY RFC1122 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-dnsop-session-signal-20" category="std" updates="1035, 7766">

  <front>
    <title>DNS Stateful Operations</title>

    <author initials="R." surname="Bellis" fullname="Ray Bellis">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>CA 94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 (650) 423-1200</phone>
        <email>ray@isc.org</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <code>CA 95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="J." surname="Dickinson" fullname="John Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>jad@sinodun.com</email>
      </address>
    </author>
    <author initials="S." surname="Dickinson" fullname="Sara Dickinson">
      <organization abbrev="Sinodun">Sinodun Internet Technologies</organization>
      <address>
        <postal>
          <street>Magadalen Centre</street> <street>Oxford Science Park</street>
          <city>Oxford</city>
          <code>OX4 4GA</code>
          <country>United Kingdom</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <author initials="T." surname="Lemon" fullname="Ted Lemon">
      <organization>Nibbhaya Consulting</organization>
      <address>
        <postal>
          <street>P.O. Box 958</street>
          <city>Brattleboro</city>
          <code>VT 05302-0958</code>
          <country>USA</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>
    <author initials="T." surname="Pusateri" fullname="Tom Pusateri">
      <organization>Unaffiliated</organization>
      <address>
        <postal>
          <street></street>
          <city>Raleigh</city>
          <code>NC 27608</code>
          <country>USA</country>
        </postal>
        <phone>+1 (919) 867-1330</phone>
        <email>pusateri@bangj.com</email>
      </address>
    </author>

    <date year="2018" month="December" day="06"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a new DNS OPCODE for DNS Stateful Operations
(DSO).  DSO messages communicate operations within persistent stateful
sessions, using type-length-value (TLV) syntax.  Three TLVs are defined
that manage session timeouts, termination, and encryption padding, and a
framework is defined for extensions to enable new stateful operations.
This document updates RFC 1035 by adding a new DNS header opcode which
has different message semantics, and a new result code.  This document
updates RFC 7766 by redefining a session, providing new guidance on
connection re-use, and providing a new mechanism for handling session
idle timeouts.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document specifies a mechanism for managing stateful DNS connections.
DNS most commonly operates over a UDP transport, but can also operate over
streaming transports; the original DNS RFC specifies DNS over TCP <xref target="RFC1035"/>
and a profile for DNS over TLS <xref target="RFC7858"/> has been specified.
These transports can offer persistent, long-lived sessions and therefore when
using them for transporting DNS messages it is of benefit to have a mechanism
that can establish parameters associated with those sessions, such as timeouts.
In such situations it is also advantageous to support server-initiated messages
(such as DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>).</t>

<t>The existing EDNS(0) Extension Mechanism for DNS <xref target="RFC6891"/> is explicitly
defined to only have “per-message” semantics. While EDNS(0) has been used to
signal at least one session-related parameter (edns-tcp-keepalive EDNS0 Option
<xref target="RFC7828"/>) the result is less than optimal due to the restrictions
imposed by the EDNS(0) semantics and the lack of server-initiated signalling. 
For example, a server cannot arbitrarily 
instruct a client to close a connection because the server can only send EDNS(0) options 
in responses to queries that contained EDNS(0) options.</t>

<t>This document defines a new DNS OPCODE, DSO ([TBA1], tentatively 6), for DNS Stateful Operations.
DSO messages are used to communicate operations within persistent
stateful sessions, expressed using type-length-value (TLV) syntax.
This document defines an initial set of three TLVs,
used to manage session timeouts, termination, and encryption padding.</t>

<t>All three TLVs defined here are mandatory for all implementations of DSO.
Further TLVs may be defined in additional specifications.</t>

<t>DSO messages may or may not be acknowledged; this is signalled by providing a
non-zero message ID for messages that must be acknowledged (DSO request messages) and a zero message
ID for messages that are not to be acknowledged (DSO unidirectional messages), and is also specified in the definition
of a particular DSO message type.   Messages are pipelined; answers may appear out
of order when more than one answer is pending.</t>

<t>The format for DSO messages
(<xref target="format"/>) differs somewhat from the traditional DNS message
format used for standard queries and responses.
The standard twelve-byte header is used, but the four count fields
(QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) are set to zero and accordingly their
corresponding sections are not present.</t>

<t>The actual data pertaining to DNS Stateful Operations
(expressed in TLV syntax) is appended to the end of the DNS message header.
Just as in traditional DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/>
the stream protocol carrying DSO messages (which are just another kind of DNS message)
frames them by putting a 16-bit message length at the start, so
the length of the DSO message is determined from that length, rather than from any of
the DNS header counts.</t>

<t>When displayed using packet analyzer tools that have not been
updated to recognize the DSO format, this
will result in the DSO data being displayed
as unknown additional data after the end of the DNS message.</t>

<t>This new format has distinct advantages over an RR-based format because it
is more explicit and more compact. Each TLV definition is specific
to its use case, and as a result contains no redundant or overloaded fields.
Importantly, it completely avoids conflating DNS Stateful Operations in any way 
with normal DNS operations or with existing EDNS(0)-based functionality.
A goal of this approach is to avoid the operational issues that have
befallen EDNS(0), particularly relating to middlebox behaviour (see for example
<xref target="I-D.ietf-dnsop-no-response-issue"/> sections 3.2 and 4).</t>

<t>With EDNS(0), multiple options may be packed into a single OPT pseudo-RR,
and there is no generalized mechanism for a client to be able to tell
whether a server has processed or otherwise acted upon each individual
option within the combined OPT pseudo-RR.
The specifications for each individual option need to define how each
different option is to be acknowledged, if necessary.</t>

<t>In contrast to EDNS(0), with DSO there is no
compelling motivation to pack multiple operations into a single
message for efficiency reasons, because DSO
always operates using a connection-oriented transport protocol.
Each DSO operation is communicated in its own separate
DNS message, and the transport protocol can take care of packing
several DNS messages into a single IP packet if appropriate.
For example, TCP can pack multiple small DNS messages into a single TCP segment.
This simplification allows for clearer semantics.
Each DSO request message communicates just one primary operation,
and the RCODE in the corresponding response message indicates the
success or failure of that operation.</t>

</section>
<section anchor="requirements-language" title="Requirements Language">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”,
and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="hanging">
  <t hangText='DSO:'>
  DNS Stateful Operations.</t>
  <t hangText='connection:'>
  a bidirectional byte (or message) stream,
where the bytes (or messages) are delivered reliably and in-order,
such as provided by using
DNS over TCP <xref target="RFC1035"/> <xref target="RFC7766"/> or DNS over TLS <xref target="RFC7858"/>.</t>
  <t hangText='session:'>
  The unqualified term “session” in the context of this document refers to
a persistent network connection between two endpoints which allows for
the exchange of
DNS messages over a connection where either end of the connection can
send messages to the other end.
(The term has no relationship to the “session layer” of the
OSI “seven-layer model”.)</t>
  <t hangText='DSO Session:'>
  a session established between two endpoints that acknowledge
persistent DNS state via the exchange of DSO messages over the connection.
This is distinct from a DNS-over-TCP session as described in
the previous specification for DNS over TCP <xref target="RFC7766"/>.</t>
  <t hangText='close gracefully:'>
  a normal session shutdown, where the client closes the TCP connection
to the server using a graceful close, such that no data is lost
(e.g., using TCP FIN, see <xref target="sessiontermination"/>).</t>
  <t hangText='forcibly abort:'>
  a session shutdown as a result of a fatal error,
where the TCP connection is unilaterally aborted without regard for data loss
(e.g., using TCP RST, see <xref target="sessiontermination"/>).</t>
  <t hangText='server:'>
  the software with a listening socket, awaiting
incoming connection requests, in the usual DNS sense.</t>
  <t hangText='client:'>
  the software which initiates a connection
to the server’s listening socket, in the usual DNS sense.</t>
  <t hangText='initiator:'>
  the software which sends a DSO request message or a DSO unidirectional message during a DSO
  session.  Either a client or server can be an initiator</t>
  <t hangText='responder:'>
  the software which receives a DSO request message or a DSO unidirectional message during a DSO
  session.  Either a client or server can be a responder.</t>
  <t hangText='sender:'>
  the software which is sending a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='receiver:'>
  the software which is receiving a DNS message, a DSO message, a DNS response, or a DSO response.</t>
  <t hangText='service instance:'>
  a specific instance of server software running on a specific host (<xref target="serviceinstances"/>).</t>
  <t hangText='long-lived operation:'>
  a long-lived operation is an outstanding operation on a DSO session where
either the client or server, acting as initiator, has requested that the
responder send new information regarding the request, as it becomes available.</t>
</list></t>

<t>Early Data:
A TLS 1.3 handshake containing early data that begins a DSO session (<xref target="RFC8446"/> section 2.3).
TCP Fast Open is only permitted when using TLS.</t>

<t><list style="hanging">
  <t hangText='DNS message:'>
  any DNS message, including DNS queries, response, updates, DSO messages, etc.</t>
  <t hangText='DNS request message:'>
  any DNS message where the QR bit is 0.</t>
  <t hangText='DNS response message:'>
  any DNS message where the QR bit is 1.</t>
  <t hangText='DSO message:'>
  a DSO request message, DSO unidirectional message, or a DSO response to a DSO request message.
If the QR bit is 1 in a DSO message, it is a DSO response message.
If the QR bit is 0 in a DSO message, it is a DSO request message or DSO unidirectional message,
as determined by the specification of its primary TLV.</t>
  <t hangText='DSO response message:'>
  a response to a DSO request message.</t>
  <t hangText='DSO request message:'>
  a DSO message that requires a response.</t>
  <t hangText='DSO unidirectional message:'>
  a DSO message that does not require and cannot induce a response.</t>
  <t hangText='Primary TLV:'>
  The first TLV in a DSO message or DSO response; in the DSO message
this determines the nature of the operation being performed.</t>
  <t hangText='Additional TLV:'>
  Any TLVs in a DSO message response that follow the primary TLV.</t>
  <t hangText='Response Primary TLV:'>
  The (optional) first TLV in a DSO response.</t>
  <t hangText='Response Additional TLV:'>
  Any TLVs in a DSO response that follow the (optional) Response Primary TLV.</t>
  <t hangText='inactivity timer:'>
  the time since the most recent non-keepalive DNS message was sent or received.
(see <xref target="inactivetimer"/>)</t>
  <t hangText='keepalive timer:'>
  the time since the most recent DNS message was sent or received.
(see <xref target="keepalivetimer"/>)</t>
  <t hangText='session timeouts:'>
  the inactivity timer and the keepalive timer.</t>
  <t hangText='inactivity timeout:'>
  the maximum value that the inactivity timer can have before the connection is gracefully closed.</t>
  <t hangText='keepalive interval:'>
  the maximum value that the keepalive timer can have before the client is required to send a keepalive.
(see <xref target="keepalive"/>)</t>
  <t hangText='resetting a timer:'>
  setting the timer value to zero and restarting the timer.</t>
  <t hangText='clearing a timer:'>
  setting the timer value to zero but not restarting the timer.</t>
</list></t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="applicability" title="Applicability">

<t>DNS Stateful Operations are applicable to several known use cases and are only
applicable on transports that are capable of supporting a DSO Session.</t>

<section anchor="use-cases" title="Use Cases">

<t>There are several use cases for DNS Stateful operations that can 
be described here.</t>

<section anchor="sessionmanagement" title="Session Management">
<t>Firstly, establishing session parameters such as server-defined timeouts is of 
great use in the 
general management of persistent connections. For example, using DSO sessions 
for stub-to-recursive DNS-over-TLS <xref target="RFC7858"/> is more flexible for both the 
client and the server than attempting to manage sessions using just the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>.
The simple set of TLVs defined in this document is
sufficient to greatly enhance connection management for this use case.</t>

</section>
<section anchor="subscriptions" title="Long-lived Subscriptions">

<t>Secondly, DNS-SD <xref target="RFC6763"/> has evolved into a naturally session-based mechanism where,
for example, long-lived subscriptions lend themselves to ‘push’ mechanisms as 
opposed to polling. Long-lived stateful connections and server-initiated 
messages align with this use case <xref target="I-D.ietf-dnssd-push"/>.</t>

<t>A general use case is that DNS traffic is often bursty but session establishment 
can be expensive. One challenge with long-lived connections is to maintain 
sufficient traffic to maintain NAT and firewall state.
To mitigate this issue this document introduces a
new concept for the DNS, that is DSO “Keepalive traffic”.
This traffic carries no DNS data and is not considered ‘activity’
in the classic DNS sense, but serves to maintain state in middleboxes,
and to assure client and server that they still have connectivity to each other.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="transports" title="Applicable Transports">

<t>DNS Stateful Operations are applicable in cases where it is useful to maintain an open session
between a DNS client and server, where the transport allows such a session to be maintained, and
where the transport guarantees in-order delivery of messages, on which DSO depends.  Examples of
transports that can support DNS Stateful Operations are DNS-over-TCP <xref target="RFC1035"/> <xref target="RFC7766"/> and
DNS-over-TLS <xref target="RFC7858"/>.</t>

<t>Note that in the case of DNS over TLS, there is no mechanism for upgrading from DNS-over-TCP
to DNS-over-TLS mid-connection (see <xref target="RFC7858"/> section 7).
A connection is either DNS-over-TCP from the start, or DNS-over-TLS from the start.</t>

<t>DNS Stateful Operations are not applicable for transports that cannot support clean session
semantics, or that do not guarantee in-order delivery.   While in principle such a transport
could be constructed over UDP, the current DNS specification over UDP transport <xref target="RFC1035"/>
does not provide in-order delivery or session semantics, and hence cannot be used.  Similarly,
DNS-over-HTTP <xref target="I-D.ietf-doh-dns-over-https"/> cannot be used because HTTP has its own
mechanism for managing sessions, and this is incompatible with the mechanism specified here.</t>

<t>No other transports are currently defined for use with DNS Stateful Operations.  Such transports
can be added in the future, if they meet the requirements set out in the first paragraph of this
section.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="details" title="Protocol Details">

<t>The overall flow of DNS Stateful Operations goes through a series of phases:</t>

<t><list style="hanging">
  <t hangText='Connection Establishment:'>
  A client establishes a connection to a server. (<xref target="transports"/>)</t>
  <t hangText='Connected but sessionless:'>
  A connection exists, but a DSO session has not been established.   DNS messages
can be sent from the client to server, and DNS responses can be sent from servers
to clients.   In this state a client that wishes to use DSO can attempt to establish
a DSO session (<xref target="establishment"/>).
Standard DNS-over-TCP inactivity timeout handling is in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='DSO Session Establishment in Progress:'>
  A client has sent a DSO request, but has not yet received a DSO response.   In this
phase, the client may send more DSO requests and more DNS requests, but MUST NOT send
DSO unidirectional messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Establishment Failed:'>
  The attempt to establish the DSO session did not succeed.   At this point, the client
is permitted to continue operating without a DSO session (Connected but Sessionless) but
does not send further DSO messages (<xref target="establishment"/>).</t>
  <t hangText='DSO Session Established:'>
  Both client and server may send DSO messages and DNS messages; both may send replies
in response to messages they receive (<xref target="stabops"/>).   The inactivity timer (<xref target="inactivetimer"/>) is
active; the keepalive timer (<xref target="keepalivetimer"/>) is active.
Standard DNS-over-TCP inactivity timeout handling is no longer in effect <xref target="RFC7766"/> (see <xref target="edns0keepalive"/>).</t>
  <t hangText='Server Shutdown:'>
  The server has decided to gracefully terminate the session, and has sent the client
a Retry Delay message (<xref target="retry"/>).   There may still be unprocessed messages from the client;
the server will ignore these.   The server will not send any further messages to the
client (<xref target="outstanding"/>).</t>
  <t hangText='Client Shutdown:'>
  The client has decided to disconnect, either because it no longer needs service,
the connection is inactive (<xref target="inactive"/>), or because
the server sent it a Retry Delay message (<xref target="retry"/>).  The client closes the connection gracefully <xref target="sessiontermination"/>.</t>
  <t hangText='Reconnect:'>
  The client disconnected as a result of a server shutdown.   The client either waits
for the server-specified Retry Delay to expire (<xref target="reconnect"/>), or else contacts a different server
instance.  If the client no longer needs service, it does not reconnect.</t>
  <t hangText='Forcibly Abort:'>
  The client or server detected a protocol error, and further communication would have undefined
behavior.  The client or server forcibly aborts the connection (<xref target="sessiontermination"/>).</t>
  <t hangText='Abort Reconnect Wait:'>
  The client has forcibly aborted the connection, but still needs service.   Or, the server
forcibly aborted the connection, but the client still needs service.   The client either
connects to a different service instance (<xref target="serviceinstances"/>) or waits to reconnect (<xref target="forcereconnect"/>).</t>
</list></t>

<section anchor="establishment" title="DSO Session Establishment">

<t>In order for a session to be established between a client and a server, the client must first
establish a connection to the server, using an applicable transport (see <xref target="applicability"/>).</t>

<t>In some environments it may be known in advance by external means
that both client and server support DSO, and in these cases either
client or server may initiate DSO messages at any time.  In this
case, the session is established as soon as the connection is established;
this is referred to as implicit session establishment.</t>

<t>However, in the typical case a server will not know in advance whether a
client supports DSO, so in general, unless it is known in advance by other means
that a client does support DSO, a server MUST NOT initiate DSO request messages
or DSO unidirectional messages
until a DSO Session has been mutually established
by at least one successful DSO request/response exchange
initiated by the client, as described below.   This is referred to as explicit
session establishment.</t>

<t>Until a DSO session has been implicitly or explicitly established, a client MUST NOT initiate
DSO unidirectional messages.</t>

<t>A DSO Session is established over a connection by the client
sending a DSO request message, such as a DSO Keepalive request message (<xref target="keepalive"/>),
and receiving a response, with matching MESSAGE ID, and RCODE
set to NOERROR (0), indicating that the DSO request was successful.</t>

<t>Some DSO messages are permitted as early data (<xref target="zrtt"/>).  Others are not.
Unidirectional messages are never permitted as early data unless an implicit session
exists.</t>

<t>If a server receives a DSO message in early data whose primary TLV is not
permitted to appear in early data, the server MUST forcibly abort the connection.  If a
client receives a DSO message in early data, and there is no implicit DSO
session, the client MUST forcibly abort the connection.   This can only be enforced on
TLS connections; therefore, servers MUST NOT enable TFO when listening for a connection
that does not require TLS.</t>

<section anchor="stabfail" title="Session Establishment Failure">

<t>If the response RCODE is set to NOTIMP (4), or in practise any value other than NOERROR (0) or DSOTYPENI
(defined below), then the client MUST assume that the server does
not implement DSO at all. In this case the client is permitted to continue
sending DNS messages on that connection, but the client MUST NOT
issue further DSO messages on that connection.</t>

<t>If the RCODE in the response is set to DSOTYPENI
(“DSO-TYPE Not Implemented”, [TBA2] tentatively RCODE 11)
this indicates that the server does support DSO, but does not implement
the DSO-TYPE of the primary TLV in this DSO request message.
A server implementing DSO MUST NOT return DSOTYPENI
for a DSO Keepalive request message, because the Keepalive TLV is mandatory to implement.
But in the future, if a client attempts to establish a DSO Session
using a response-requiring DSO request message using some newly-defined DSO-TYPE that the server
does not understand, that would result in a DSOTYPENI response.
If the server returns DSOTYPENI then a DSO Session is not
considered established, but the client is permitted to continue
sending DNS messages on the connection,
including other DSO messages such as the DSO Keepalive,
which may result in a successful NOERROR response,
yielding the establishment of a DSO Session.</t>

<t>Two other possibilities exist: the server might drop the connection, or
the server might send no response to the DSO message.</t>

<t>In the first
case, the client SHOULD mark that service instance as not supporting DSO, and not
attempt a DSO connection for some period of time (at least an hour)
after the failed attempt.   The client MAY reconnect but not use
DSO, if appropriate (<xref target="dropreconnect"/>).</t>

<t>In the second case, the client SHOULD wait 30 seconds, after which time the server will
be assumed not to support DSO.  If the server doesn’t respond within 30 seconds, the client MUST
forcibly abort the connection to the server, since the server’s behavior is out of spec, and
hence its state is undefined.  The client MAY reconnect, but not use DSO, if
appropriate (<xref target="forcereconnect"/>).</t>

</section>
<section anchor="stabsuccess" title="Session Establishment Success">

<t>When the server receives a DSO request message
from a client, and transmits a successful NOERROR response to that
request, the server considers the DSO Session established.</t>

<t>When the client receives the server’s NOERROR response to its
DSO request message, the client considers the DSO Session established.</t>

<t>Once a DSO Session has been established,
either end may unilaterally send appropriate DSO messages at any time,
and therefore either client or server may be the initiator of a message.</t>

</section>
</section>
<section anchor="stabops" title="Operations After Session Establishment">

<t>Once a DSO Session has been established,
clients and servers should behave as described in this specification with
regard to inactivity timeouts and session termination, not as previously
prescribed in the earlier specification for DNS over TCP <xref target="RFC7766"/>.</t>

<t>Because a server that supports DNS Stateful Operations MUST return an RCODE
of NOERROR when it receives a Keepalive TLV DSO request message,
the Keepalive TLV is an ideal candidate for use in establishing
a DSO session.
Any other option that can only succeed when sent to a server of the desired kind
is also a good candidate for use in establishing a DSO session.
For clients that implement only the DSO-TYPEs defined in
this base specification, sending a Keepalive TLV is the only
DSO request message they have available to initiate a DSO Session.
Even for clients that do implement other future DSO-TYPEs, for simplicity
they MAY elect to always send an initial DSO Keepalive
request message as their way of initiating a DSO Session.
A future definition of a new response-requiring DSO-TYPE
gives implementers the option of using that new DSO-TYPE if they wish,
but does not change the fact that sending a Keepalive TLV
remains a valid way of initiating a DSO Session.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontermination" title="Session Termination">

<t>A “DSO Session” is terminated when the underlying connection is closed.
Sessions are “closed gracefully” as a result of the server closing a session because it
is overloaded, the client closing the session because it is done,
or the client closing the session because it is inactive.   Sessions are “forcibly aborted”
when either the client or server closes the connection because of a protocol error.</t>

<t><list style="symbols">
  <t>Where this specification says, “close gracefully,”
that means sending a TLS close_notify (if TLS is in use) followed by a TCP FIN,
or the equivalents for other protocols.
Where this specification requires a connection to be closed gracefully,
the requirement to initiate that graceful close is placed on the client,
to place the burden of TCP’s TIME-WAIT state on the client rather than the server.</t>
  <t>Where this specification says, “forcibly abort,”
that means sending a TCP RST,
or the equivalent for other protocols.
In the BSD Sockets API this is achieved by setting the
SO_LINGER option to zero before closing the socket.</t>
</list></t>

<section anchor="handling-protocol-errors" title="Handling Protocol Errors">

<t>In protocol implementation there are generally two kinds of errors
that software writers have to deal with.
The first is situations that arise due to factors in the environment,
such as temporary loss of connectivity. While undesirable, these
situations do not indicate a flaw in the software, and they are
situations that software should generally be able to recover from.</t>

<t>The second is situations that should never happen when communicating
with a compliant DSO implementation.
If they do happen, they indicate a serious flaw in the protocol implementation,
beyond what it is reasonable to expect software to recover from.
This document describes this latter form of error condition as a
“fatal error” and specifies that an implementation encountering
a fatal error condition “MUST forcibly abort the connection immediately”.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="format" title="Message Format">

<t>A DSO message begins with
the standard twelve-byte DNS message header <xref target="RFC1035"/>
with the OPCODE field set to the DSO OPCODE.
However, unlike standard DNS messages, the question section, answer section,
authority records section and additional records sections are not present.
The corresponding count fields (QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT) MUST be
set to zero on transmission.</t>

<t>If a DSO message is received where any of the count fields are
not zero, then a FORMERR MUST be returned.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          MESSAGE ID                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |QR |    OPCODE     |            Z              |     RCODE     |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     QDCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ANCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     NSCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                     ARCOUNT (MUST be zero)                    |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO Data                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

<section anchor="header" title="DNS Header Fields in DSO Messages">

<t>In a DSO unidirectional message the MESSAGE ID field MUST be set to zero.
In a DSO request message the MESSAGE ID field MUST
be set to a unique nonzero value, that the initiator is not
currently using for any other active operation on this connection.
For the purposes here, a MESSAGE ID is in use in this DSO Session if the
initiator has used it in a DSO request message for which it is still awaiting a response,
or if the client has used it to set up a long-lived operation that has not yet been cancelled.
For example, a long-lived operation could be
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Whether a message is a DSO request message or a DSO unidirectional message is
determined only by the specification for the Primary TLV.
An acknowledgment cannot be requested by including a nonzero message ID
in a message that is required according to its primary TLV to be unidirectional.
Nor can an acknowledgment be prevented by sending a message ID of zero
in a message that is required to be a DSO request message according to its primary TLV.
A responder that receives either such malformed message MUST treat it
as a fatal error and forcibly abort the connection immediately.</t>

<t>In a DSO request message or DSO unidirectional message the DNS Header QR bit MUST be zero (QR=0).
If the QR bit is not zero the message is not a DSO request or DSO unidirectional message.</t>

<t>In a DSO response message the DNS Header QR bit MUST be one (QR=1).<vspace />
If the QR bit is not one, the message is not a response message.</t>

<t>In a DSO response message (QR=1) the MESSAGE ID field MUST contain a copy of the value of
the MESSAGE ID field in the DSO request message being responded to.
In a DSO response message (QR=1) the MESSAGE ID field MUST NOT be zero.
If a DSO response message (QR=1) is received where the MESSAGE ID is zero
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>The DNS Header OPCODE field holds the DSO OPCODE value.</t>

<t>The Z bits are currently unused in DSO messages,
and in both DSO request messages and DSO responses the
Z bits MUST be set to zero (0) on transmission and MUST be ignored
on reception.</t>

<t>In a DSO request message (QR=0) the RCODE is set according to the definition of the request.
For example, in a Retry Delay message (<xref target="retry"/>) the RCODE indicates the reason for termination.
However, in most cases, except where clearly specified otherwise,
in a DSO request message (QR=0) the RCODE is set to zero on transmission,
and silently ignored on reception.</t>

<t>The RCODE value in a response message (QR=1) may be one of the following values:</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Mnemonic</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>NOERROR</c>
      <c>Operation processed successfully</c>
      <c>1</c>
      <c>FORMERR</c>
      <c>Format error</c>
      <c>2</c>
      <c>SERVFAIL</c>
      <c>Server failed to process DSO request message due to a problem with the server</c>
      <c>4</c>
      <c>NOTIMP</c>
      <c>DSO not supported</c>
      <c>5</c>
      <c>REFUSED</c>
      <c>Operation declined for policy reasons</c>
      <c>[TBA2] 11</c>
      <c>DSOTYPENI</c>
      <c>Primary TLV’s DSO-Type is not implemented</c>
</texttable>

<t>Use of the above RCODEs is likely to be common in DSO but 
does not preclude the definition and use of other codes in future documents that 
make use of DSO.</t>

<t>If a document defining a new DSO-TYPE makes use of response codes not defined here, then that document MUST specify the specific
interpretation of those RCODE values in the context of that new DSO TLV.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="dsodata" title="DSO Data">

<t>The standard twelve-byte DNS message header with its
zero-valued count fields is followed by the DSO Data,
expressed using TLV syntax, as described below in <xref target="tlvsyntax"/>.</t>

<t>A DSO request message or DSO unidirectional message MUST contain at least one TLV.
The first TLV in a DSO request message or DSO unidirectional message is referred to as the “Primary TLV”
and determines the nature of the operation being performed,
including whether it is a DSO request or a DSO unidirectional operation.
In some cases it may be appropriate to include other TLVs in a DSO request message or DSO unidirectional message,
such as the Encryption Padding TLV (<xref target="padding"/>),
and these extra TLVs are referred to as the “Additional TLVs” and are not limited to what is defined
in this document. New “Additional TLVs” may be defined in the future and those definitions will describe
when their use is appropriate.</t>

<t>A DSO response message may contain no TLVs, or it may be specified to
contain one or more TLVs appropriate to the information being
communicated.  This includes “Primary TLVs” and “Additional TLVs”
defined in this document as well as in future TLV definitions.
It may be permissible for an additional TLV to appear in a response
to a primary TLV even though the specification of that primary TLV
does not specify it explicitly.  See <xref target="TLV"/> for more information.</t>

<t>A DSO response message may contain one or more TLVs with the Primary
TLV DSO-TYPE the same as the Primary TLV from the corresponding DSO
request message or it may contain zero or more Additional TLVs only.
The MESSAGE ID field in the DNS message header is sufficient to
identify the DSO request message to which this response message
relates.</t>

<t>A DSO response message may contain one or more TLVs with
DSO-TYPEs different from the Primary TLV from the corresponding DSO request message,
in which case those TLV(s) are referred to as “Response Additional TLVs”.</t>

<t>Response Primary TLV(s), if present, MUST occur first in the response message,
before any Response Additional TLVs.</t>

<t>It is anticipated that most DSO operations will be specified
to use DSO request messages, which generate corresponding DSO responses.
In some specialized high-traffic use cases,
it may be appropriate to specify DSO unidirectional messages.
DSO unidirectional messages can be more efficient on the network,
because they don’t generate a stream of corresponding reply messages.
Using DSO unidirectional messages can also simplify software
in some cases, by removing need for an initiator to maintain
state while it waits to receive replies it doesn’t care about.
When the specification for a particular TLV states that,
when used as a Primary TLV (i.e., first) in an outgoing DSO request message (i.e., QR=0),
that message is to be unidirectional,
the MESSAGE ID field MUST be set to zero and
the receiver MUST NOT generate any response message
corresponding to this DSO unidirectional message.</t>

<t>The previous point, that the receiver MUST NOT generate responses to
DSO unidirectional messages, applies even in the case of errors.</t>

<t>When a DSO message is received where both the QR bit and the MESSAGE ID field
are zero, the receiver MUST NOT generate any response.
For example, if the DSO-TYPE in the Primary TLV is unrecognized,
then a DSOTYPENI error MUST NOT be returned; instead the receiver
MUST forcibly abort the connection immediately.</t>

<t>DSO unidirectional messages MUST NOT be used “speculatively”
in cases where the sender doesn’t know if the receiver supports
the Primary TLV in the message, because there is no way to receive
any response to indicate success or failure.
DSO unidirectional messages are only appropriate in cases
where the sender already knows that the receiver supports,
and wishes to receive, these messages.</t>

<t>For example, after a client has subscribed for Push Notifications
<xref target="I-D.ietf-dnssd-push"/>, the subsequent event notifications are
then sent as DSO unidirectional messages, and this is appropriate
because the client initiated the message stream by virtue of its
Push Notification subscription, thereby indicating its support of
Push Notifications, and its desire to receive those notifications.</t>

<t>Similarly, after a Discovery Relay client has subscribed to receive
inbound mDNS (multicast DNS, <xref target="RFC6762"/>) traffic from a Discovery
Relay, the subsequent stream of received
packets is then sent using DSO unidirectional messages, and this
is appropriate because the client initiated the message stream
by virtue of its Discovery Relay link subscription, thereby indicating
its support of Discovery Relay, and its desire to receive inbound mDNS
packets over that DSO session <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="tlvsyntax" title="TLV Syntax">

<t>All TLVs, whether used as “Primary”, “Additional”, “Response Primary”,
or “Response Additional”, use the same encoding syntax.</t>

<t>Specifications that define new TLVs must specify whether the DSO-TYPE
can be used as the Primary TLV, used as an Additional TLV, or used in either
context, both in the case of requests and of responses.
The specification for a TLV must also state whether,
when used as the Primary (i.e., first) TLV in a DSO message (i.e., QR=0),
that DSO message is unidirectional or is a request message which requires a response.
If the DSO message requires a response, the specification
must also state which TLVs, if any, are to be included in the response.
The Primary TLV may or may not be contained in the response,
depending on what is specified for that TLV.</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                           DSO-TYPE                            |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                          DSO-LENGTH                           |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |                                                               |
   /                           DSO-DATA                            /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='DSO-TYPE:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the DSO-TYPE of the current DSO TLV per the IANA DSO Type Code Registry.</t>
  <t hangText='DSO-LENGTH:'>
  A 16-bit unsigned integer, in network (big endian) byte order,
giving the size in bytes of the DSO-DATA.</t>
  <t hangText='DSO-DATA:'>
  Type-code specific format. The generic DSO machinery treats the
DSO-DATA as an opaque “blob” without attempting to interpret it.
Interpretation of the meaning of the DSO-DATA for a particular
DSO-TYPE is the responsibility of the software that implements that DSO-TYPE.</t>
</list></t>

<t><vspace blankLines='999' /></t>

<section anchor="request-tlvs" title="Request TLVs">

<t>The first TLV in a DSO request message or DSO unidirectional message is the “Primary TLV”
and indicates the operation to be performed.
A DSO request message or DSO unidirectional message MUST contain at at least one TLV–the Primary TLV.</t>

<t>Immediately following the Primary TLV, a DSO request message or DSO unidirectional message
MAY contain one or more “Additional TLVs”, which specify
additional parameters relating to the operation.</t>

</section>
<section anchor="response-tlvs" title="Response TLVs">

<t>Depending on the operation, a DSO response message MAY contain no TLVs,
because it is simply a response to a previous DSO request message, and the
MESSAGE ID in the header is sufficient to identify the DSO request in question.
Or it may contain a single response TLV, with the same DSO-TYPE as the
Primary TLV in the request message.
Alternatively it may contain one or more TLVs of other
types, or a combination of the above, as appropriate
for the information that needs to be communicated.
The specification for each DSO TLV determines
what TLVs are required in a response to a DSO request message using that TLV.</t>

<t>If a DSO response is received for an operation where the specification
requires that the response carry a particular TLV or TLVs,
and the required TLV(s) are not present, then this is a fatal
error and the recipient of the defective response message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="unrecognized" title="Unrecognized TLVs">

<t>If DSO request message is received containing an unrecognized Primary TLV,
with a nonzero MESSAGE ID (indicating that a response is expected),
then the receiver MUST send an error response with matching MESSAGE ID,
and RCODE DSOTYPENI.
The error response MUST NOT contain a copy of the unrecognized Primary TLV.</t>

<t>If DSO unidirectional message is received containing an unrecognized Primary TLV,
with a zero MESSAGE ID (indicating that no response is expected),
then this is a fatal error and the recipient
MUST forcibly abort the connection immediately.</t>

<t>If a DSO request message or DSO unidirectional message is received where the Primary TLV is recognized,
containing one or more unrecognized Additional TLVs, the unrecognized
Additional TLVs MUST be silently ignored, and the remainder of the message
is interpreted and handled as if the unrecognized parts were not present.</t>

<t>Similarly, if a DSO response message is received containing one
or more unrecognized TLVs, the unrecognized TLVs MUST be silently
ignored, and the remainder of the message is interpreted and
handled as if the unrecognized parts were not present.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="edns0-and-tsig" title="EDNS(0) and TSIG">

<t>Since the ARCOUNT field MUST be zero, a DSO message
cannot contain a valid EDNS(0) option in the additional records section.
If functionality provided by current or future EDNS(0) options
is desired for DSO messages, one or more new DSO TLVs
need to be defined to carry the necessary information.</t>

<t>For example, the EDNS(0) Padding Option <xref target="RFC7830"/> used for security purposes
is not permitted in a DSO message,
so if message padding is desired for DSO messages
then the Encryption Padding TLV described in <xref target="padding"/> MUST be used.</t>

<t>A DSO message can’t contain a TSIG record, because a TSIG record
is included in the additional section of the message, which would
mean that ARCOUNT would be greater than zero.   DSO messages are
required to have an ARCOUNT of zero.  Therefore, if use of signatures
with DSO messages becomes necessary in the future, a new DSO TLV
would have to be defined to perform this function.</t>

<t>Note however that, while DSO <spanx style="strong">messages</spanx> cannot include
EDNS(0) or TSIG records, a DSO <spanx style="strong">session</spanx> is typically used to 
carry a whole series of DNS messages of different kinds, including DSO
messages, and other DNS message types like Query <xref target="RFC1034"/> <xref target="RFC1035"/>
and Update <xref target="RFC2136"/>, and those messages can carry EDNS(0) and TSIG records.</t>

<t>Although messages may contain other EDNS(0) options as appropriate,
this specification explicitly prohibits use of the
edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>
in <spanx style="strong">any</spanx> messages sent on a DSO Session (because it is obsoleted by
the functionality provided by the DSO Keepalive operation).
If any message sent on a DSO Session contains an edns-tcp-keepalive EDNS0 Option
this is a fatal error and the recipient of the defective message MUST
forcibly abort the connection immediately.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="message-handling" title="Message Handling">

<t>As described above in <xref target="header"/>, whether an outgoing DSO message with
the QR bit in the DNS header set to zero
is a DSO request or DSO unidirectional message is determined by the specification
for the Primary TLV, which in turn determines whether the MESSAGE ID field
in that outgoing message will be zero or nonzero.</t>

<t>Every DSO message with the QR bit in the DNS header set to zero and a nonzero MESSAGE ID field
is a DSO request message, and MUST elicit a corresponding response,
with the QR bit in the DNS header set to one and the MESSAGE ID field set to the
value given in the corresponding DSO request message.</t>

<t>Valid DSO request messages sent by the client with a nonzero MESSAGE ID field
elicit a response from the server, and
valid DSO request messages sent by the server with a nonzero MESSAGE ID field
elicit a response from the client.</t>

<t>Every DSO message with both the QR bit in the DNS header and the MESSAGE ID field set to zero
is a DSO unidirectional message, and MUST NOT elicit a response.</t>

<t><vspace blankLines='999' /></t>

<section anchor="delayed-acknowledgement-management" title="Delayed Acknowledgement Management">

<t>Generally, most good TCP implementations employ a delayed acknowledgement timer
to provide more efficient use of the network and better performance.</t>

<t>With a bidirectional exchange over TCP, as for example with a DSO request
message, the operating system TCP implementation waits for the
application-layer client software to generate the corresponding DSO
response message.   It can then send a
single combined packet containing the TCP acknowledgement, the
TCP window update, and the application-generated DSO response message.
This is more efficient than sending three separate packets, as would occur if
the TCP packet containing the DSO request were acknowledged immediately.</t>

<t>With a DSO unidirectional message or DSO response message,
there is no corresponding application-generated DSO response message,
and consequently, no hint to the transport protocol about
when it should send its acknowledgement and window update.</t>

<t>Some networking APIs provide a mechanism that allows the
application-layer client software to signal to the
transport protocol that no response will be forthcoming
(in effect it can be thought of as a zero-length “empty” write).
Where available in the networking API being used,
the recipient of a DSO unidirectional message or DSO response message,
having parsed and interpreted the message,
SHOULD then use this mechanism provided by the networking
API to signal that no response for this message will be forthcoming,
so that the TCP implementation can go ahead and send its
acknowledgement and window update without further delay.
See <xref target="delack"/> for further discussion of why this is important.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="message-id-namespaces" title="MESSAGE ID Namespaces">

<t>The namespaces of 16-bit MESSAGE IDs are independent in each direction.
This means it is <spanx style="strong">not</spanx> an error for both client and server to send DSO request
messages at the same time as each other, using the same MESSAGE ID, in different directions.
This simplification is necessary in order for the protocol to be implementable.
It would be infeasible to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
It is also not necessary to require the client and server
to coordinate with each other regarding allocation of new unique MESSAGE IDs.
The value of the 16-bit MESSAGE ID combined with the
identity of the initiator (client or server) is sufficient
to unambiguously identify the operation in question.
This can be thought of as a 17-bit message identifier space, using
message identifiers 0x00001-0x0FFFF for client-to-server DSO request messages, and
message identifiers 0x10001-0x1FFFF for server-to-client DSO request messages.
The least-significant 16 bits are stored explicitly in the
MESSAGE ID field of the DSO message, and the most-significant
bit is implicit from the direction of the message.</t>

<t>As described above in <xref target="header"/>, an initiator MUST NOT reuse a
MESSAGE ID that it already has in use for an outstanding DSO request message
(unless specified otherwise by the relevant specification for the DSO-TYPE in question).
At the very least, this means that a MESSAGE ID can’t
be reused in a particular direction on a particular DSO
Session while the initiator is waiting for a response to a
previous DSO request message using that MESSAGE ID on that DSO Session
(unless specified otherwise by the relevant specification for the DSO-TYPE in question),
and for a long-lived operation the MESSAGE ID for the operation
can’t be reused while that operation remains active.</t>

<t>If a client or server receives a response (QR=1) where the MESSAGE ID is zero, or is
any other value that does not match the MESSAGE ID of any of its outstanding operations,
this is a fatal error and the recipient MUST forcibly abort the connection immediately.</t>

<t>If a responder receives a DSO request message (QR=0) where the MESSAGE ID is not zero, and
the responder tracks request MESSAGE IDs, and the MESSAGE ID
matches the MESSAGE ID of a DSO request message it received for which a response has not yet been sent,
it MUST forcibly abort the connection immediately.   This behavior is required to prevent
a hypothetical attack that takes advantage of undefined behavior in this case.   However,
if the responder does not track MESSAGE IDs in this way, no such risk exists, so tracking
MESSAGE IDs just to implement this sanity check is not required.</t>

</section>
<section anchor="error-responses" title="Error Responses">

<t>When a DSO unidirectional message type is received (MESSAGE ID field is zero), the receiver should already be expecting this DSO message type.
<xref target="unrecognized"/> describes the handling of unknown DSO message types. Parsing
errors MUST also result in the receiver forcibly aborting the connection.
When a DSO unidirectional
message of an unexpected type is received, the receiver SHOULD forcibly abort the connection.
Whether the connection should be forcibly aborted for other internal errors processing the DSO unidirectional message is
implementation dependent,
according to the severity of the error.</t>

<t>When a DSO request message is unsuccessful for some reason,
the responder returns an error code to the initiator.</t>

<t>In the case of a server returning an error code to a client
in response to an unsuccessful DSO request message, the server MAY choose
to end the DSO Session, or MAY choose to allow the DSO Session to remain open.
For error conditions that only affect the single operation in question, the server SHOULD
return an error response to the client and leave the DSO Session open for further operations.</t>

<t>For error conditions that are likely to make all operations unsuccessful in the
immediate future, the server SHOULD return an error response to the client and then
end the DSO Session by sending a Retry Delay message, as described in <xref target="retry"/>.</t>

<t>Upon receiving an error response from the server, a client SHOULD NOT
automatically close the DSO Session. An error relating to one particular operation
on a DSO Session does not necessarily imply that all other operations on that
DSO Session have also failed, or that future operations will fail. The client
should assume that the server will make its own decision about whether or not to
end the DSO Session, based on the server’s determination of whether the error
condition pertains to this particular operation, or would also apply to any
subsequent operations. If the server does not end the DSO Session by
sending the client a Retry Delay message (<xref target="retry"/>) then the client
SHOULD continue to use that DSO Session for subsequent operations.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="cancellation" title="Responder-Initiated Operation Cancellation">

<t>This document, the base specification for DNS Stateful Operations,
does not itself define any long-lived operations,
but it defines a framework for supporting long-lived operations,
such as Push Notification subscriptions <xref target="I-D.ietf-dnssd-push"/> and
Discovery Relay interface subscriptions <xref target="I-D.ietf-dnssd-mdns-relay"/>.</t>

<t>Long-lived operations, if successful, will remain active until the initiator terminates the operation.</t>

<t>However, it is possible that a long-lived operation may be valid
at the time it was initiated, but then a later change of circumstances
may render that operation invalid.
For example, a long-lived client operation may pertain to a name
that the server is authoritative for, but then the server configuration
is changed such that it is no longer authoritative for that name.</t>

<t>In such cases, instead of terminating the entire session
it may be desirable for the responder to be able to cancel
selectively only those operations that have become invalid.</t>

<t>The responder performs this selective cancellation by sending
a new response message, with the MESSAGE ID field containing the
MESSAGE ID of the long-lived operation that is to be terminated
(that it had previously acknowledged with a NOERROR RCODE), and the
RCODE field of the new response message giving the reason for cancellation.</t>

<t>After a response message with nonzero RCODE has been sent,
that operation has been terminated from the responder’s point of view,
and the responder sends no more messages relating to that operation.</t>

<t>After a response message with nonzero RCODE has been received by the initiator,
that operation has been terminated from the initiator’s point of view,
and the cancelled operation’s MESSAGE ID is now free for reuse.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="lifecycle" title="DSO Session Lifecycle and Timers">

<section anchor="initiation" title="DSO Session Initiation">

<t>A DSO Session begins as described in <xref target="establishment"/>.</t>

<t>The client may perform as many DNS operations as it wishes using the
newly created DSO Session. When the
client has multiple messages to send, it SHOULD NOT wait for each response before sending the next message.</t>

<t>The server MUST act on messages in the order they are received, but
SHOULD NOT delay sending responses to those messages as they become available in
order to return them in the order the requests were received.</t>

<t>Section 6.2.1.1 of the DNS-over-TCP specification <xref target="RFC7766"/> specifies this in more detail.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sessiontimeouts" title="DSO Session Timeouts">

<t>Two timeout values are associated with a DSO Session:
the inactivity timeout, and the keepalive interval. 
Both values are communicated in the same TLV, the Keepalive TLV (<xref target="keepalive"/>).</t>

<t>The first timeout value, the inactivity timeout, is the maximum time for which
a client may speculatively keep an inactive DSO Session open
in the expectation that
it may have future requests to send to that server.</t>

<t>The second timeout value, the keepalive interval, is the maximum permitted
interval between messages if the client wishes to keep the DSO Session alive.</t>

<t>The two timeout values are independent. The inactivity timeout may be lower,
the same, or higher than the keepalive interval, though in most cases the
inactivity timeout is expected to be shorter than the keepalive interval.</t>

<t>A shorter inactivity timeout with a longer keepalive interval signals
to the client that it should not speculatively keep an inactive DSO
Session open for very long without reason, but when it does have an
active reason to keep a DSO Session open, it doesn’t need to be sending
an aggressive level of DSO keepalive traffic to maintain that session.
An example of this would be a client that has subscribed to DNS Push
notifications: in this case, the client is not sending any traffic to the
server, but the session is not inactive, because there is a active request
to the server to receive push notifications.</t>

<t>A longer inactivity timeout with a shorter keepalive interval
signals to the client that it may speculatively keep an inactive
DSO Session open for a long time, but to maintain that inactive
DSO Session it should be sending a lot of DSO keepalive traffic.
This configuration is expected to be less common.</t>

<t>In the usual case where the inactivity timeout is shorter than the keepalive
interval, it is only when a client has a long-lived, low-traffic, operation
that the keepalive interval comes into play, to ensure that a sufficient
residual amount of traffic is generated to maintain NAT and firewall state
and to assure client and server that they still have connectivity to each other.</t>

<t>On a new DSO Session, if no explicit DSO Keepalive message exchange has taken 
place, the default value for both timeouts is 15 seconds.</t>

<t>For both timeouts, lower values of the timeout result in higher network traffic,
and higher CPU load on the server.</t>

</section>
<section anchor="inactive-dso-sessions" title="Inactive DSO Sessions">

<t>At both servers and clients, the generation or reception of any complete
DNS message (including DNS requests, responses, updates, DSO messages, etc.)
resets both timers for that DSO Session, with the one exception
that a DSO Keepalive message resets only the keepalive timer,
not the inactivity timeout timer.</t>

<t>In addition, for as long as the client has an outstanding operation in progress,
the inactivity timer remains cleared, and an inactivity timeout cannot occur.</t>

<t>For short-lived DNS operations like traditional queries and updates,
an operation is considered in progress for the time between request and 
response, typically a period of a few hundred milliseconds at most.
At the client, the inactivity timer is cleared upon transmission of a 
request and remains cleared until reception of the corresponding response.
At the server, the inactivity timer is cleared upon reception of a request
and remains cleared until transmission of the corresponding response.</t>

<t>For long-lived DNS Stateful operations (such as
a Push Notification subscription <xref target="I-D.ietf-dnssd-push"/> or
a Discovery Relay interface subscription <xref target="I-D.ietf-dnssd-mdns-relay"/>),
an operation is considered in progress
for as long as the operation is active, i.e. until it is cancelled.
This means that a DSO Session can exist, with active operations,
with no messages flowing in either direction, for far longer than the 
inactivity timeout, and this is not an error.
This is why there are two separate timers:
the inactivity timeout, and the keepalive interval.
Just because a DSO Session has no traffic for an extended period of time
does not automatically make that DSO Session “inactive”,
if it has an active operation that is awaiting events.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="inactivetimer" title="The Inactivity Timeout">

<t>The purpose of the inactivity timeout is for the server to balance the trade off
between the costs of setting up new DSO Sessions and the costs of maintaining inactive 
DSO Sessions. A server with abundant DSO Session capacity can offer a high inactivity timeout, 
to permit clients to keep a speculative DSO Session open for a long time, to save 
the cost of establishing a new DSO Session for future communications with that 
server. A server with scarce memory resources can offer a low inactivity timeout,
to cause clients to promptly close DSO Sessions whenever they have no outstanding
operations with that server, and then create a new DSO Session later when needed.</t>

<section anchor="inactive" title="Closing Inactive DSO Sessions">

<t>When a connection’s inactivity timeout is reached the client MUST
begin closing the idle connection, but a client is not required to
keep an idle connection open until the inactivity timeout is reached.
A client MAY close a DSO Session at any time, at the client’s discretion.
If a client determines that it has no current or reasonably
anticipated future need for a currently inactive DSO Session,
then the client SHOULD gracefully close that connection.</t>

<t>If, at any time during the life of the DSO Session,
the inactivity timeout value (i.e., 15 seconds by default) elapses
without there being any operation active on the DSO Session,
the client MUST close the connection gracefully.</t>

<t>If, at any time during the life of the DSO Session,
twice the inactivity timeout value (i.e., 30 seconds by default),
or five seconds, if twice the inactivity timeout value is less than five seconds,
elapses without there being any operation active on the DSO Session,
the server MUST consider the client delinquent,
and MUST forcibly abort the DSO Session.</t>

<t>In this context, an operation being active on a DSO Session includes
a query waiting for a response, an update waiting for a response,
or an active long-lived operation, but not a DSO Keepalive message exchange itself.
A DSO Keepalive message exchange resets only the keepalive
interval timer, not the inactivity timeout timer.</t>

<t>If the client wishes to keep an inactive DSO Session open for longer
than the default duration then it uses the DSO Keepalive message
to request longer timeout values, as described in <xref target="keepalive"/>.</t>

</section>
<section anchor="values-for-the-inactivity-timeout" title="Values for the Inactivity Timeout">

<t>For the inactivity timeout value, lower values result in
more frequent DSO Session teardown and re-establishment.
Higher values result in lower traffic and lower CPU load on the server,
but higher memory burden to maintain state for inactive DSO Sessions.</t>

<t>A server may dictate any value it chooses for the inactivity timeout
(either in a response to a client-initiated request, or in a server-initiated message)
including values under one second, or even zero.</t>

<t>An inactivity timeout of zero informs the client that it
should not speculatively maintain idle connections at all, and
as soon as the client has completed the operation or operations relating
to this server, the client should immediately begin closing this session.</t>

<t>A server will forcibly abort an idle client session after twice the
inactivity timeout value, or five seconds, whichever is greater.
In the case of a zero inactivity timeout value, this means that
if a client fails to close an idle client session then the server
will forcibly abort the idle session after five seconds.</t>

<t>An inactivity timeout of 0xFFFFFFFF represents “infinity” and
informs the client that it may keep an idle connection open as long as it wishes.
Note that after granting an unlimited inactivity timeout in this way,
at any point the server may revise that inactivity timeout by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> inactivity timeout
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="keepalivetimer" title="The Keepalive Interval">

<t>The purpose of the keepalive interval is to manage the generation of
sufficient messages to maintain state in middleboxes (such at NAT gateways
or firewalls) and for the client and server to periodically verify that they
still have connectivity to each other. This allows them to clean up state
when connectivity is lost, and to establish a new session if appropriate.</t>

<section anchor="keepalive-interval-expiry" title="Keepalive Interval Expiry">

<t>If, at any time during the life of the DSO Session,
the keepalive interval value (i.e., 15 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the client MUST take action to keep the DSO Session alive,
by sending a DSO Keepalive message (<xref target="keepalive"/>).
A DSO Keepalive message exchange resets only the keepalive timer, 
not the inactivity timer.</t>

<t>If a client disconnects from the network abruptly,
without cleanly closing its DSO Session,
perhaps leaving a long-lived operation uncancelled,
the server learns of this after failing to
receive the required DSO keepalive traffic from that client.
If, at any time during the life of the DSO Session,
twice the keepalive interval value (i.e., 30 seconds by default) elapses
without any DNS messages being sent or received on a DSO Session,
the server SHOULD consider the client delinquent,
and SHOULD forcibly abort the DSO Session.</t>

</section>
<section anchor="values-for-the-keepalive-interval" title="Values for the Keepalive Interval">

<t>For the keepalive interval value, lower values result in a higher volume of DSO keepalive 
traffic. Higher values of the keepalive interval reduce traffic and CPU load, 
but have minimal effect on the memory burden
at the server, because clients keep a DSO Session open for the same length of time
(determined by the inactivity timeout) regardless of the level of DSO keepalive traffic 
required.</t>

<t>It may be appropriate for clients and servers to select different keepalive 
interval values depending on the nature of the network they are on.</t>

<t>A corporate DNS server that knows it is serving only clients on the internal 
network, with no intervening NAT gateways or firewalls, can impose a higher 
keepalive interval, because frequent DSO keepalive traffic is not required.</t>

<t>A public DNS server that is serving primarily residential consumer clients, 
where it is likely there will be a NAT gateway on the path, may impose a lower 
keepalive interval, to generate more frequent DSO keepalive traffic.</t>

<t>A smart client may be adaptive to its environment. A client using
a private IPv4 address <xref target="RFC1918"/> to communicate with a DNS server
at an address outside that IPv4 private address block,
may conclude that there is likely to be a NAT gateway on the path,
and accordingly request a lower keepalive interval.</t>

<t>By default it is RECOMMENDED that clients request,
and servers grant, a keepalive interval of 60 minutes.
This keepalive interval provides for reasonably timely detection if
a client abruptly disconnects without cleanly closing the session,
and is sufficient to maintain state in firewalls and NAT gateways
that follow the IETF recommended Best Current Practice that the
“established connection idle-timeout” used by middleboxes
be at least 2 hours 4 minutes <xref target="RFC5382"/> <xref target="RFC7857"/>.</t>

<t>Note that the lower the keepalive interval value, the higher the load on client and server.
Moreover for a keep-alive value that is smaller than the time needed for the transport to
retransmit, a single packet loss would cause a server to overzealously abort the connect. For
example, a (hypothetical and unrealistic) keepalive interval value of 100 ms would result in a
continuous stream of ten messages per second or more (if allowed by the current congestion
control window), in both directions, to keep the DSO Session alive.  And, in this extreme
example, a single retransmission over a path with, e.g., 100ms RTT would introduce a momentary
pause in the stream of messages, long enough to cause the server to abort the connection.</t>

<t>Because of this concern, the server MUST NOT send a DSO Keepalive message
(either a response to a client-initiated request, or a server-initiated message)
with a keepalive interval value less than ten seconds.
If a client receives a DSO Keepalive message specifying a keepalive interval value
less than ten seconds this is a fatal error and the client MUST
forcibly abort the connection immediately.</t>

<t>A keepalive interval value of 0xFFFFFFFF represents “infinity” and
informs the client that it should generate no DSO keepalive traffic.
Note that after signaling that the client should generate no DSO keepalive traffic in this way,
at any point the server may revise that DSO keepalive traffic requirement by sending
a new DSO Keepalive message dictating new Session Timeout values to the client.</t>

<t>The largest <spanx style="strong">finite</spanx> keepalive interval
supported by the current Keepalive TLV is
0xFFFFFFFE (2^32-2 milliseconds, approximately 49.7 days).</t>

</section>
</section>
<section anchor="server-initiated-session-termination" title="Server-Initiated Session Termination">

<t>In addition to cancelling individual long-lived operations selectively (<xref target="cancellation"/>)
there are also occasions where a server may need to terminate one or more entire sessions.
An entire session may need to be terminated if the client is defective in some way,
or departs from the network without closing its session.
Sessions may also need to be terminated if the server becomes overloaded,
or if the server is reconfigured and lacks the ability to be selective about
which operations need to be cancelled.</t>

<t>This section discusses various reasons a session may be terminated,
and the mechanisms for doing so.</t>

<t>In normal operation, closing a DSO Session is the client’s responsibility.
The client makes the determination of when to close a DSO
Session based on an evaluation of both its own needs,
and the inactivity timeout value dictated by the server.
A server only causes a DSO Session to be ended in the exceptional circumstances outlined below.
Some of the exceptional situations in which a server may terminate a DSO Session include:</t>

<t><list style="symbols">
  <t>The server application software or underlying operating system
is shutting down or restarting.</t>
  <t>The server application software terminates unexpectedly
(perhaps due to a bug that makes it crash, causing the underlying operating system to send a TCP RST).</t>
  <t>The server is undergoing a reconfiguration or maintenance
procedure, that, due to the way the server software is
implemented, requires clients to be disconnected.
For example, some software is implemented such that it reads
a configuration file at startup, and changing the server’s
configuration entails modifying the configuration file
and then killing and restarting the server software,
which generally entails a loss of network connections.</t>
  <t>The client fails to meets its obligation to generate the required
DSO keepalive traffic, or to close an inactive session by the prescribed time
(twice the time interval dictated by the server, or five seconds,
whichever is greater, as described in <xref target="sessiontimeouts"/>).</t>
  <t>The client sends a grossly invalid or malformed request that
is indicative of a seriously defective client implementation.</t>
  <t>The server is over capacity and needs to shed some load.</t>
</list></t>

<section anchor="retry" title="Server-Initiated Retry Delay Message">

<t>In the cases described above where a server elects to terminate a
DSO Session, it could do so simply by forcibly aborting the connection.
However, if it did this the likely behavior of the client might be simply to to treat
this as a network failure and reconnect immediately, putting more burden on the server.</t>

<t>Therefore, to avoid this reconnection implosion, a server SHOULD instead choose
to shed client load by sending a Retry Delay message, with an appropriate RCODE
value informing the client of the reason the DSO Session needs to be terminated.
The format of the Retry Delay TLV, and the interpretations of the various RCODE values,
are described in <xref target="delay"/>.
After sending a Retry Delay message,
the server MUST NOT send any further messages on that DSO Session.</t>

<t>The server MAY randomize retry delays in situations where many retry delays are sent
in quick succession, so as to avoid all the clients attempting to reconnect at once.
In general, implementations should avoid using the Retry Delay message in a way that
would result in many clients reconnecting at the same time, if every client attempts
to reconnect at the exact time specified.</t>

<t>Upon receipt of a Retry Delay message from the server,
the client MUST make note of the reconnect delay for this server,
and then immediately close the connection gracefully.</t>

<t>After sending a Retry Delay message the server SHOULD allow the
client five seconds to close the connection, and if the client has not
closed the connection after five seconds then the server SHOULD
forcibly abort the connection.</t>

<t>A Retry Delay message MUST NOT be initiated by a client.
If a server receives a Retry Delay message this is a fatal error
and the server MUST forcibly abort the connection immediately.</t>

<section anchor="outstanding" title="Outstanding Operations">

<t>At the instant a server chooses to initiate a Retry Delay message
there may be DNS requests already in flight from client to server on this 
DSO Session, which will arrive at the server after its Retry Delay message 
has been sent.
The server MUST silently ignore such incoming requests, and MUST NOT generate
any response messages for them. When the Retry Delay message from the
server arrives at the client, the client will determine that any DNS requests
it previously sent on this DSO Session, that have not yet received a response, now 
will certainly not be receiving any response. Such requests should be considered
failed, and should be retried at a later time, as appropriate.</t>

<t>In the case where some, but not all, of the existing operations on a DSO Session 
have become invalid (perhaps because the server has been reconfigured and is no 
longer authoritative for some of the names),
but the server is terminating all affected DSO Sessions en masse
by sending them all a Retry Delay message,
the reconnect delay MAY be zero, indicating that the clients SHOULD immediately
attempt to re-establish operations.</t>

<t>It is likely that some of the attempts will be successful and some will not,
depending on the nature of the reconfiguration.</t>

<t>In the case where a server is terminating a large number of DSO Sessions at once
(e.g., if the system is restarting) and the server doesn’t want to be inundated 
with a flood of simultaneous retries, it SHOULD send different reconnect delay 
values to each client.
These adjustments MAY be selected randomly, pseudorandomly, or deterministically
(e.g., incrementing the time value by one tenth of a second for each successive
client, yielding a post-restart reconnection rate of ten clients per second).</t>

</section>
</section>
<section anchor="misbehaving-clients" title="Misbehaving Clients">

<t>A server may determine that a client is not following the protocol correctly.  There may be no
way for the server to recover the session, in which case the server forcibly terminates the
connection.  Since the client doesn’t know why the connection dropped, it may reconnect
immediately.  If the server has determined that a client is not following the protocol
correctly, it may terminate the DSO session as soon as it is established, specifying a long
retry-delay to prevent the client from immediately reconnecting.</t>

</section>
<section anchor="reconnect" title="Client Reconnection">

<t>After a DSO Session is ended by the server
(either by sending the client a Retry Delay message,
or by forcibly aborting the underlying transport connection)
the client SHOULD try to reconnect,
to that service instance, or to another suitable service instance, if more than one is available.
If reconnecting to the same service instance, the client MUST respect the indicated delay,
if available, before attempting to reconnect.   Clients should not attempt to randomize the delay;
the server will randomly jitter the retry delay values it sends to each client if this behavior is
desired.</t>

<t>If the service instance will only be out of service for a short maintenance period,
it should use a value a little longer that the expected maintenance window.
It should not default to a very large delay value, or clients may
not attempt to reconnect after it resumes service.</t>

<t>If a particular service instance does not want a client to reconnect ever
(perhaps the service instance is being de-commissioned),
it SHOULD set the retry delay to the maximum value
0xFFFFFFFF (2^32-1 milliseconds, approximately 49.7 days).
It is not possible to instruct a client to stay away for longer than 49.7 days.
If, after 49.7 days, the DNS or other configuration information
still indicates that this is the valid service instance for a
particular service, then clients MAY attempt to reconnect.
In reality, if a client is rebooted or otherwise lose state, it
may well attempt to reconnect before 49.7 days elapses, for as
long as the DNS or other configuration information continues to
indicate that this is the service instance the client should use.</t>

<section anchor="forcereconnect" title="Reconnecting After a Forcible Abort">

<t>If a connection was forcibly aborted by the client, the client SHOULD
mark that service instance as not supporting DSO.   The client MAY
reconnect but not attempt to use DSO, or may connect to a different
service instance, if applicable.</t>

</section>
<section anchor="dropreconnect" title="Reconnecting After an Unexplained Connection Drop">

<t>It is also possible for a server to forcibly terminate the connection; in
this case the client doesn’t know whether the termination was the result
of a protocol error or a network outage.   When the client notices that
the connection has been dropped, it can attempt to reconnect immediately.
However, if the connection is dropped again without the client being
able to successfully do whatever it is trying to do, it should mark the
server as not supporting DSO.</t>

</section>
<section anchor="dsoprobe" title="Probing for Working DSO Support">

<t>Once a server has been marked by the client as not supporting DSO, the client
SHOULD NOT attempt DSO operations on that server until some time has
elapsed.  A reasonable minimum would be an hour.  Since forcibly aborted
connections are the result of a software failure, it’s not likely that the
problem will be solved in the first hour after it’s first encountered.
However, by restricting the retry interval to an hour, the client will
be able to notice when the problem has been fixed without placing an
undue burden on the server.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
</section>
</section>
<section anchor="base-tlvs-for-dns-stateful-operations" title="Base TLVs for DNS Stateful Operations">

<t>This section describes the three base TLVs for DNS Stateful Operations:
Keepalive, Retry Delay, and Encryption Padding.</t>

<section anchor="keepalive" title="Keepalive TLV">

<t>The Keepalive TLV (DSO-TYPE=1) performs two functions.
Primarily it establishes the values for the Session Timeouts.
Incidentally, it also resets the keepalive timer for the DSO Session,
meaning that it can be used as a kind of “no-op” message for the
purpose of keeping a session alive.
The client will request the desired session timeout values and the server will
acknowledge with the response values that it requires the client to use.</t>

<t>DSO messages with the Keepalive TLV as the primary TLV may appear in
early data.</t>

<t>The DSO-DATA for the Keepalive TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 INACTIVITY TIMEOUT (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 KEEPALIVE INTERVAL (32 bits)                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='INACTIVITY TIMEOUT:'>
  The inactivity timeout for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the timeout at which the client MUST begin closing an inactive DSO Session.
The inactivity timeout can be any value of the server’s choosing.
If the client does not gracefully close an inactive DSO
Session, then after twice this interval, or five seconds,
whichever is greater, the server will forcibly abort the connection.</t>
  <t hangText='KEEPALIVE INTERVAL:'>
  The keepalive interval for the current DSO Session, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds.
This is the interval at which a client MUST generate DSO keepalive
traffic to maintain connection state.
The keepalive interval MUST NOT be less than ten seconds.
If the client does not generate the mandated DSO keepalive traffic,
then after twice this interval the server will forcibly abort the connection.
Since the minimum allowed keepalive interval is ten seconds, the
minimum time at which a server will forcibly disconnect a client for
failing to generate the mandated DSO keepalive traffic is twenty seconds.</t>
</list></t>

<t>The transmission or reception of DSO Keepalive messages
(i.e., messages where the Keepalive TLV is the first TLV)
reset only the keepalive timer, not the inactivity timer.
The reason for this is that periodic DSO Keepalive messages are sent for the sole
purpose of keeping a DSO Session alive, when that DSO Session has current
or recent non-maintenance activity that warrants keeping that DSO Session alive.
Sending DSO keepalive traffic itself is not considered a client activity;
it is considered a maintenance activity that is performed
in service of other client activities.
If DSO keepalive traffic itself were to reset the inactivity timer,
then that would create a circular livelock where keepalive traffic
would be sent indefinitely to keep a DSO Session alive, where the only
activity on that DSO Session would be the keepalive traffic keeping
the DSO Session alive so that further keepalive traffic can be sent.
For a DSO Session to be considered active, it must be carrying
something more than just keepalive traffic.
This is why merely sending or receiving a DSO Keepalive message
does not reset the inactivity timer.</t>

<t>When sent by a client, the DSO Keepalive request message MUST
be sent as an DSO request message, with a nonzero MESSAGE ID.
If a server receives a DSO Keepalive message with a zero MESSAGE ID then
this is a fatal error and the server MUST forcibly abort the connection immediately.
The DSO Keepalive request message resets a DSO Session’s keepalive timer,
and at the same time communicates to the server the client’s
requested Session Timeout values.
In a server response to a client-initiated DSO Keepalive request message,
the Session Timeouts contain the server’s chosen values from
this point forward in the DSO Session, which the client MUST respect.
This is modeled after the DHCP protocol, where the client requests a certain
lease lifetime using DHCP option 51 <xref target="RFC2132"/>, but the server is the
ultimate authority for deciding what lease lifetime is actually granted.</t>

<t>When a client is sending its second and subsequent DSO Keepalive request messages to
the server, the client SHOULD continue to request its preferred values each time.
This allows flexibility, so that if conditions change during the lifetime of a
DSO Session, the server can adapt its responses to better fit the client’s needs.</t>

<t>Once a DSO Session is in progress (<xref target="establishment"/>)
a DSO Keepalive message MAY be initiated by a server.
When sent by a server, the DSO Keepalive message MUST be
sent as a DSO unidirectional message, with the MESSAGE ID set to zero.
The client MUST NOT generate a response to a server-initiated DSO Keepalive message.
If a client receives a DSO Keepalive request message with a nonzero MESSAGE ID then
this is a fatal error and the client MUST forcibly abort the connection immediately.
The DSO Keepalive unidirectional message from the server resets a DSO Session’s keepalive timer,
and at the same time unilaterally informs the client of the new
Session Timeout values to use from this point forward in this DSO Session.
No client DSO response to this unilateral declaration is required or allowed.</t>

<t>In DSO Keepalive response messages, the Keepalive TLV is REQUIRED and is used only 
as a Response Primary TLV sent as a reply to a DSO Keepalive request message from 
the client.
A Keepalive TLV MUST NOT be added to other responses as a Response Additional TLV.
If the server wishes to update a client’s Session Timeout values
other than in response to a DSO Keepalive request message from the client,
then it does so by sending an DSO Keepalive unidirectional message
of its own, as described above.</t>

<t>It is not required that the Keepalive TLV be used in every DSO Session.
While many DNS Stateful operations
will be used in conjunction with a long-lived session state,
not all DNS Stateful operations require long-lived session state,
and in some cases the default 15-second value for both the inactivity timeout
and keepalive interval may be perfectly appropriate.
However, note that for clients that implement only the DSO-TYPEs defined in this document,
a DSO Keepalive request message is the only way for a client to initiate a DSO Session.</t>

<section anchor="client-handling-of-received-session-timeout-values" title="Client handling of received Session Timeout values">

<t>When a client receives a response to its client-initiated DSO Keepalive message,
or receives a server-initiated DSO Keepalive message, the client has then 
received Session Timeout values dictated by the server. The two timeout values 
contained in the Keepalive TLV from the server may each be higher, lower, or 
the same as the respective Session Timeout values the client previously had for 
this DSO Session.</t>

<t>In the case of the keepalive timer, the handling of the received value is straightforward.
The act of receiving the message containing the DSO Keepalive TLV itself resets
the keepalive timer, and updates the keepalive interval for the DSO Session.
The new keepalive interval indicates the maximum time that may elapse before
another message must be sent or received on this DSO Session, if the DSO Session
is to remain alive.</t>

<t>In the case of the inactivity timeout, the handling of the received
value is a little more subtle, though the meaning of the inactivity
timeout remains as specified — it still indicates the maximum
permissible time allowed without useful activity on a DSO Session.
The act of receiving the message containing the Keepalive TLV does not
itself reset the inactivity timer. The time elapsed since the last useful
activity on this DSO Session is unaffected by exchange of DSO Keepalive messages.
The new inactivity timeout value in the Keepalive TLV in the received message
does update the timeout associated with the running inactivity timer;
that becomes the new maximum permissible time without activity on a DSO Session.</t>

<t><list style="symbols">
  <t>If the current inactivity timer value is less than the
new inactivity timeout, then the DSO Session may remain open for now.
When the inactivity timer value reaches the new inactivity timeout,
the client MUST then begin closing the DSO Session, as described above.</t>
  <t>If the current inactivity timer value is equal to the
new inactivity timeout, then this DSO Session has been
inactive for exactly as long as the server will permit,
and now the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already greater
than the new inactivity timeout, then this DSO Session has
already been inactive for longer than the server permits,
and the client MUST immediately begin closing this DSO Session.</t>
  <t>If the current inactivity timer value is already more than twice the
new inactivity timeout, then the client is immediately considered delinquent
(this DSO Session is immediately eligible to be forcibly terminated by the server)
and the client MUST immediately begin closing this DSO Session.
However if a server abruptly reduces the inactivity timeout in this
way, then, to give the client time to close the connection gracefully
before the server resorts to forcibly aborting it, the server
SHOULD give the client an additional grace period of one quarter
of the new inactivity timeout, or five seconds, whichever is greater.</t>
</list></t>

</section>
<section anchor="edns0keepalive" title="Relationship to edns-tcp-keepalive EDNS0 Option">

<t>The inactivity timeout value in the Keepalive TLV (DSO-TYPE=1) has
similar intent to the edns-tcp-keepalive EDNS0 Option <xref target="RFC7828"/>. A
client/server pair that supports DSO MUST NOT use the edns-tcp-keepalive
EDNS0 Option within any message after a DSO Session has been
established. A client that has sent a DSO message to establish a
session MUST NOT send an edns-tcp-keepalive EDNS0 Option from this
point on. Once a DSO Session has been established, if either client
or server receives a DNS message over the DSO Session that contains
an edns-tcp-keepalive EDNS0 Option, this is a fatal error and the
receiver of the edns-tcp-keepalive EDNS0 Option MUST forcibly abort
the connection immediately.</t>

</section>
</section>
<section anchor="delay" title="Retry Delay TLV">

<t>The Retry Delay TLV (DSO-TYPE=2) can be used as
a Primary TLV (unidirectional) in a server-to-client message,
or as a Response Additional TLV in either direction.   DSO messages
with a Relay Delay TLV as their primary TLV are not permitted in early data.</t>

<t>The DSO-DATA for the Retry Delay TLV is as follows:</t>

<figure><artwork><![CDATA[
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     RETRY DELAY (32 bits)                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='RETRY DELAY:'>
  A time value, specified as
a 32-bit unsigned integer, in network (big endian) byte order, in units of milliseconds,
within which the initiator MUST NOT retry this operation, or retry connecting to this server.
Recommendations for the RETRY DELAY value are given in <xref target="retry"/>.</t>
</list></t>

<section anchor="retry-delay-tlv-used-as-a-primary-tlv" title="Retry Delay TLV used as a Primary TLV">

<t>When sent from server to client, the
Retry Delay TLV is used as the Primary TLV in a DSO unidirectional message.
It is used by a server
to instruct a client to close the DSO Session and underlying connection,
and not to reconnect for the indicated time interval.</t>

<t>In this case it applies to the DSO Session as a whole, and the client MUST begin closing the 
DSO Session, as described in <xref target="retry"/>. The RCODE in the message header 
SHOULD indicate the principal reason for the termination:</t>

<t><list style="symbols">
  <t>NOERROR indicates a routine shutdown or restart.</t>
  <t>FORMERR indicates that a client request was too badly malformed for the session to continue.</t>
  <t>SERVFAIL indicates that the server is overloaded due to resource exhaustion and needs to shed load.</t>
  <t>REFUSED indicates that the server has been reconfigured,
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session.</t>
  <t>NOTAUTH indicates that the server has been reconfigured
and at this time it is now unable to perform one or more
of the long-lived client operations that were previously being performed on this DSO Session
because it does not have authority over the names in question
(for example, a DNS Push Notification server could be reconfigured
such that is is no longer accepting DNS Push Notification
requests for one or more of the currently subscribed names).</t>
</list></t>

<t>This document specifies only these RCODE values for the Retry Delay message.
Servers sending Retry Delay messages SHOULD use one of these values.
However, future circumstances may create situations where other RCODE values
are appropriate in Retry Delay messages, so clients MUST be prepared
to accept Retry Delay messages with any RCODE value.</t>

<t>In some cases, when a server sends a Retry Delay message to a client,
there may be more than one reason for the server wanting to end the session.
Possibly the configuration could have been changed such that some
long-lived client operations can no longer be continued due to policy (REFUSED), and other
long-lived client operations can no longer be performed due to
the server no longer being authoritative for those names (NOTAUTH).
In such cases the server MAY use any of the applicable RCODE values,
or RCODE=NOERROR (routine shutdown or restart).</t>

<t>Note that the selection of RCODE value in a Retry Delay message
is not critical, since the RCODE value is generally used only for
information purposes, such as writing to a log file for future
human analysis regarding the nature of the disconnection.
Generally clients do not modify their behavior depending on the RCODE value.
The RETRY DELAY in the message tells the client how long it should
wait before attempting a new connection to this service instance.</t>

<t>For clients that do in some way modify their behavior depending on the RCODE value,
they should treat unknown RCODE values the same as RCODE=NOERROR (routine shutdown or restart).</t>

<t>A Retry Delay message from server to client is a DSO unidirectional message;
the MESSAGE ID MUST be set to zero in the outgoing message
and the client MUST NOT send a response.</t>

<t>A client MUST NOT send a Retry Delay DSO message to a server.
If a server receives a DSO message where the Primary TLV is the Retry Delay TLV,
this is a fatal error and the server MUST forcibly abort the connection immediately.</t>

</section>
<section anchor="retry-delay-tlv-used-as-a-response-additional-tlv" title="Retry Delay TLV used as a Response Additional TLV">

<t>In the case of a DSO request message that results in a nonzero RCODE value,
the responder MAY append a Retry Delay TLV to the response,
indicating the time interval during which the initiator
SHOULD NOT attempt this operation again.</t>

<t>The indicated time interval during which the initiator SHOULD NOT retry
applies only to the failed operation, not to the DSO Session as a whole.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="padding" title="Encryption Padding TLV">

<t>The Encryption Padding TLV (DSO-TYPE=3) can only be used as
an Additional or Response Additional TLV.
It is only applicable when the DSO Transport layer uses encryption
such as TLS.</t>

<t>The DSO-DATA for the Padding TLV is optional and is a
variable length field containing non-specified values. A DSO-LENGTH
of 0 essentially provides for 4 bytes of padding (the minimum amount).</t>

<figure><artwork><![CDATA[
                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /                                                               /
   /              PADDING -- VARIABLE NUMBER OF BYTES              /
   /                                                               /
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t>As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
the PADDING bytes SHOULD be set to 0x00.  Other values MAY be used,
for example, in cases where there is a concern that the padded
message could be subject to compression before encryption.
PADDING bytes of any value MUST be accepted in the messages received.</t>

<t>The Encryption Padding TLV may be included in either a DSO request message, response, or both.
As specified for the EDNS(0) Padding Option <xref target="RFC7830"/>
if a DSO request message is received with an Encryption Padding TLV,
then the DSO response MUST also include an Encryption Padding TLV.</t>

<t>The length of padding is intentionally not specified in this document and
is a function of current best practices with respect to the type and length
of data in the preceding TLVs <xref target="I-D.ietf-dprive-padding-policy"/>.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="summary-highlights" title="Summary Highlights">

<t>This section summarizes some noteworthy highlights about
various aspects of the DSO protocol.</t>

<section anchor="qr-bit-and-message-id" title="QR bit and MESSAGE ID">

<t>In DSO Request Messages the QR bit is 0 and the MESSAGE ID is nonzero.</t>

<t>In DSO Response Messages the QR bit is 1 and the MESSAGE ID is nonzero.</t>

<t>In DSO Unidirectional Messages the QR bit is 0 and the MESSAGE ID is zero.</t>

<t>The table below illustrates which combinations are legal and how they are interpreted:</t>

<figure><artwork><![CDATA[
            +------------------------------+------------------------+
            |       MESSAGE ID zero        |   MESSAGE ID nonzero   |
   +--------+------------------------------+------------------------+
   |  QR=0  |  DSO unidirectional Message  |  DSO Request Message   |
   +--------+------------------------------+------------------------+
   |  QR=1  |    Invalid - Fatal Error     |  DSO Response Message  |
   +--------+------------------------------+------------------------+
]]></artwork></figure>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="TLV" title="TLV Usage">

<t>The table below indicates, for each of the three TLVs defined in this
document, whether they are valid in each of ten different contexts.</t>

<t>The first five contexts are DSO requests or DSO unidirectional messages from client to server,
and the corresponding responses from server back to client:</t>

<t><list style="symbols">
  <t>C-P - Primary TLV, sent in DSO Request message, from client to server,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>C-U - Primary TLV, sent in DSO Unidirectional message, from client to server,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>C-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from client to server.</t>
  <t>CRP - Response Primary TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>CRA - Response Additional TLV, included in response message sent back to the client
(in response to a client “C-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<t>The second five contexts are their counterparts in the opposite direction:
DSO requests or DSO unidirectional messages from server to client, and the corresponding responses from client back to server.</t>

<t><list style="symbols">
  <t>S-P - Primary TLV, sent in DSO Request message, from server to client,
with nonzero MESSAGE ID indicating that this request MUST generate response message.</t>
  <t>S-U - Primary TLV, sent in DSO Unidirectional message, from server to client,
with zero MESSAGE ID indicating that this request MUST NOT generate response message.</t>
  <t>S-A - Additional TLV, optionally added to a DSO request message or DSO unidirectional message from server to client.</t>
  <t>SRP - Response Primary TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV matches the DSO-TYPE of the Primary TLV in the request.</t>
  <t>SRA - Response Additional TLV, included in response message sent back to the server
(in response to a server “S-P” request with nonzero MESSAGE ID indicating that a response is required)
where the DSO-TYPE of the Response TLV does not match the DSO-TYPE of the Primary TLV in the request.</t>
</list></t>

<figure><artwork><![CDATA[
             +-------------------------+-------------------------+
             | C-P  C-U  C-A  CRP  CRA | S-P  S-U  S-A  SRP  SRA |
+------------+-------------------------+-------------------------+
| KeepAlive  |  X              X       |       X                 |
+------------+-------------------------+-------------------------+
| RetryDelay |                      X  |       X              X  |
+------------+-------------------------+-------------------------+
| Padding    |            X         X  |            X         X  |
+------------+-------------------------+-------------------------+
]]></artwork></figure>

<t>Note that some of the columns in this table are currently empty.
The table provides a template for future TLV definitions to follow.
It is recommended that definitions of future TLVs include a
similar table summarizing the contexts where the new TLV is valid.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="additional-considerations" title="Additional Considerations">

<section anchor="serviceinstances" title="Service Instances">

<t>We use the term service instance to refer to software running on a host
which can receive connections on some set of IP address and port tuples.
What makes the software an instance is that regardless of which of these
tuples the client uses to connect to it, the client is connected to the
same software, running on the same node (but see <xref target="anycast"/>), and will
receive the same answers and the same keying information.</t>

<t>Service instances are identified from the perspective of the client.  If
the client is configured with IP addresses and port number tuples, it has no way
to tell if the service offered at one tuple is the same server that
is listening on a different tuple.   So in this case, the client treats
each such tuple as if it references a separate service instance.</t>

<t>In some cases a client is configured with a hostname and a port number
(either implicitly, where the port number is omitted and assumed,
or explicitly, as in the case of DNS SRV records).
In these cases, the (hostname, port) tuple uniquely
identifies the service instance (hostname comparisons are case-insensitive
<xref target="RFC1034"/>.</t>

<t>It is possible that two hostnames
might point to some common IP addresses; this is a configuration error
which the client is not obliged to detect.   The effect of this could
be that after being told to disconnect, the client might reconnect
to the same server because it is represented as a different service
instance.</t>

<t>Implementations SHOULD NOT resolve hostnames and then
perform matching of IP address(es) in order to evaluate whether
two entities should be determined to be the “same service instance”.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="anycast" title="Anycast Considerations">

<t>When an anycast service is configured on a particular IP address and port, it
must be the case that although there is more than one physical server
responding on that IP address, each such server can be treated as equivalent.
What we mean by “equivalent” here is that both servers can provide the
same service and, where appropriate, the same authentication information,
such as PKI certificates, when establishing connections.</t>

<t>If a change in network topology causes
packets in a particular TCP connection to be sent to an anycast
server instance that does not know about the connection, the new
server will automatically terminate the connection with a TCP reset,
since it will have no record of the connection, and then the client can
reconnect or stop using the connection, as appropriate.</t>

<t>If after the connection is re-established, the client’s assumption that it is
connected to the same service is violated in some way, that would be considered
to be incorrect behavior in this context. It is however out of the possible
scope for this specification to make specific recommendations in this regard;
that would be up to follow-on documents that describe specific uses of DNS
stateful operations.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="sharing" title="Connection Sharing">

<t>As previously specified for DNS over TCP <xref target="RFC7766"/>:</t>

<figure><artwork><![CDATA[
   To mitigate the risk of unintentional server overload, DNS
   clients MUST take care to minimize the number of concurrent
   TCP connections made to any individual server.  It is RECOMMENDED
   that for any given client/server interaction there SHOULD be
   no more than one connection for regular queries, one for zone
   transfers, and one for each protocol that is being used on top
   of TCP (for example, if the resolver was using TLS). However,
   it is noted that certain primary/secondary configurations
   with many busy zones might need to use more than one TCP
   connection for zone transfers for operational reasons (for
   example, to support concurrent transfers of multiple zones).
]]></artwork></figure>

<t>A single server may support multiple services, including DNS Updates 
<xref target="RFC2136"/>, DNS Push Notifications <xref target="I-D.ietf-dnssd-push"/>,
and other services, for one or more DNS zones.
When a client discovers that the target server for several different operations
is the same service instance (see <xref target="serviceinstances"/>), the client SHOULD use a single
shared DSO Session for all those operations.</t>

<t>This requirement has two benefits.
First, it reduces unnecessary connection load on the DNS server.
Second, it avoids paying the TCP slow start penalty when making subsequent
connections to the same server.</t>

<t>However, server implementers and operators should be aware that connection
sharing may not be possible in all cases.
A single host device may be home to multiple independent client software
instances that don’t coordinate with each other.
Similarly, multiple independent client devices behind the same NAT gateway
will also typically appear to the DNS server as different source ports on
the same client IP address.
Because of these constraints, a DNS server MUST be prepared to accept
multiple connections from different source ports on the same client IP address.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="operational-considerations-for-middlebox" title="Operational Considerations for Middlebox">

<t>Where an application-layer middlebox (e.g., a DNS proxy, forwarder,
or session multiplexer) is in the path, care must be taken to avoid
a configuration in which DSO traffic is mis-handled.   The simplest way to
avoid such problems is to avoid using middleboxes.   When this is not possible,
middleboxes should be evaluated to make sure that they behave correctly.</t>

<t>Correct behavior for middleboxes consists of one of:</t>

<t><list style="symbols">
  <t>The middlebox does not forward DSO messages, and responds to DSO messages
with a response code other than NOERROR or DSOTYPENI.</t>
  <t>The middlebox acts as a DSO server and follows this specification in
establishing connections.</t>
  <t>There is a 1:1 correspondence between incoming and outgoing connections,
such that when a connection is established to the middlebox, it is guaranteed
that exactly one corresponding connection will be established from the middlebox
to some DNS resolver, and all incoming messages will be forwarded without
modification or reordering.   An example of this would be a NAT forwarder or
TCP connection optimizer (e.g. for a high-latency connection such as a
geosynchronous satellite link).</t>
</list></t>

<t>Middleboxes that do not meet one of the above criteria are very likely to
fail in unexpected and difficult-to-diagnose ways.   For example, a DNS
load balancer might unbundle DNS messages from the incoming TCP stream and
forward each message from the stream to a different DNS server.   If such
a load balancer is in use, and the DNS servers it points implement DSO and
are configured to enable DSO, DSO session establishment will succeed, but
no coherent session will exist between the client and the server.   If such
a load balancer is pointed at a DNS server that does not implement DSO or
is configured not to allow DSO, no such problem will exist, but such a
configuration risks unexpected failure if new server software is installed
which does implement DSO.</t>

<t>It is of course possible to implement a middlebox that properly supports DSO.
It is even possible to implement one that implements DSO with long-lived operations.
This can be done either by maintaining a 1:1 correspondence between incoming
and outgoing connections, as mentioned above, or by terminating incoming
sessions at the middlebox, but maintaining state in the middlebox about any
long-lived that are requested.   Specifying this in detail is beyond the scope
of this document.</t>

</section>
<section anchor="delack" title="TCP Delayed Acknowledgement Considerations">

<t>Most modern implementations of the Transmission Control Protocol (TCP) include a
feature called “Delayed Acknowledgement” <xref target="RFC1122"/>.</t>

<t>Without this feature, TCP can be very wasteful on the network.
For illustration, consider a simple example like remote login,
using a very simple TCP implementation that lacks delayed acks.
When the user types a keystroke, a data packet is sent.
When the data packet arrives at the server,
the simple TCP implementation sends an immediate acknowledgement.
Mere milliseconds later, the server process reads the one byte of keystroke data,
and consequently the simple TCP implementation sends an immediate window update.
Mere milliseconds later, the server process generates the character echo,
and sends this data back in reply.
The simple TCP implementation then sends this data packet immediately too.
In this case, this simple TCP implementation sends a burst of three packets
almost instantaneously (ack, window update, data).</t>

<t>Clearly it would be more efficient if the TCP implementation were to
combine the three separate packets into one,
and this is what the delayed ack feature enables.</t>

<t>With delayed ack, the TCP implementation waits after receiving a data packet,
typically for 200 ms, and then send its ack if
(a) more data packet(s) arrive
(b) the receiving process generates some reply data, or
(c) 200 ms elapses without either of the above occurring.</t>

<t>With delayed ack, remote login becomes much more efficient,
generating just one packet instead of three for each character echo.</t>

<t>The logic of delayed ack is that the 200 ms delay cannot do any significant harm.
If something at the other end were waiting for something, then the receiving
process should generate the reply that the thing at the end is waiting for,
and TCP will then immediately send that reply (and the ack and window update).
And if the receiving process does not in fact generate any reply for this
particular message, then by definition the thing at the other end cannot be
waiting for anything, so the 200 ms delay is harmless.</t>

<t>This assumption may be true, unless the sender is using Nagle’s algorithm,
a similar efficiency feature, created to protect the network from poorly
written client software that performs many rapid small writes in succession.
Nagle’s algorithm allows these small writes to be combined into larger,
less wasteful packets.</t>

<t>Unfortunately, Nagle’s algorithm and delayed ack,
two valuable efficiency features,
can interact badly with each other when used together <xref target="NagleDA"/>.</t>

<t>DSO request messages elicit responses; DSO unidirectional messages and DSO response messages do not.</t>

<t>For DSO request messages, which do elicit responses, Nagle’s algorithm and delayed ack work as intended.</t>

<t>For DSO messages that do not elicit responses, the delayed ack mechanism
causes the ack to be delayed by 200 ms.
The 200 ms delay on the ack can in turn cause Nagle’s algorithm to prevent the
sender from sending any more data for 200 ms until the awaited ack arrives.
On an enterprise GigE backbone with sub-millisecond round-trip times,
a 200 ms delay is enormous in comparison.</t>

<t>When this issues is raised, there are two solutions that are often offered,
neither of them ideal:</t>

<t><list style="numbers">
  <t>Disable delayed ack.
For DSO messages that elicit no response, removing delayed ack
avoids the needless 200 ms delay,
and sends back an immediate ack, which tells Nagle’s algorithm that it should
immediately grant the sender permission to send its next packet.
Unfortunately, for DSO messages that <spanx style="strong">do</spanx> elicit a response, removing delayed ack
removes the efficiency gains of combining acks with data, and the responder will
now send two or three packets instead of one.</t>
  <t>Disable Nagle’s algorithm.
When acks are delayed by the delayed ack algorithm, removing Nagle’s algorithm
prevents the sender from being blocked from sending its next small packet immediately.
Unfortunately, on a network with a higher round-trip time, removing Nagle’s algorithm
removes the efficiency gains of combining multiple small packets into fewer larger ones,
with the goal of limiting the number of small packets in flight at any one time.</t>
</list></t>

<t>For DSO messages that elicit a response, delayed ack and Nagle’s algorithm do
the right thing.</t>

<t>The problem here is that with DSO messages that elicit no response,
the TCP implementation is stuck waiting, unsure if a response is about to be
generated, or whether the TCP implementation should go ahead and send
an ack and window update.</t>

<t>The solution is networking APIs that allow the receiver to inform the
TCP implementation that a received message has been read, processed,
and no response for this message will be generated.
TCP can then stop waiting for a response that will never come,
and immediately go ahead and send an ack and window update.</t>

<t>For implementations of DSO, disabling delayed ack is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>For implementations of DSO, disabling Nagle’s algorithm is NOT RECOMMENDED,
because of the harm this can do to the network.</t>

<t>At the time that this document is being prepared for publication, it is known
that at least one TCP implementation provides the ability for the recipient of a
TCP message to signal that it is not going to send a response, and hence
the delayed ack mechanism can stop waiting.
Implementations on operating systems where this
feature is available SHOULD make use of it.</t>

<t><vspace blankLines='999' /></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="dso-opcode-registration" title="DSO OPCODE Registration">

<t>The IANA is requested to record the value [TBA1] (tentatively 6) for the DSO OPCODE
in the DNS OPCODE Registry. DSO stands for DNS Stateful Operations.</t>

</section>
<section anchor="dso-rcode-registration" title="DSO RCODE Registration">

<t>The IANA is requested to record the value [TBA2] (tentatively 11) for the
DSOTYPENI error code in the DNS RCODE Registry.
The DSOTYPENI error code (“DSO-TYPE Not Implemented”) indicates that
the receiver does implement DNS Stateful Operations, but does not implement
the specific DSO-TYPE of the primary TLV in the DSO request message.</t>

</section>
<section anchor="dso-type-code-registry" title="DSO Type Code Registry">

<t>The IANA is requested to create the 16-bit DSO Type Code Registry,
with initial (hexadecimal) values as shown below:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Early Data</ttcol>
      <ttcol align='left'>Status</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0000</c>
      <c>Reserved</c>
      <c>NO</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0001</c>
      <c>KeepAlive</c>
      <c>OK</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0002</c>
      <c>RetryDelay</c>
      <c>NO</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0003</c>
      <c>EncryptionPadding</c>
      <c>NA</c>
      <c>Standard</c>
      <c>RFC-TBD</c>
      <c>0004-003F</c>
      <c>Unassigned, reserved for DSO session-management TLVs</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>0040-F7FF</c>
      <c>Unassigned</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>F800-FBFF</c>
      <c>Experimental/local use</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>FC00-FFFF</c>
      <c>Reserved for future expansion</c>
      <c>NO</c>
      <c>&#160;</c>
      <c>&#160;</c>
</texttable>

<t>The meanings of the fields are as follows:</t>

<t><list style="hanging">
  <t hangText='Type:'>
  the 16-bit DSO type code</t>
  <t hangText='Name:'>
  the human-readable name of the TLV</t>
  <t hangText='Early Data:'>
  If OK, this TLV may be sent as early data in a TLS 0-RTT (<xref target="RFC8446"/> Section 2.3) initial
handshake.  If NA, the TLV may appear as a secondary TLV in a DSO message that is send as
early data.</t>
  <t hangText='Status:'>
  IETF Document status (or “External” if not documented in an IETF document.</t>
  <t hangText='Reference:'>
  A stable reference to the document in which this TLV is defined.</t>
</list></t>

<t>DSO Type Code zero is reserved and is not currently intended for allocation.</t>

<t>Registrations of new DSO Type Codes in
the “Reserved for DSO session-management” range 0004-003F
and the “Reserved for future expansion” range FC00-FFFF
require publication of an IETF Standards Action document <xref target="RFC8126"/>.</t>

<t>Any document defining a new TLV which lists a value of “OK” in the 0-RTT column
must include a threat analysis for the use of the TLV in the case of
TLS 0-RTT.  See <xref target="zrtt"/> for details.</t>

<t>Requests to register additional new DSO Type Codes
in the “Unassigned” range 0040-F7FF
are to be recorded by IANA after Expert Review <xref target="RFC8126"/>.
The expert review should validate that the requested type code
is specified in a way that conforms to this specification, and
that the intended use for the code would not be addressed with
an experimental/local assignment.</t>

<t>DSO Type Codes in the “experimental/local” range F800-FBFF
may be used as Experimental Use or Private Use values <xref target="RFC8126"/>
and may be used freely for development purposes,
or for other purposes within a single site.
No attempt is made to prevent multiple sites from using
the same value in different (and incompatible) ways.
There is no need for IANA to review such assignments
(since IANA does not record them) and assignments
are not generally useful for broad interoperability.
It is the responsibility of the sites making use of
“experimental/local” values to ensure that no
conflicts occur within the intended scope of use.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If this mechanism is to be used with DNS over TLS, then these messages
are subject to the same constraints as any other DNS-over-TLS messages
and MUST NOT be sent in the clear before the TLS session is established.</t>

<t>The data field of the “Encryption Padding” TLV could be used as a covert channel.</t>

<t>When designing new DSO TLVs, the potential for data in the
TLV to be used as a tracking identifier should be taken
into consideration, and should be avoided when not required.</t>

<t>When used without TLS or similar cryptographic protection, a malicious
entity maybe able to inject a malicious unidirectional DSO Retry Delay Message
into the data stream, specifying an unreasonably large RETRY DELAY, causing
a denial-of-service attack against the client.</t>

<t>The establishment of DSO sessions has an impact on the number of
open TCP connections on a DNS server. Additional resources may be used on the
server as a result. However, because the server can limit the number of DSO
sessions established and can also close existing DSO sessions as needed, denial
of service or resource exhaustion should not be a concern.</t>

<section anchor="zrtt" title="TLS 0-RTT Considerations">

<t>DSO permits zero round-trip operation using TCP Fast Open <xref target="RFC7413"/> with TLS 1.3 <xref target="RFC8446"/>
0-RTT to reduce or eliminate round trips in session establishment.  TCP Fast Open is only
permitted in combination with TLS 0-RTT.  In the rest of this section we refer to TLS 1.3 early
data in a TLS 0-RTT initial handshake message, whether or not it is included in a TCP SYN
packet with early data using the TCP Fast Open option, as “early data.”</t>

<t>A DSO message may or may not be permitted to be sent as early data.  The definition for
each TLV that can be used as a primary TLV is required to state whether or not that TLV is
permitted as early data.  Only response-requiring messages are ever permitted as early
data, and only clients are permitted to send any DSO message as
early data, unless there is an implicit session (see <xref target="establishment"/>).</t>

<t>For DSO messages that are permitted as early data, a client MAY include one or more such
messages as early data without having to wait for a DSO response to the first
DSO request message to confirm successful establishment of a DSO session.</t>

<t>However, unless there is an implicit session, a client MUST NOT send DSO unidirectional messages
until after a DSO Session has been mutually established.</t>

<t>Similarly, unless there is an implicit session, a server MUST NOT send DSO request messages
until it has received a response-requiring DSO request message from a client and transmitted a
successful NOERROR response for that request.</t>

<t>Caution must be taken to ensure that DSO messages sent as early data
are idempotent, or are otherwise immune to any problems that could be result from the
inadvertent replay that can occur with zero round-trip operation.</t>

<t>It would be possible to add a TLV that requires the server to do some significant
work, and send that to the server as initial data in a TCP SYN packet.   A flood
of such packets could be used as a DoS attack on the server.   None of the TLVs
defined here have this property.</t>

<t>If a new TLV is specified that does have this property, that TLV must be specified as not
permitted in 0-RTT messages.  This prevents work from being done until a round-trip has occurred
from the server to the client to verify that the source address of the packet is reachable.</t>

<t>Documents that define new TLVs must state whether each new TLV may be sent as early data.
Such documents must include a threat analysis in the security
considerations section for each TLV defined in the document that may be sent as early data.
This threat analysis should be done based on the advice given in
<xref target="RFC8446"/> Section 2.3, 8 and Appendix E.5.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to
Stephane Bortzmeyer,
Tim Chown,
Ralph Droms,
Paul Hoffman,
Jan Komissar,
Edward Lewis,
Allison Mankin,
Rui Paulo,
David Schinazi,
Manju Shankar Rao,
Bernie Volz and
Bob Harold
for their helpful contributions to this document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC6891;
&RFC7766;
&RFC2119;
&RFC8174;
&RFC7830;
&RFC1034;
&RFC2136;
&RFC1918;
&RFC8126;


    </references>

    <references title='Informative References'>

<reference anchor="NagleDA" target="http://www.stuartcheshire.org/papers/nagledelayedack/">
  <front>
    <title>TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK</title>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization></organization>
    </author>
    <date year="2005" month="May" day="20"/>
  </front>
</reference>
&RFC7858;
&I-D.ietf-dnssd-push;
&RFC7828;
&I-D.ietf-dnsop-no-response-issue;
&RFC6763;
&I-D.ietf-doh-dns-over-https;
&I-D.ietf-dnssd-mdns-relay;
&RFC6762;
&RFC5382;
&RFC7857;
&RFC2132;
&I-D.ietf-dprive-padding-policy;
&RFC1122;
&RFC7413;
&RFC8446;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAHTyCVwAA+y9bXcbR5Im+j1/RS39waQHgElJlm35zNmhJaqbM3prkrKn
d2fvniJQJKsFVGFQBVFoWfvbN94zsqoAUra7b9851zvaloBCVmZkZGS8PjEe
j0NbtvPiSfbs1Xl23uZtcbWeZ6+XxSpvy7pqwqyeVvkCHpit8qt2XBbt1XhW
NfVy3BRNA4+Mm/K6yufjB4dhBj9/kj04PPpufPRgfPg4lMvVk6xdrZv2weHh
94cPQr4q8ifZadUWq6pow+01vfj1m+znevWurK6zP6zq9TK8u40PjZ/hi8M0
b59kTTsL6yW+pnmSHR0+/GaUffvt48chTOsZ/PpJtobZfReW5ZOQZeOsraf0
v81msSquGv57vWrpHyFftzf1ip6EP1lWVjDo2ST7sZjPy4Y+4pWf5Rv/Yb26
jrPLzjdNWyya7CkQC4Yu14sRfDmd0KP55eWqeA9Pnz+lfzfw6gLW8f03h9nT
m3wFYwDR8TP6elq2G3hdMbut61n2FP7FH9czmMXT4+z7R4ePH8pH66pdwcNv
z4/pg+VNXcFD/3SU7T/+5vAge/TgIezB4SF9WSzycv4kW+Wbfymb6QQWkC76
fAKzKZqbclW4ZZ+3a5hh+g2t/Xi5nBdxkbqo11UhX73JV++yn/ONW9TTNbBU
W1Z1Z0XfHB49unNFjw6/O8i+//7x+OjwKFnRVOb2Lzm+dzKtF+nC/nWSPSun
wFhNXbmV/Wt9U3W+oIWdw/xm6ypu7kUxvanqeX1dFk2yofKkXz/9fZy9zK/z
WT4vquxpAQsq5OPXH67q1Sw7n5ZFNWUKOerwt440r//9UfboD8cdylRlW8yy
fwNOn9FKjQ5/yWf/0vCU+kQ4HybCeb7K/0sRoYEFbafCxSR7USwSClzAOPEz
Wvyr8vLyJt/kdJzXc2DY64TH30xeg4CoPwDjfuem/iNIS5Cil/XK8/dPF9nh
Nw8PQRLa010ml6kvQLrU1b9cra/XA1wMU3+zbkDorUo/+3qRfkwLeFvlV1fl
vISPZ8nM9/a8iIG9Ka9v3FxfPc0efPv4cMs03Vn8/uj7g+y7x9+Ojx4+TM7i
UubyL5d5df0XWkUoK9jSBdwk7wtkjVf59bx4dsxc0uara5zYTdsun3z99e3t
7aQhiaOHGuXU18sc5EbzdYW/nBXzfFPM8um7r3kEvrkunr7J3hQrehOy1XJV
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
r/5w8cd/lBnd67/7ZpuNnx1fHO8a6B8y20y5hOFbjx6P0fZYV015zYevLa4l
tKmtT/cvy2ssoi3z6oC7xUpz12uGBEoMC008Vhhrjpag+5E+Pz1+xf4mimBR
EPGsuC7h3hb1Xxjm951dAwYNRb6pjW0dbSHcQXkv/pXw8mBiY4w0xVZ47Iac
UL04GVuI5I/CFCtbKlQIKLeFo+XGGHxV1csck+P2Luf15V6EbU3aeVhICrQJ
9N30A1QF1eiQCEwn3/MThGjiNV6OltKdRmvarKAhqe9sTD+hMZz2we2cCw7n
cLuY3yW8MxzPSePwLi2uFl+2Ntf6PQJX3djVeNxLGAun0Ux18fCejvIriBCw
ynTI0doLBqgLULSo4Pz3rjcO9/uNmRJJT27eR1HxeCOf+ds1+cFoW+qMn7HG
UEJanUg+tk3W7Shnvpkh3696QILPvuE5bfGCZ1u94PA7LQCZhNc9B731Y185
YoxcxD9fOJnGWl0Y8A30EXzmhJco8EKdt/bc6BpHDy0InUb6E07rxaVWw/pA
PsVyvXWrqY0+7iRhaoTYjGF+C0FtUW8L7SrP8SMNpYZb0ao0Sij5g2n6yLZO
gb7uWM5QLxfLO8XExxrPunNyJDqpqa7OzaEJAvlqtem7TeuV8GjM1pKluMiC
q+exjIIk4ytsy/iyEvyrgnOX+wfmbqST1A8Wpe5b55Ljvfj4hXfTMRzZEP09
cV1PUqCx/30iv7QGT1Nd3UHc74L25ck2cp1cMTsQt2HfU6mF80xF++1WDMFg
GILRA8kM3BnB/ILDaYnbFjsxwu3KPfh19LuTeB7daJB698o1/Hz/qjuCn52G
0UuS7DiPvevY0csLvYRwnett1Nut0I2cWnChk+82cqTBsMws4mLoJUuBd9Gr
0E4nCPRqNmebvRxgFZQhGGPvlvp5b1y5Nbt0C/MAMcIgMYYpMLzscO9lZ/1l
h1+7bHNDYSs5zPvEl1+cn/4BKaKwTFpklAaDOHiR+D2CJNzHM8vgETq4VITL
Nbu9FpOcG1frSjgWNVzpf0N5UmqG1Ab5kb6API2KnXJVp+hqo4R3Xe5XEygq
yBesNR+s5frh4CZ6+/Fw+CSGjledMndkOpq2Yx36CP3mu4eHnz6xZ4nwSbDF
IC1Ryl6CpABGhLlef+GAaMLWzSqTfKBsx7KjAN+SVpQgCLkUI9vvNbcUTYuF
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
bGiZjeglWEGiqGMp0WDexiAp/f5KmrrSh0sBlO+tKqehResItnbqg7LUJm6a
YxAHw+IzRE5E7ZPmyRmjSJ15Apyjo9jTIqIa9bhpEcNbgYcJBtr4GEEbB+sb
OskJVdPMxkt4CH4QLHncvalbBYGD0qwnHdwj0g3pvrY8mxbbiFkzFOqMiruO
yYSm7znUrK5NlKrfbE32rHY0K90146ohciFpQDmUtlXl40c9yQlS2Yu0i5vo
P1wYmNItyviquCoxiPoc46cjtqa4YH+N3IMOT1cICK+h9vZiHCPhNExwTtzM
7TOwizmIx3yjNyGepgajxNwPc1kAx7Ub1khA/ONjEQYz6QLT17thPVb/odJF
tWk1t3n19cprufkth15y34gwiEAn5pQOwWbWEIzPnA2uSWRnVMzhZqG9lHym
m5rxCYytEf4Yc2BJTZDeWeJiCNHKF9UHOy5N6xoT4klbx3PPQW9kXEQ9J58S
Woq7XsBTov59pXc5vDq+yPCeQXuelSbMU2o3S9GapP+Gpq3anlIJYDRiuJSN
C/brKuJcydujDj0JP4plZIU7qFkg0lRFXan9O7qVNJlV0gRbq+cH8oRsnVW2
a1Z2s792Yq9jvOAhelnOZvPisv5A9gu7piQvFh8acwbsQp/KpJssLwv75m1G
Cv2I1wGJCIG0kRV9KFYHgmHKuXvtzYhvbzNx4D4n5YjOUugax1bXiwLA4csv
ymZMMFLUjIkM4oYOBxU/Yt5yoAHZwJHOQ4ziLq+SK81Whxm21rhL685i879R
cE+6w6am5ywqeGs9fZThQQpl4drRhvC0q2viZvjhST9tOAOM68IoweKCMnh1
N8ySUPRNX4bPWoFYgLTooSJ9i7pM0e/nICG1VoJjcRhIeXU66c0gxyQ1g4LV
s0Stgxlmd0ANLh0+Rc8y+0o69ZKX5OjJkQvjotcLAXRvGRxHOsCTCNTCCTfU
yNUQSrFZank4s8M6R+q6RqLRXK9zwjhGKwEHUhQiVtl8fDkxwBg90r/AnJr2
iqCeIu4Nz4oW71lOyGSyPldXx8PqcTM4skA1NEpd0h7JLYItToCfjyvVbcxT
FJuUkcC0Aww/Dh3TFoO2qF+v+OgLGiPmLY7RxqqmyYWpBnkerou62VTTm1Vd
YT5jgzUccwz2z8vqHWpMLx2za2EQBfCKonWVkAw+RdVcsKKcs6Wox6n0QKup
RQVjA1jT1Fx6b6O53iLMxazMryvUFW6xEydQ5XmvRDXQbX+Zz/G+Wonyua4u
1yhiPOhIE3fTdokufXSbLChVVc8j3Wx9IF9+MO2s6BWMjLo7IzFDnqXTYkm6
blyle/wh9bslP2Tj0DnxZOKkyNcZPVFUEUmRm2fYJ4/PL8vuBGCaGY9aA6KB
fgkMV2Hc4UYdftKuAJ8qPpQk0/mMOr0uLf25Y4G0Ava4J/dn6j1JF4hle4mj
TapTCLqPV1jVyVXgZswA6cy8Ib190FZtPGtJNz40kTCcpQWsGtqh/WmwvRrI
DL63aMbJbM2rTJbqetUUaYdZezZ3opZ7j6xQ3ZtvEjwhjeJhb+0tA9XaOt0+
4oJvugVcqalXpS84QEEewRkOEBtnawserga8h5gOW8U0iosFOwEUao7z36OL
i4NIMpDwW6PY1k5m4yb6mZHPw/L3451FHjewNX2NLbtXV5YTwErFeWxoLr18
0IFM8gZ1z02tbI1un6DiVR0znKmNooGC3/CW49iDjral505G0J/pu08gHlHx
xm4BqyrumXapZMl44XvpwEjtCuz9N2r478N7D1yw9qrgytMpsWa2t2VKe4Jo
dXT04AGFP362pqGwMhlkxN4UZg2Sxrd5I+4lhb4jhyp3FrE8bfIOqueNDDy6
lvR6QpGOMIgYF5/X12U1CqyhSVtreRzfnZKEdw8p13AraOpX8q5x+IkgMVdU
BUDdCYsNzKd+R6Kf6gDY0SudC1r3O/9tvlpxZaTHdeCawO1Tk9J2V8uY5SnJ
J+ElFbU7RJts3msMBicfLVT0XcwUIbkQeJyruCKaMLsCkNBsZUqJ+2dNknuN
CyTn501Rc8MkYA1WJ2hN8H0xval5atKTnQ4LEpjyiyihaKnY+Ls2u6h6I+gG
Oii/tq4nCYqM4HzdSQZsO9qIbxezuSUKEPL5Ak8l27TwfwX7Q/fh61FKrxFN
CtWcp3MGsyqdI5ccMQVqJ7EX/eB8pJtR4LIGyWygKVnkN0YoEEC+KjSFu5Qm
O7n2y7RToYdYbv9Gzrh/ZLR1QjnCL7Ev37fqcVsA58GsbVQWHxweZovGBRWo
MJmGwT2/Cvv5AVPEDbLfHMhpC/uXB+KL1Nf12Yz0aEbnJ/ZHbWB/eiDv1n7i
hvcq91iiYNZT9PRx39Y+ObxQMnzZBeoL6V6OgkwK50kdkCgqJ7wJfFPks8hX
5q1Nj4gWTcHLpviw37vSuedkdfQ1CmPUeGbs0EZ0LTIJyP+1WlCJd+zSJAOw
tYfbQYyGm6udme1Zh9xpOxB0B8QGThrDSZME8yH6FxZc/upexOyKnEbaGL3L
n+GGQTsoP2ZJZ01uXCQGp6O4YwcH7hhfcbWFY6LuWIEeN3Xt/ZBo/AaN3QQX
7vMY7RT5jOlR/UVGqsqeXBbBkxZeJZRt6v4+YnwJNmzOXhxuWBOjYOKCa1cI
rbauBHGYQo8z1p35wnyVX88LDKDNrxHp42aBsPuarqXcCqab3edTifgiKAlo
EJRRFK9xNl2WdQ2SLCD+RWtBj6j5am887ilCvvzV/23tapbbRo7wfZ4CxZPk
IhnLdhxXcqIsKevYa7kkeatS2RwgEdIiSwIsgrQtr/wu+yz7ZOn+unumB6Bk
VSV78UoCMMBMT0//fP11ueL4y5IdWr5NeIK0yzjgQIMXtfY8EkvLbrWWZNCF
c9F4Cw5RkxRhJqIRokqRJvAjp4s32wbSNB7Oi3iKbqsDN4CADtvQw6nqxuEK
8C3J8Si9Vi+MKQEHJFs27Y3U+vz2GwY/msGq2oF6Zj3FIJkEVf/bg/B3fvOs
LjP+RTxpJd/YNZK1q6IL+2M+Yo4KiESpFZxztGSxkVL/JufSD8foH0nLinPx
dbcMkniPW1zW3C6lnSebRUyEbOPoVuSbZIEKWq5GEvk7vgmCzg6TdFDXDaTQ
cutccusOpnSWaVt4jMYbW79BrcNpOAUMpJISQzKXir/XN8cwcS75NICsdNvL
ibOmmPStmU82aybArZcsZeVAL1QN7SwOpqAjiWGYrPuWHvkdV1lzBqSsO82n
rwU+yoLdtYutowYrwUTDm1lBbuPQZIfjkoF55eKvIRxMi6O6w6ZwCze9Z+F1
xYEysJpmPkOhjd39QdMnomsqgT/67/bm4qXo/NyQjp3XQGezY50VN6CMNv5s
Qfsyrz6NIF5S9dFOId9/oypl2lco1zs//8mTefvkic1C+b1JwC9V6J3GuUHz
AoQIWOVBJNnDgQCJnWOnYaIkATyTcSVyctKa4zxzZqy3Q0geSX6epbUdTKCl
CXlgFhe3FfubOB026TMHzwu667JzC9tOMtSX3HfTAqa+ixxWQc6Doa0/WBfA
rOz0MpQjGpj0t9qDL/v4lUlJXveKapZfV2Rf6VHFU66EpXjqTcuEJdfk+y7r
SA2TcAz9pxXXKBdHaKyROLS0tnt4I3oRzJaMZGS4Z+ZCH7bGSLBV1CS1yFmG
9cKnPEoFhHu8CvbJNls+WMRMYtOm0xhbXheiYCk+FMzSZiXXrn1J7U7PTi1V
Mo+ZuLMwrcLMMTtNSStrU4WJXJCIEy/S7MMbU6GILyZzU9CIglLDyXJftKIc
9MDwDJGMf1Gr1Wgv3UwmgFHqYCfJgTgp02AhGnG6GK2VWaGueEdWkR7QVMLI
uLQmVF5b9qeueGDqEPUZRq0Qhp1D1fR0IM8vA0Id3mYcWSjVUWO72Jx5Rj9Z
1ibGmh457FDg/y+Dz9ThiW14cgaLiMGJ2V9ehtX20nKtlnMCk5mkm7T95sbQ
Ln1BimUf4seimWVkCSHxqlfW1K+EODjyL/YQS4MHRaixhGft8PNaAxQKHNoN
99pumBkvaNMB9BcJJfOPu1s6h5apPoR8LgtN8Fb/VJK3wmeSYkKQWdUVqTep
dOTN7P1sV9EIq6TTDyDvOqtuagtAyr7GTamuUTwfRUTyBwoXzM//ujicHfz8
72JvI9/wiXfCy33fsemP32WQUEeciP3qj9914NuppFc2JdsxhpqLzeFOPX5F
3/zsf3/xZ/0XPziIbx5iTle52ZD+9Z9w1vsCI7oa3rU3iqV270mG4ppX89F+
jw83ZIqynxjZPScS1x+mfSTualjHfrXfaljtt8MTSvN9wQQxr/lz7IsfmG9l
XOWHHrwEofnuR+g5L0xri2Lvl+pLyd11l0zEr4xIJcIonxuhliBL+04edEd6
asn/HCN+eMQ+yB3mhzwArqnTOpDiLtxJeVn+T/7/2S9piKf0H56C0O2cRzuV
xzNKj38+O3k9uTg8KvTqg8JXE94Vp28fvPxZ0Sv7+87jn/OHRgohK9Wj22YP
3vZiQree0O8/NmUnlPKgUZKPMuNcU0aTZdmUmnhBJZu+1Z0+7cXTyclfTvKn
5decvHpK1xzimuMv3BcFum3xJzJaaX1ZOeXXv+brT3D9mX8rraervqzKBv6G
uw1ip83NYq4H/HBigWd9DlhUmHS/J4qgO+LNGQJLkV0BZtIJWxdQrKiGsWQS
MyUmUeM73lzTKmvM3PFZWT/U1KRB4PEX786Lp5OziwtuUUzr9OrFi5ffvhXn
Cg14Nn2+bzshMG6n+4UUOkq5aJXH9hIYRVFapdQ4GXI0I7PPeBslbQMmwKx1
hOwWfMvxxUlxFHmdZRft0UqMjr+Qn05H4QgZXYRQ5SrBj9ORhntdTi9uPel2
0En5YyzMMssgnfypMYHOZB3JYTQUlFSH8IF2SYiVMhCUtrEA1CIvBoRsr6y8
zp8YkB5OUmdDsBsB3Tk6+/5GGRVr1EjEvRYZYkYPCrTdF3dAsLanzuIR4jWZ
X9vjXTETeYnTJ5jyVwfPXiJyNiO3J/5N4rCRkpbnVqZ6UUvLdDkOaZzR6duR
HQQipVJoK4U2MU0KVxnOlbL32knvTEF3pGgJW4iyT/J8DqDr1/VmQ9Iv/dQ5
Y9xhcZTZAmc2LxSnQVPp63CtzKoYJZWUlkQVVlAovHKoAxpE7jlOLknVQFcx
XfenmkbIJ5S1TSV/X8vf1VdChW7puZjdGRj1S93ltG2lYO8Uear9pY0e2MPA
YFKG+Owo0dvo3igmTdJmile1YjoBP6G3z1APy0zpbh3Ivszn8LYosqbkgyo8
o5j1Gr/42AFT/WFdf+I5+hgZ27PpxW7xj7leV5UmGebkbC3aFeQ4skwHhQJK
GNl+Hfs/RZR5zW7W+zYSwtapoMHCmikigeg5AirIDiQ4a2TSTiikPWk+jPji
hnEk+wKZChGWR34oIPn8mpAxCLNIjsC/bPa7sCelR7gsWnDJWl3uW6lovMP6
AWXc3GwQos3xmqFCiL3DjRCPx+AvKRDW1eoL6Y6VGVDwtezksFMCUo/zqkkg
zqYFKIjUFuMxOVFoC5JJrtT+cF0LKJm5bJ0u5dfoeydvrs17N9eptvTG1mTb
Fda8O09ZOBfnx1w5zsu4rA6BjDOUA0WQJ3rkhB85YX2VHsMcgq4fuRHKYAdy
+rpwreb4ToN85SBKjZhIsBx0tjr7oyE35AhKNBJ3JhJnlCBsUJnXVAuLbdPG
5YQm0+KahiT7TWyGVYsSIm2j60gdg5IwZ8+nabmCFMRy4bVD8gKJHBCzu/JL
Ju6vg9dz1JrXiV/OdyS3F46ryOEqnjJOqWr6DXPR3qzLFZ1Ulm2TQbhNS33F
ZVYBpasMtLrl8QzP1WCt3XX97JBQFCUi6h+NFL8xq4QnSACI1pzpVpId9Cip
iymZjhvRSs8fP0YqBVAuWo+GJnzSXk9iGedmg1gQIqNazqi8PHLCZIhC7Sob
oVy/lAo+WaFnbpMHQQNaovbrt6RXq8NMOgoJa0bTZbpXnhsS4L9Uwu9UzxTr
nB2qhaMaiM72QrP0BQmM5rG+paR+pfRAuiUBZYhyH//ZTD1AmpR9FplRRpBF
2oF1/AzfU0eF0I5DI8dVqFk0wQfAMtgjchpqz1AxNV00PPGJa6kXzfgJR59O
ef610eGLg+dk1kBB8WgH0+f6FzH3gwyPI4FLa/gzKp49VHtgsIIHk0TwLrjp
tOgNrHTdIesQ54g+08uYBfbG8ApdKo43MtbPVaIAsQ+AzxB2eTLmuUd/JUEB
LOCMTr0WQ/NMSlKCe/7P91pFbEni6DWl4tn8g9tVLKMdOXdmxFVm3vVh2W7X
WTVPnCJXkZy5alMplHD4BS6BQ+Ya6hJ2W9ZPkAufc8Z/U3aIE25czb3NBZ4i
F7tV67/HaYOOqRJgnMhDM8A7H29VanLrnxFS+gtU7lYfyrdkk6CB6rz3QeYm
ehyFRh6byHYRRVTL1zJJ/fZt/968S/4i2aePU83dj2jLIa6HL9IDMDrNQ+Zr
26nCdSMSq0WXDonpZ3gAI+7narddgAOlj6G/Lw2TwYbWQFWXXmv5irRHTJz/
2KwzxQPIhiD59YcanJJxu9nCOswNEFc99siX86VZ2cv1MRP6VkoZE3M35S4R
3jXZsL/LDA8v+F2RkOBWwEpveumeMjZ3Y1xhKXmpQRGVN1wzuRwqg6DMO0ux
oZBHK61x1GdGLtTL5baJZdKxhkrdu9i4iw/RWN7AfbvnbMVVjaC2oj/IZbvR
er7/+BF0fERLekA7WY/Qzz+l6SABynoTMc2JVtY4FFzgJM045a7E7/SEdgJo
EXXvjgJR4Zb+53Ka4nrRtnMc1agm0NzsDmP2qD03w8jK9WL5w3tX4sLGbDC2
YMgr6sVwbgngn50c4axwFFrJ706FEcMbx0kdm6z4npyssPOjVU4+ExscGHVX
xLR9woNJOguVAbpj/XLyLhFQZTUPqfQlLlIyEfkn+qW0ATJstRg+Ro1iQf2I
0kbfezaL2cPv8yDwRNpEdfLV+TmF885m8t6w5jScbwGSssd/J1RU2xqL1xeu
chusc/Xp8cDNOKJdzHAjzGH3vhnWpP8CjuUG2PAyWb00k7AqrTlpuCdEOy5e
YZPM0NWm/lIcT/8MX7ZXJgCO+7L5ld3WcL6pVvRDVRy2683XZXXLiLyLelm8
5sTGOJyVixX5syQD3Th8KEnD/dBeXy9L+tM/SCe8bRl1U9I9x3NUTb2rSPmM
w4zhUdxOmcbhWoCzbV3w3e04HNHhNy/OmRio/FqPA13yny1TVzS/kod1VtIl
h2QV11XxU7v4ikjTYXtZ/FCu2wWqs3hO6jVttsWKNS4zfKzrS8NGtUW/jmMy
mQB/FP4LI/BZxDHJAQA=

-->

</rfc>

